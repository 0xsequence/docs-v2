{"documentCount":481,"nextId":481,"documentIds":{"0":"docs/pages/builder.mdx#builder-intro","1":"docs/pages/stack.mdx#stack","2":"docs/pages/support.mdx#support","3":"docs/pages/wallet.mdx#wallet","4":"docs/pages/guides/discord.mdx#deploy-an-in-game-collectibles-contract","5":"docs/pages/guides/discord.mdx#query-contract-details","6":"docs/pages/guides/lootbox.mdx#deploy-an-in-game-collectibles-contract","7":"docs/pages/guides/lootbox.mdx#query-contract-details","8":"docs/pages/guides/unity-guide.mdx#integrate-sequencekit-with-waas","9":"docs/pages/guides/unity-guide.mdx#deploy-a-collectibles-contract","10":"docs/pages/guides/unity-guide.mdx#deploy-a-remote-minter","11":"docs/pages/guides/unity-guide.mdx#mint-in-game-achievement-tokens","12":"docs/pages/guides/unity-guide.mdx#burn-in-game-achievement-tokens","13":"docs/pages/guides/unity-guide.mdx#integrate-an-embedded-marketplace","14":"docs/pages/guides/webgl-guide.mdx#integrate-sequencekit-with-waas","15":"docs/pages/guides/webgl-guide.mdx#deploy-a-collectibles-contract","16":"docs/pages/guides/webgl-guide.mdx#deploy-a-remote-minter","17":"docs/pages/guides/webgl-guide.mdx#mint-in-game-achievement-tokens","18":"docs/pages/guides/webgl-guide.mdx#burn-in-game-achievement-tokens","19":"docs/pages/guides/webgl-guide.mdx#integrate-an-embedded-marketplace","20":"docs/pages/solutions/minter.mdx#mint-tokens-using-builder-manually","21":"docs/pages/solutions/minter.mdx#deploy-a-serverless-minter-on-cloudflare-workers","22":"docs/pages/solutions/nft-checkout.mdx#integrate-nft-checkout-on-web","23":"docs/pages/solutions/onramps.mdx#integrate-onramp-on-web","24":"docs/pages/support/token-directory.mdx#token-directory","25":"docs/pages/guides/templates/02-building-relaying-server.mdx#building-a-relaying-server","26":"docs/pages/guides/templates/02-building-relaying-server.mdx#nodejs-server","27":"docs/pages/guides/templates/02-building-relaying-server.mdx#nodejs-server-with-gas-sponsoring-using-sequence-builder","28":"docs/pages/guides/templates/02-building-relaying-server.mdx#a-create-dapp","29":"docs/pages/guides/templates/02-building-relaying-server.mdx#b-new-dapp","30":"docs/pages/guides/templates/02-building-relaying-server.mdx#c1-gas-tank","31":"docs/pages/guides/templates/02-building-relaying-server.mdx#c2-add-gas","32":"docs/pages/guides/templates/02-building-relaying-server.mdx#c3-add-sponsored-address","33":"docs/pages/guides/templates/02-building-relaying-server.mdx#parallel-transactions","34":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#mint-collectibles-using-a-gasless-serverless-relayer","35":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#1-setup-cloudflare-environment-with-wrangler-cli-and-deploy-a-test","36":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#deploy-test","37":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#2-deploy-sponsor-and-update-metadata-for-an-erc1155-contract-with-builder","38":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#update-metadata","39":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#contract-sponsoring","40":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#3-use-ethauthproof-to-prevent-eoa-ddos","41":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#add-cloudflare-environment-variables","42":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#implement-window-object-in-wrangler-template","43":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#testing-the-deploy","44":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#using-the-ethauthproof-viewer-dapp","45":"docs/pages/guides/templates/03-mint-collectibles-serverless.mdx#4-mint-a-collectible-to-wallet","46":"docs/pages/guides/templates/template-embedded-wallet.mdx#quickstart","47":"docs/pages/guides/templates/template-embedded-wallet.mdx#try-a-demo","48":"docs/pages/guides/templates/template-embedded-wallet.mdx#template","49":"docs/pages/guides/templates/template-embedded-wallet.mdx#getting-started","50":"docs/pages/guides/templates/template-embedded-wallet.mdx#sdk-installation","51":"docs/pages/guides/templates/template-embedded-wallet.mdx#project-setup","52":"docs/pages/guides/templates/template-embedded-wallet.mdx#library-setup","53":"docs/pages/guides/templates/template-marketplace-api.mdx#deploy-an-in-game-collectibles-contract","54":"docs/pages/guides/templates/template-marketplace-api.mdx#query-contract-details","55":"docs/pages/sdk/go/overview.mdx#go","56":"docs/pages/sdk/go/overview.mdx#ethkit","57":"docs/pages/sdk/sequence-kit/01-overview.mdx#sequencekit-sdk","58":"docs/pages/sdk/sequence-kit/01-overview.mdx#key-features","59":"docs/pages/sdk/sequence-kit/01-overview.mdx#next-steps","60":"docs/pages/sdk/sequence-kit/02-getting-started.mdx#getting-started-with-sequence-kit","61":"docs/pages/sdk/sequence-kit/02-getting-started.mdx#installing-sequence-kit-packages","62":"docs/pages/sdk/sequence-kit/02-getting-started.mdx#setting-up-the-kit-wrapper","63":"docs/pages/sdk/sequence-kit/02-getting-started.mdx#setting-up-the-embedded-wallet-wrapper","64":"docs/pages/sdk/sequence-kit/02-getting-started.mdx#triggering-the-connect-modal","65":"docs/pages/sdk/sequence-kit/02-getting-started.mdx#invoking-the-embedded-wallet-modal","66":"docs/pages/sdk/sequence-kit/02-getting-started.mdx#react-example","67":"docs/pages/sdk/sequence-kit/03-configuration.mdx#configuration-options","68":"docs/pages/sdk/sequence-kit/03-configuration.mdx#available-options","69":"docs/pages/sdk/sequence-kit/03-configuration.mdx#defaulttheme","70":"docs/pages/sdk/sequence-kit/03-configuration.mdx#position","71":"docs/pages/sdk/sequence-kit/03-configuration.mdx#sign-in-modal-configuration-signin","72":"docs/pages/sdk/sequence-kit/03-configuration.mdx#signinlogourl","73":"docs/pages/sdk/sequence-kit/03-configuration.mdx#signinprojectname","74":"docs/pages/sdk/sequence-kit/03-configuration.mdx#signinshowemailinput","75":"docs/pages/sdk/sequence-kit/03-configuration.mdx#signinsocialauthoptions","76":"docs/pages/sdk/sequence-kit/03-configuration.mdx#signinwalletauthoptions","77":"docs/pages/sdk/sequence-kit/03-configuration.mdx#displayedassets","78":"docs/pages/sdk/sequence-kit/04-checkout.mdx#overview","79":"docs/pages/sdk/sequence-kit/04-checkout.mdx#integration","80":"docs/pages/sdk/sequence-kit/04-checkout.mdx#opening-the-checkout-modal","81":"docs/pages/sdk/sequence-kit/04-checkout.mdx#configuring-the-checkout-modal","82":"docs/pages/sdk/sequence-kit/04-checkout.mdx#crypto-checkout-configuration-cryptocheckout","83":"docs/pages/sdk/sequence-kit/04-checkout.mdx#order-summary-configuration-ordersummaryitems","84":"docs/pages/sdk/sequence-kit/05-custom-connectors.mdx#custom-connectors-in-sequence-kit","85":"docs/pages/sdk/sequence-kit/05-custom-connectors.mdx#creating-a-custom-connector","86":"docs/pages/sdk/sequence-kit/05-custom-connectors.mdx#using-custom-connectors","87":"docs/pages/sdk/sequence-kit/05-custom-connectors.mdx#share-your-custom-connectors","88":"docs/pages/sdk/typescript/01-overview.mdx#wallet","89":"docs/pages/sdk/typescript/02-quickstart.mdx#quickstart","90":"docs/pages/sdk/typescript/02-quickstart.mdx#try-a-demo","91":"docs/pages/sdk/typescript/02-quickstart.mdx#template","92":"docs/pages/sdk/typescript/02-quickstart.mdx#install-for-existing-project","93":"docs/pages/sdk/typescript/02-quickstart.mdx#cdn-distribution-as-native-js","94":"docs/pages/sdk/typescript/04-platforms.mdx#platforms","95":"docs/pages/sdk/typescript/04-platforms.mdx#web-wallet","96":"docs/pages/sdk/typescript/04-platforms.mdx#mobile-wallet","97":"docs/pages/sdk/typescript/04-platforms.mdx#browser-extension-wallet","98":"docs/pages/sdk/typescript/05-fiat-on-ramps.mdx#fiat-on-ramps","99":"docs/pages/sdk/typescript/06-key-management.mdx#key-management","100":"docs/pages/sdk/typescript/06-key-management.mdx#social-login-wallets","101":"docs/pages/sdk/typescript/06-key-management.mdx#session-keys","102":"docs/pages/sdk/typescript/06-key-management.mdx#guard-key","103":"docs/pages/sdk/typescript/06-key-management.mdx#torus-key","104":"docs/pages/sdk/unity/01-overview.mdx#introduction","105":"docs/pages/sdk/unity/01-overview.mdx#requirements","106":"docs/pages/sdk/unity/02-installation.mdx#installation","107":"docs/pages/sdk/unity/02-installation.mdx#package-manager---recommended","108":"docs/pages/sdk/unity/02-installation.mdx#samples","109":"docs/pages/sdk/unity/02-installation.mdx#manual","110":"docs/pages/sdk/unity/03-setup.mdx#setup","111":"docs/pages/sdk/unity/04-authentication.mdx#authentication","112":"docs/pages/sdk/unity/04-authentication.mdx#1-email-sign-in","113":"docs/pages/sdk/unity/04-authentication.mdx#2-social-sign-in","114":"docs/pages/sdk/unity/04-authentication.mdx#ios","115":"docs/pages/sdk/unity/04-authentication.mdx#macos","116":"docs/pages/sdk/unity/04-authentication.mdx#pc","117":"docs/pages/sdk/unity/04-authentication.mdx#android","118":"docs/pages/sdk/unity/04-authentication.mdx#webgl","119":"docs/pages/sdk/unity/04-authentication.mdx#connecting-with-waas","120":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#write-to-blockchain","121":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#rawtransaction","122":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#senderc20","123":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#complex-erc20-interactions","124":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#senderc721","125":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#complex-erc721-interactions","126":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#senderc1155","127":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#complex-erc1155-interactions","128":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#delayedencode","129":"docs/pages/sdk/unity/05-write-to-blockchain.mdx#batch-transactions","130":"docs/pages/sdk/unity/06-read-from-blockchain.mdx#read-from-blockchain","131":"docs/pages/sdk/unity/07-sign-messages.mdx#sign-messages","132":"docs/pages/sdk/unity/08-deploy-contracts.mdx#contract-deployment","133":"docs/pages/sdk/unity/09-wallet-ui.mdx#wallet-ui","134":"docs/pages/sdk/unity/09-wallet-ui.mdx#how-it-works","135":"docs/pages/sdk/unity/09-wallet-ui.mdx#ui-customizability","136":"docs/pages/sdk/unity/09-wallet-ui.mdx#color-scheme-manager","137":"docs/pages/sdk/unity/09-wallet-ui.mdx#more-customization-tools-coming-soon","138":"docs/pages/solutions/builder/getting-started.mdx#get-started","139":"docs/pages/solutions/builder/getting-started.mdx#sign-up-for-builder","140":"docs/pages/solutions/builder/getting-started.mdx#step-1-go-to-sequencebuild","141":"docs/pages/solutions/builder/getting-started.mdx#step-2-choose-a-sign-in-method","142":"docs/pages/solutions/builder/getting-started.mdx#step-3-sign-in-to-sequencebuild","143":"docs/pages/solutions/builder/getting-started.mdx#create-a-project","144":"docs/pages/solutions/builder/getting-started.mdx#step-1-enter-the-project-details","145":"docs/pages/solutions/builder/getting-started.mdx#step-2-create-the-project","146":"docs/pages/solutions/builder/getting-started.mdx#build-things","147":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#connect-wallet","148":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#connecting-your-dapp-with-0xsequence","149":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#wallet-login-and-connect-options","150":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#app","151":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#appprotocol","152":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#origin","153":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#expiry","154":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#authorize","155":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#authorizenonce","156":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#refresh","157":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#keepwalletopened","158":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#askforemail","159":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingstheme","160":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingsbannerurl","161":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingssigninwith","162":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingssigninwithemail","163":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingssigninoptions","164":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingsincludedpaymentproviders","165":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingsdefaultfundingcurrency","166":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingsdefaultpurchaseamount","167":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#settingslockfundingcurrencytodefault","168":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#connecting-your-dapp-with-web3js-or-ethersjs","169":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#connecting-to-any-ethereum-dapp-with-the-sequence-wallet-chrome-extension","170":"docs/pages/sdk/typescript/03-guides/01-connect-wallet.mdx#connecting-via-walletconnect","171":"docs/pages/sdk/typescript/03-guides/02-auth-address.mdx#authenticate-users-with-message-signature","172":"docs/pages/sdk/typescript/03-guides/02-auth-address.mdx#ask-for-the-wallet-address","173":"docs/pages/sdk/typescript/03-guides/02-auth-address.mdx#authenticate-wallet","174":"docs/pages/sdk/typescript/03-guides/02-auth-address.mdx#authenticate-wallet-server-side","175":"docs/pages/sdk/typescript/03-guides/03-sign-message.mdx#todo---replace-with-code-groups-from-vocs","176":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#no-wallet-confirmation-signatures","177":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#session-keys","178":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#using-session-keys-with-sequence","179":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#1-initialize-sequence-wallet-and-connect","180":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#2-generate-a-session-key","181":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#3-sign-authorization-message","182":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#4-verify-authorization-signature","183":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#5-sign-message-with-session-key","184":"docs/pages/sdk/typescript/03-guides/04-session-keys.mdx#6-verify-session-signature","185":"docs/pages/sdk/typescript/03-guides/05-send-transaction.mdx#sending-transactions","186":"docs/pages/sdk/typescript/03-guides/06-send-erc20.mdx#sending-erc-20-tokens","187":"docs/pages/sdk/typescript/03-guides/07-send-erc721.mdx#sending-erc-721-nft-tokens","188":"docs/pages/sdk/typescript/03-guides/08-send-erc1155.mdx#sending-erc-1155-collectible-tokens","189":"docs/pages/sdk/typescript/03-guides/09-send-batch-transactions.mdx#sending-a-batch-of-transactions","190":"docs/pages/sdk/typescript/03-guides/10-building-backends.mdx#building-backends-with-sequence","191":"docs/pages/sdk/typescript/03-guides/10-building-backends.mdx#nodejs","192":"docs/pages/sdk/typescript/03-guides/10-building-backends.mdx#go","193":"docs/pages/sdk/typescript/03-guides/10-building-backends.mdx#ethkit","194":"docs/pages/sdk/typescript/03-guides/10-building-backends.mdx#support-for-other-backend-languages","195":"docs/pages/sdk/typescript/connectors/01-overview.mdx#wallet-connectors","196":"docs/pages/sdk/typescript/connectors/02-sequence-kit.mdx#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications","197":"docs/pages/sdk/typescript/connectors/02-sequence-kit.mdx#key-features","198":"docs/pages/sdk/typescript/connectors/02-sequence-kit.mdx#next-steps","199":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#using-wagmi","200":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#installation","201":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#usage","202":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#parameters","203":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#chains","204":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#optionsconnect-optional","205":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#optionsdefaultnetwork-optional","206":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#using-older-versions-of-wagmi--012x","207":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#using-nextjs","208":"docs/pages/sdk/typescript/connectors/03-wagmi.mdx#examples","209":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#using-rainbowkit","210":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#installation","211":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#usage","212":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#parameters","213":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#chains","214":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#connect-optional","215":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#defaultnetwork-optional","216":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#using-nextjs","217":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#using-older-versions-of-wagmi--012x","218":"docs/pages/sdk/typescript/connectors/04-rainbow-kit.mdx#examples","219":"docs/pages/sdk/typescript/connectors/05-web3-onboard.mdx#using-web3-onboard","220":"docs/pages/sdk/typescript/connectors/05-web3-onboard.mdx#installation","221":"docs/pages/sdk/typescript/connectors/05-web3-onboard.mdx#usage","222":"docs/pages/sdk/typescript/connectors/05-web3-onboard.mdx#parameters","223":"docs/pages/sdk/typescript/connectors/05-web3-onboard.mdx#network-optional","224":"docs/pages/sdk/typescript/connectors/05-web3-onboard.mdx#appname-optional","225":"docs/pages/sdk/typescript/connectors/05-web3-onboard.mdx#example","226":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#using-web3-react-v6","227":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#installation","228":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#usage","229":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#initialization","230":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#activationdeactivation","231":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#options","232":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#chainid","233":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#appname-optional","234":"docs/pages/sdk/typescript/connectors/06-web3-react-v6.mdx#example","235":"docs/pages/sdk/typescript/connectors/07-web3modal.mdx#using-web3modal","236":"docs/pages/sdk/typescript/connectors/07-web3modal.mdx#usage","237":"docs/pages/sdk/typescript/connectors/07-web3modal.mdx#example","238":"docs/pages/sdk/typescript/connectors/08-FAQ.mdx#nextjs","239":"docs/pages/sdk/typescript/connectors/08-FAQ.mdx#why-does-my-wallet-integration-produce-an-error-when-used-with-nextjs","240":"docs/pages/sdk/typescript/connectors/08-FAQ.mdx#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-pages-directory-all-versions-of-nextjs","241":"docs/pages/sdk/typescript/connectors/08-FAQ.mdx#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only","242":"docs/pages/sdk/unity/Advanced/01-introduction.mdx#advanced---introduction","243":"docs/pages/sdk/unity/Advanced/01-introduction.mdx#important-components","244":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#wallets","245":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#1-ethwallet","246":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#2-waastowalletadapter","247":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#methods","248":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#getaddress","249":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#sendtransaction","250":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#sendtransactionandwaitforreceipt","251":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#sendtransactionbatch","252":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#sendtransactionbatchandwaitforreceipts","253":"docs/pages/sdk/unity/Advanced/02-wallets.mdx#signmessage","254":"docs/pages/sdk/unity/Advanced/03-clients.mdx#clients","255":"docs/pages/sdk/unity/Advanced/03-clients.mdx#methods","256":"docs/pages/sdk/unity/Advanced/03-clients.mdx#balanceat","257":"docs/pages/sdk/unity/Advanced/03-clients.mdx#blockbynumber","258":"docs/pages/sdk/unity/Advanced/03-clients.mdx#blockbyhash","259":"docs/pages/sdk/unity/Advanced/03-clients.mdx#blocknumber","260":"docs/pages/sdk/unity/Advanced/03-clients.mdx#blockrange","261":"docs/pages/sdk/unity/Advanced/03-clients.mdx#chainid","262":"docs/pages/sdk/unity/Advanced/03-clients.mdx#codeat","263":"docs/pages/sdk/unity/Advanced/03-clients.mdx#estimategas","264":"docs/pages/sdk/unity/Advanced/03-clients.mdx#feehistory","265":"docs/pages/sdk/unity/Advanced/03-clients.mdx#networkid","266":"docs/pages/sdk/unity/Advanced/03-clients.mdx#nonceat","267":"docs/pages/sdk/unity/Advanced/03-clients.mdx#sendrawtransaction","268":"docs/pages/sdk/unity/Advanced/03-clients.mdx#suggestgasprice","269":"docs/pages/sdk/unity/Advanced/03-clients.mdx#suggestgastipcap","270":"docs/pages/sdk/unity/Advanced/03-clients.mdx#transactionbyhash","271":"docs/pages/sdk/unity/Advanced/03-clients.mdx#transactioncount","272":"docs/pages/sdk/unity/Advanced/03-clients.mdx#waitfortransactionreceipt","273":"docs/pages/sdk/unity/Advanced/04-transfers.mdx#transfers","274":"docs/pages/sdk/unity/Advanced/05-contracts.mdx#contracts","275":"docs/pages/sdk/unity/Advanced/05-contracts.mdx#calling-smart-contract-functions","276":"docs/pages/sdk/unity/Advanced/05-contracts.mdx#understanding-data-type-mappings","277":"docs/pages/sdk/unity/Advanced/05-contracts.mdx#querying-contracts","278":"docs/pages/sdk/unity/Advanced/05-contracts.mdx#deploying-contracts","279":"docs/pages/sdk/unity/Advanced/06-tokens.mdx#tokens","280":"docs/pages/sdk/unity/Advanced/06-tokens.mdx#bonus-ownable","281":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#how-to-deploy-an-item-collection-contract","282":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#step-1-go-to-the-contracts-section","283":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#add-a-new-contract","284":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#step-2-choose-a-contract-for-your-item-collection","285":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#select-a-contract","286":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#bring-your-own-smart-contract","287":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#step-3-deploy-your-smart-contract","288":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#selectconfirm-the-network","289":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#provide-a-contract-name-and-symbol","290":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#determine-a-contract-owner","291":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#step-4-sign-the-transaction","292":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#sequence-wallet","293":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#signature-modal","294":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#step-5-collectible-contract-deployed","295":"docs/pages/solutions/collectibles/contracts/200-deploy-an-item-collection-contract.mdx#linked-contract-in-dashboard","296":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#how-to-mint-in-game-items-and-achievements-in-builder","297":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#introduction","298":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#what-is-an-erc-1155","299":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#what-can-you-do-with-it","300":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#prerequisite-create-a-project-and-deploy-a-smart-contract","301":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#step-1-select-the-collection-for-your-item","302":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#step-2-navigate-to-write-contract","303":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#step-3-provide-details-for-the-mint-method","304":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#step-4-mint-and-sign-your-transaction","305":"docs/pages/solutions/collectibles/contracts/900-mint-items-from-ERC1155.mdx#step-5-confirm-your-minted-items","306":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#how-to-mint-digital-collectibles-in-builder","307":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#introduction","308":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#erc-721-vs-erc-1155","309":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#choosing-for-gaming","310":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#prerequisite-create-a-project-and-deploy-a-smart-contract","311":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#step-1-select-the-contract-for-your-digital-collectibles","312":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#step-2-navigate-to-write-contract","313":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#step-3-provide-details-for-the-mint-method","314":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#step-4-mint-and-sign-your-transaction","315":"docs/pages/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721.mdx#step-5-confirm-your-minted-collectibles","316":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#how-to-mint-in-game-currency-in-builder","317":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#introduction","318":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#what-is-an-erc-20-token","319":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#fungability-vs-non-fungibility","320":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#prerequisite-create-a-project-and-deploy-a-smart-contract","321":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#step-1-select-the-contract-for-your-currency","322":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#step-2-navigate-to-write-contract","323":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#step-3-provide-details-for-the-mint-method","324":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#step-4-mint-and-sign-your-transaction","325":"docs/pages/solutions/collectibles/contracts/903-mint-currency-from-ERC20.mdx#step-5-confirm-your-minted-currency","326":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#how-to-manage-item-metadata-in-sequence-builder","327":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#introduction","328":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-1-prepare-your-token-images-and-metadata","329":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-2-set-up-on-pinatacloud","330":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-3-upload-your-metadata-files","331":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-4-get-the-folder-url","332":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-5-set-up-on-sequence-builder","333":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-6-deploy-your-contract","334":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-7-move-to-contract-details","335":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-8-update-contract-attributes","336":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-9-set-the-base-metadata-uri","337":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-10-minting-time","338":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-11-finalize-and-admire","339":"docs/pages/solutions/collectibles/metadata/800-manage-metadata-builder.mdx#step-12-updating-metadata","340":"docs/pages/solutions/marketplaces/orderbook/01-overview.mdx#overview","341":"docs/pages/solutions/marketplaces/orderbook/02-quickstart.mdx#quickstart","342":"docs/pages/solutions/marketplaces/orderbook/02-quickstart.mdx#try-a-demo","343":"docs/pages/solutions/marketplaces/orderbook/02-quickstart.mdx#template","344":"docs/pages/solutions/marketplaces/orderbook/02-quickstart.mdx#getting-started","345":"docs/pages/solutions/payments/onramps/01-fiat-on-ramps.mdx#fiat-on-ramps","346":"docs/pages/solutions/technical-references/wallet-contracts/01-why.mdx#why-smart-contracts-wallets","347":"docs/pages/solutions/technical-references/wallet-contracts/01-why.mdx#externally-owned-accounts","348":"docs/pages/solutions/technical-references/wallet-contracts/01-why.mdx#pros","349":"docs/pages/solutions/technical-references/wallet-contracts/01-why.mdx#popular-examples","350":"docs/pages/solutions/technical-references/wallet-contracts/01-why.mdx#smart-contract-wallets","351":"docs/pages/solutions/technical-references/wallet-contracts/01-why.mdx#pros-1","352":"docs/pages/solutions/technical-references/wallet-contracts/01-why.mdx#examples","353":"docs/pages/solutions/technical-references/wallet-contracts/02-universal-deployer.mdx#universal-deployer","354":"docs/pages/solutions/technical-references/wallet-contracts/02-universal-deployer.mdx#deploy-process-v2","355":"docs/pages/solutions/technical-references/wallet-contracts/02-universal-deployer.mdx#1---deploy-singleton-factory","356":"docs/pages/solutions/technical-references/wallet-contracts/02-universal-deployer.mdx#2---deploy-wallet-context","357":"docs/pages/solutions/technical-references/wallet-contracts/02-universal-deployer.mdx#deploy-process-v1","358":"docs/pages/solutions/technical-references/wallet-contracts/02-universal-deployer.mdx#1---deploy-nanouniversaldeployer","359":"docs/pages/solutions/technical-references/wallet-contracts/02-universal-deployer.mdx#2---deploy-universaldeployer2","360":"docs/pages/solutions/technical-references/wallet-contracts/02-universal-deployer.mdx#3---deploy-wallet-context","361":"docs/pages/solutions/technical-references/wallet-contracts/03-wallet-factory.mdx#wallet-factory","362":"docs/pages/solutions/technical-references/wallet-contracts/03-wallet-factory.mdx#factory-api","363":"docs/pages/solutions/technical-references/wallet-contracts/03-wallet-factory.mdx#deploy","364":"docs/pages/solutions/technical-references/wallet-contracts/03-wallet-factory.mdx#parameters","365":"docs/pages/solutions/technical-references/wallet-contracts/03-wallet-factory.mdx#return-values","366":"docs/pages/solutions/technical-references/wallet-contracts/03-wallet-factory.mdx#counter-factual-addresses","367":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#wallet-configuration","368":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#configuration-layout","369":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#signer-layout","370":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#example","371":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#the-valid-combinations-of-signers-are","372":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#configuration-hash---imagehash","373":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#compute-image-hash","374":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#todo-implement-table-from-v1-docs","375":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#initial-wallet-configuration","376":"docs/pages/solutions/technical-references/wallet-contracts/04-wallet-configuration.mdx#compute-wallet-address","377":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#modules--wallet-update","378":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#wallet-implementation","379":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#_updateconfiguration","380":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#parameters","381":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#reading-current-implementation","382":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#wallet-configuration-validation","383":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#_isvalidimage","384":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#parameters-1","385":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#return-values","386":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#mainmoduleupgradeable","387":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#updateimagehash","388":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#parameters-2","389":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#first-configuration-update","390":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#delegatecall-false","391":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#revertonerror-true","392":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#to-wallet","393":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#value-ethersconstantszero","394":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#gaslimit-ethersconstantszero","395":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#subsequent-configuration-updates","396":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#retrieving-the-current-configuration","397":"docs/pages/solutions/technical-references/wallet-contracts/05-modules-and-updates.mdx#retrieving-the-wallet-configuration","398":"docs/pages/solutions/technical-references/wallet-contracts/06-main-module-upgradeable.mdx#mainmoduleupgradeable--configuration-migration","399":"docs/pages/solutions/technical-references/wallet-contracts/07-transaction-encoding.mdx#transaction-encoding","400":"docs/pages/solutions/technical-references/wallet-contracts/08-signature-encoding.mdx#signature-encoding","401":"docs/pages/solutions/technical-references/wallet-contracts/08-signature-encoding.mdx#erc-191-ethereum-signed-data","402":"docs/pages/solutions/technical-references/wallet-contracts/08-signature-encoding.mdx#erc-712-structured-data-signatures","403":"docs/pages/solutions/technical-references/wallet-contracts/08-signature-encoding.mdx#verification","404":"docs/pages/solutions/technical-references/wallet-contracts/09-nested-transaction-batching.mdx#nested-transaction-batching","405":"docs/pages/solutions/technical-references/wallet-contracts/10-guest-module.mdx#guestmodule-and-on-demand-deployment","406":"docs/pages/solutions/technical-references/wallet-contracts/11-wallet-context.mdx#wallet-context","407":"docs/pages/solutions/technical-references/wallet-contracts/12-contract-audits.mdx#contract-audits","408":"docs/pages/solutions/technical-references/wallet-contracts/12-contract-audits.mdx#quantstamp","409":"docs/pages/solutions/technical-references/wallet-contracts/12-contract-audits.mdx#consensys-diligence","410":"docs/pages/solutions/technical-references/wallet-contracts/12-contract-audits.mdx#zellic","411":"docs/pages/solutions/wallets/embedded-wallet/01-overview.mdx#sequence-embedded-wallet","412":"docs/pages/solutions/wallets/embedded-wallet/01-overview.mdx#architecture-overview","413":"docs/pages/solutions/wallets/embedded-wallet/01-overview.mdx#signer-1-sequence-auth","414":"docs/pages/solutions/wallets/embedded-wallet/01-overview.mdx#signer-2-sequence-guard","415":"docs/pages/solutions/wallets/embedded-wallet/01-overview.mdx#threat-model","416":"docs/pages/solutions/wallets/embedded-wallet/02-quickstart.mdx#quickstart","417":"docs/pages/solutions/wallets/embedded-wallet/02-quickstart.mdx#try-a-demo","418":"docs/pages/solutions/wallets/embedded-wallet/02-quickstart.mdx#template","419":"docs/pages/solutions/wallets/embedded-wallet/02-quickstart.mdx#getting-started","420":"docs/pages/solutions/wallets/embedded-wallet/02-quickstart.mdx#sdk-installation","421":"docs/pages/solutions/wallets/embedded-wallet/02-quickstart.mdx#project-setup","422":"docs/pages/solutions/wallets/embedded-wallet/02-quickstart.mdx#library-setup","423":"docs/pages/solutions/wallets/embedded-wallet/03-manage-sessions.mdx#session-management","424":"docs/pages/solutions/wallets/embedded-wallet/03-manage-sessions.mdx#sign-in--sign-up","425":"docs/pages/solutions/wallets/embedded-wallet/03-manage-sessions.mdx#email-sign-in--sign-up","426":"docs/pages/solutions/wallets/embedded-wallet/03-manage-sessions.mdx#google--apple-auth","427":"docs/pages/solutions/wallets/embedded-wallet/03-manage-sessions.mdx#list-sessions","428":"docs/pages/solutions/wallets/embedded-wallet/03-manage-sessions.mdx#close-session","429":"docs/pages/solutions/wallets/embedded-wallet/05-validation.mdx#validation","430":"docs/pages/solutions/wallets/embedded-wallet/05-validation.mdx#email-login-one-time-code","431":"docs/pages/solutions/wallets/embedded-wallet/05-validation.mdx#social-login","432":"docs/pages/solutions/wallets/embedded-wallet/05-validation.mdx#validation-status","433":"docs/pages/solutions/wallets/embedded-wallet/05-validation.mdx#trigger-session-validation","434":"docs/pages/solutions/wallets/embedded-wallet/05-validation.mdx#onvalidationrequired-callback","435":"docs/pages/solutions/wallets/embedded-wallet/05-validation.mdx#listen-for-session-validations","436":"docs/pages/solutions/wallets/embedded-wallet/05-validation.mdx#automatic-session-validation","437":"docs/pages/solutions/wallets/embedded-wallet/06-transaction-receipts.mdx#transaction-receipts","438":"docs/pages/solutions/wallets/embedded-wallet/06-transaction-receipts.mdx#successful-transaction-response","439":"docs/pages/solutions/wallets/embedded-wallet/06-transaction-receipts.mdx#failed-transaction-response","440":"docs/pages/solutions/wallets/universal-wallet/02-quickstart.mdx#quickstart","441":"docs/pages/solutions/wallets/universal-wallet/02-quickstart.mdx#try-a-demo","442":"docs/pages/solutions/wallets/universal-wallet/02-quickstart.mdx#template","443":"docs/pages/solutions/wallets/universal-wallet/02-quickstart.mdx#install","444":"docs/pages/solutions/wallets/universal-wallet/02-quickstart.mdx#cdn-distribution-as-native-js","445":"docs/pages/solutions/wallets/universal-wallet/04-sequence-kit.mdx#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications","446":"docs/pages/solutions/wallets/universal-wallet/04-sequence-kit.mdx#key-features","447":"docs/pages/solutions/wallets/universal-wallet/04-sequence-kit.mdx#next-steps","448":"docs/pages/solutions/wallets/universal-wallet/05-platforms.mdx#platforms","449":"docs/pages/solutions/wallets/universal-wallet/05-platforms.mdx#web-wallet","450":"docs/pages/solutions/wallets/universal-wallet/05-platforms.mdx#mobile-wallet","451":"docs/pages/solutions/wallets/universal-wallet/05-platforms.mdx#browser-extension-wallet","452":"docs/pages/solutions/wallets/universal-wallet/06-fiat-on-ramps.mdx#fiat-on-ramps","453":"docs/pages/solutions/wallets/universal-wallet/07-key-management.mdx#key-management","454":"docs/pages/solutions/wallets/universal-wallet/07-key-management.mdx#social-login-wallets","455":"docs/pages/solutions/wallets/universal-wallet/07-key-management.mdx#session-keys","456":"docs/pages/solutions/wallets/universal-wallet/07-key-management.mdx#guard-key","457":"docs/pages/solutions/wallets/universal-wallet/07-key-management.mdx#torus-key","458":"docs/pages/solutions/wallets/universal-wallet/03-guides/02-auth-address.mdx#authenticate-users-with-message-signature","459":"docs/pages/solutions/wallets/universal-wallet/03-guides/02-auth-address.mdx#ask-for-the-wallet-address","460":"docs/pages/solutions/wallets/universal-wallet/03-guides/02-auth-address.mdx#authenticate-wallet","461":"docs/pages/solutions/wallets/universal-wallet/03-guides/02-auth-address.mdx#authenticate-wallet-server-side","462":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#no-wallet-confirmation-signatures","463":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#session-keys","464":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#using-session-keys-with-sequence","465":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#1-initialize-sequence-wallet-and-connect","466":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#2-generate-a-session-key","467":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#3-sign-authorization-message","468":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#4-verify-authorization-signature","469":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#5-sign-message-with-session-key","470":"docs/pages/solutions/wallets/universal-wallet/03-guides/04-session-keys.mdx#6-verify-session-signature","471":"docs/pages/solutions/wallets/universal-wallet/03-guides/05-send-transaction.mdx#sending-transactions","472":"docs/pages/solutions/wallets/universal-wallet/03-guides/06-send-erc20.mdx#sending-erc-20-tokens","473":"docs/pages/solutions/wallets/universal-wallet/03-guides/07-send-erc721.mdx#sending-erc-721-nft-tokens","474":"docs/pages/solutions/wallets/universal-wallet/03-guides/08-send-erc1155.mdx#sending-erc-1155-collectible-tokens","475":"docs/pages/solutions/wallets/universal-wallet/03-guides/09-send-batch-transactions.mdx#sending-a-batch-of-transactions","476":"docs/pages/solutions/wallets/universal-wallet/03-guides/10-building-backends.mdx#building-backends-with-sequence","477":"docs/pages/solutions/wallets/universal-wallet/03-guides/10-building-backends.mdx#nodejs","478":"docs/pages/solutions/wallets/universal-wallet/03-guides/10-building-backends.mdx#go","479":"docs/pages/solutions/wallets/universal-wallet/03-guides/10-building-backends.mdx#ethkit","480":"docs/pages/solutions/wallets/universal-wallet/03-guides/10-building-backends.mdx#support-for-other-backend-languages"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,1],"1":[1,1,2],"2":[1,1,1],"3":[1,1,2],"4":[6,1,1],"5":[3,1,1],"6":[6,1,1],"7":[3,1,1],"8":[4,1,1],"9":[4,1,1],"10":[4,1,1],"11":[5,1,1],"12":[5,1,1],"13":[4,1,1],"14":[4,1,1],"15":[4,1,1],"16":[4,1,1],"17":[5,1,1],"18":[5,1,1],"19":[4,1,1],"20":[5,1,1],"21":[7,1,1],"22":[5,1,1],"23":[4,1,1],"24":[2,1,1],"25":[4,1,37],"26":[2,4,225],"27":[8,4,62],"28":[3,11,1],"29":[3,11,1],"30":[4,11,1],"31":[4,11,1],"32":[5,11,131],"33":[2,4,120],"34":[7,1,114],"35":[11,7,123],"36":[2,18,37],"37":[12,7,171],"38":[2,20,25],"39":[2,20,12],"40":[7,7,212],"41":[4,15,47],"42":[6,15,39],"43":[3,15,67],"44":[5,15,94],"45":[6,7,175],"46":[1,1,1],"47":[3,1,11],"48":[1,1,11],"49":[2,1,1],"50":[2,3,32],"51":[2,3,41],"52":[2,3,62],"53":[6,1,1],"54":[3,1,1],"55":[1,1,33],"56":[1,1,36],"57":[2,1,40],"58":[2,2,78],"59":[2,1,33],"60":[5,1,23],"61":[4,5,48],"62":[5,1,83],"63":[6,1,72],"64":[4,1,46],"65":[5,1,26],"66":[2,1,18],"67":[2,1,38],"68":[2,1,1],"69":[1,2,40],"70":[1,2,22],"71":[6,2,12],"72":[2,8,12],"73":[2,8,12],"74":[2,8,14],"75":[2,8,48],"76":[2,8,48],"77":[1,2,39],"78":[1,1,11],"79":[1,1,46],"80":[4,1,30],"81":[4,1,12],"82":[5,5,39],"83":[5,5,22],"84":[5,1,30],"85":[4,5,89],"86":[3,1,85],"87":[4,1,34],"88":[1,1,71],"89":[1,1,1],"90":[3,1,11],"91":[1,1,9],"92":[4,1,87],"93":[5,6,32],"94":[1,1,1],"95":[2,1,27],"96":[2,1,48],"97":[3,1,5],"98":[3,1,65],"99":[2,1,69],"100":[3,2,76],"101":[2,5,32],"102":[2,5,45],"103":[2,5,102],"104":[1,1,67],"105":[1,1,48],"106":[1,1,1],"107":[3,1,95],"108":[1,4,145],"109":[1,1,137],"110":[1,1,102],"111":[1,1,112],"112":[4,1,46],"113":[4,1,70],"114":[1,5,41],"115":[1,5,43],"116":[1,5,5],"117":[1,5,155],"118":[1,5,3],"119":[3,1,91],"120":[3,1,104],"121":[1,3,103],"122":[1,3,87],"123":[3,4,94],"124":[1,3,53],"125":[3,4,92],"126":[1,3,76],"127":[3,4,93],"128":[1,3,190],"129":[2,3,119],"130":[3,1,54],"131":[2,1,76],"132":[2,1,139],"133":[2,1,93],"134":[3,2,12],"135":[2,2,25],"136":[3,3,118],"137":[5,3,46],"138":[2,1,37],"139":[4,2,1],"140":[6,6,14],"141":[7,6,50],"142":[7,6,43],"143":[3,2,27],"144":[6,5,39],"145":[6,5,18],"146":[3,2,35],"147":[2,1,145],"148":[5,2,205],"149":[5,2,26],"150":[1,6,22],"151":[1,6,8],"152":[1,6,23],"153":[1,6,20],"154":[1,6,19],"155":[1,6,23],"156":[1,6,17],"157":[1,6,20],"158":[1,6,26],"159":[2,6,21],"160":[2,6,38],"161":[2,6,36],"162":[2,6,29],"163":[2,6,28],"164":[2,6,27],"165":[2,6,31],"166":[2,6,27],"167":[2,6,40],"168":[8,2,25],"169":[11,2,5],"170":[3,2,106],"171":[5,1,1],"172":[5,5,17],"173":[2,5,121],"174":[4,5,139],"175":[7,1,1],"176":[4,1,28],"177":[2,1,95],"178":[5,1,1],"179":[6,6,17],"180":[5,6,33],"181":[4,6,28],"182":[4,6,35],"183":[6,6,25],"184":[4,6,49],"185":[2,1,42],"186":[4,1,72],"187":[5,1,85],"188":[5,1,93],"189":[5,1,82],"190":[4,1,1],"191":[1,5,22],"192":[1,5,33],"193":[1,5,36],"194":[5,5,72],"195":[2,1,105],"196":[9,1,40],"197":[2,9,78],"198":[2,1,33],"199":[2,1,34],"200":[1,2,32],"201":[1,2,38],"202":[1,2,1],"203":[1,3,18],"204":[4,3,29],"205":[4,3,27],"206":[11,2,37],"207":[2,2,51],"208":[1,2,34],"209":[2,1,38],"210":[1,2,17],"211":[1,2,38],"212":[1,2,1],"213":[1,3,18],"214":[3,3,28],"215":[3,3,27],"216":[2,2,54],"217":[11,2,37],"218":[1,2,23],"219":[3,1,39],"220":[1,3,17],"221":[1,3,21],"222":[1,3,1],"223":[3,4,12],"224":[3,4,20],"225":[1,3,14],"226":[4,1,26],"227":[1,4,16],"228":[1,4,1],"229":[1,5,31],"230":[2,5,33],"231":[1,4,1],"232":[1,5,15],"233":[3,5,16],"234":[1,4,11],"235":[2,1,33],"236":[1,2,23],"237":[1,2,18],"238":[1,1,1],"239":[14,2,75],"240":[21,2,88],"241":[21,2,159],"242":[2,1,90],"243":[2,2,24],"244":[1,1,21],"245":[2,1,29],"246":[2,1,41],"247":[1,1,15],"248":[1,2,9],"249":[1,2,17],"250":[1,2,20],"251":[1,2,62],"252":[1,2,64],"253":[1,2,48],"254":[1,1,64],"255":[1,1,50],"256":[1,2,73],"257":[1,2,31],"258":[1,2,17],"259":[1,2,18],"260":[1,2,39],"261":[1,2,19],"262":[1,2,37],"263":[1,2,18],"264":[1,2,35],"265":[1,2,20],"266":[1,2,38],"267":[1,2,19],"268":[1,2,14],"269":[1,2,17],"270":[1,2,14],"271":[1,2,20],"272":[1,2,20],"273":[1,1,51],"274":[1,1,79],"275":[4,1,107],"276":[4,1,64],"277":[2,1,69],"278":[2,1,24],"279":[1,1,107],"280":[2,1,47],"281":[7,1,30],"282":[7,7,11],"283":[4,14,12],"284":[9,7,1],"285":[3,17,40],"286":[5,17,30],"287":[6,7,1],"288":[4,13,20],"289":[6,13,46],"290":[4,13,14],"291":[5,7,30],"292":[2,13,40],"293":[2,13,58],"294":[5,7,28],"295":[4,13,36],"296":[10,1,1],"297":[1,10,42],"298":[6,12,34],"299":[7,12,51],"300":[8,11,47],"301":[8,10,35],"302":[6,10,74],"303":[8,10,68],"304":[7,10,44],"305":[6,10,53],"306":[7,1,1],"307":[1,7,37],"308":[4,9,64],"309":[3,9,56],"310":[8,8,47],"311":[9,7,26],"312":[6,7,57],"313":[8,7,34],"314":[7,7,55],"315":[6,7,22],"316":[7,1,1],"317":[1,7,36],"318":[7,9,49],"319":[4,9,59],"320":[8,8,47],"321":[8,7,25],"322":[6,7,57],"323":[8,7,33],"324":[7,7,54],"325":[6,7,13],"326":[8,1,1],"327":[1,8,25],"328":[8,8,61],"329":[7,8,54],"330":[6,8,31],"331":[6,8,25],"332":[7,8,25],"333":[5,8,20],"334":[6,8,17],"335":[5,8,58],"336":[7,8,66],"337":[4,8,65],"338":[5,8,28],"339":[4,8,62],"340":[1,1,38],"341":[1,1,1],"342":[3,1,12],"343":[1,1,11],"344":[2,1,20],"345":[3,1,63],"346":[5,1,35],"347":[3,5,20],"348":[1,7,11],"349":[2,7,5],"350":[3,5,46],"351":[1,6,23],"352":[1,5,5],"353":[2,1,84],"354":[3,2,42],"355":[4,5,70],"356":[4,5,32],"357":[3,2,61],"358":[3,5,52],"359":[3,5,38],"360":[4,5,25],"361":[2,1,25],"362":[2,2,1],"363":[1,3,28],"364":[2,4,38],"365":[3,4,43],"366":[3,2,71],"367":[2,1,18],"368":[2,2,26],"369":[2,3,26],"370":[1,4,21],"371":[7,4,31],"372":[3,3,51],"373":[3,5,1],"374":[6,2,1],"375":[3,2,23],"376":[3,7,66],"377":[4,1,40],"378":[2,4,25],"379":[2,6,44],"380":[2,7,42],"381":[3,6,53],"382":[3,4,58],"383":[2,7,42],"384":[2,8,9],"385":[3,8,12],"386":[1,4,18],"387":[1,5,20],"388":[2,6,88],"389":[3,4,82],"390":[2,7,31],"391":[2,7,32],"392":[2,7,19],"393":[4,7,20],"394":[4,7,73],"395":[3,6,37],"396":[4,6,35],"397":[4,9,49],"398":[4,1,1],"399":[2,1,1],"400":[2,1,17],"401":[5,2,72],"402":[5,2,96],"403":[1,2,87],"404":[3,1,1],"405":[5,1,1],"406":[2,1,20],"407":[2,1,30],"408":[1,2,7],"409":[2,2,3],"410":[1,2,3],"411":[3,1,57],"412":[2,3,38],"413":[4,5,111],"414":[4,5,116],"415":[2,3,86],"416":[1,1,1],"417":[3,1,11],"418":[1,1,11],"419":[2,1,1],"420":[2,3,32],"421":[2,3,41],"422":[2,3,62],"423":[2,1,40],"424":[3,2,102],"425":[4,5,107],"426":[3,5,173],"427":[2,2,95],"428":[2,2,52],"429":[1,1,17],"430":[6,2,29],"431":[2,2,68],"432":[2,1,34],"433":[3,2,48],"434":[2,5,60],"435":[4,2,35],"436":[3,1,51],"437":[2,1,21],"438":[3,2,125],"439":[3,2,134],"440":[1,1,1],"441":[3,1,11],"442":[1,1,9],"443":[1,1,68],"444":[5,3,32],"445":[9,1,40],"446":[2,9,78],"447":[2,1,33],"448":[1,1,1],"449":[2,1,27],"450":[2,1,48],"451":[3,1,5],"452":[3,1,65],"453":[2,1,69],"454":[3,2,76],"455":[2,5,32],"456":[2,5,45],"457":[2,5,102],"458":[5,1,1],"459":[5,5,17],"460":[2,5,121],"461":[4,5,139],"462":[4,1,28],"463":[2,1,95],"464":[5,1,1],"465":[6,6,17],"466":[5,6,33],"467":[4,6,28],"468":[4,6,35],"469":[6,6,25],"470":[4,6,49],"471":[2,1,42],"472":[4,1,72],"473":[5,1,85],"474":[5,1,93],"475":[5,1,82],"476":[4,1,1],"477":[1,5,22],"478":[1,5,33],"479":[1,5,36],"480":[5,5,72]},"averageFieldLength":[3.27027027027027,3.833679833679833,41.692307692307665],"storedFields":{"0":{"href":"/builder#builder-intro","html":"</header>","isPage":true,"text":"","title":"builder intro","titles":[]},"1":{"href":"/stack#stack","html":"</header>\n<p>Intro ..............</p>","isPage":true,"text":"\nIntro ..............","title":"Stack","titles":[]},"2":{"href":"/support#support","html":"</header>\n<p>....</p>","isPage":true,"text":"\n....","title":"Support","titles":[]},"3":{"href":"/wallet#wallet","html":"</header>\n<p>sadfasdf</p>","isPage":true,"text":"\nsadfasdf","title":"Wallet","titles":[]},"4":{"href":"/guides/discord#deploy-an-in-game-collectibles-contract","html":"\n","isPage":true,"text":"\n","title":"Deploy an in-game collectibles contract","titles":[null]},"5":{"href":"/guides/discord#query-contract-details","html":"\n","isPage":false,"text":"\n","title":"Query contract details","titles":[null]},"6":{"href":"/guides/lootbox#deploy-an-in-game-collectibles-contract","html":"\n","isPage":true,"text":"\n","title":"Deploy an in-game collectibles contract","titles":[null]},"7":{"href":"/guides/lootbox#query-contract-details","html":"\n","isPage":false,"text":"\n","title":"Query contract details","titles":[null]},"8":{"href":"/guides/unity-guide#integrate-sequencekit-with-waas","html":"\n","isPage":true,"text":"\n","title":"Integrate SequenceKit with WaaS","titles":[null]},"9":{"href":"/guides/unity-guide#deploy-a-collectibles-contract","html":"\n","isPage":false,"text":"\n","title":"Deploy a collectibles contract","titles":[null]},"10":{"href":"/guides/unity-guide#deploy-a-remote-minter","html":"\n","isPage":false,"text":"\n","title":"Deploy a remote minter","titles":[null]},"11":{"href":"/guides/unity-guide#mint-in-game-achievement-tokens","html":"\n","isPage":false,"text":"\n","title":"Mint in-game achievement tokens","titles":[null]},"12":{"href":"/guides/unity-guide#burn-in-game-achievement-tokens","html":"\n","isPage":false,"text":"\n","title":"Burn in-game achievement tokens","titles":[null]},"13":{"href":"/guides/unity-guide#integrate-an-embedded-marketplace","html":"\n","isPage":false,"text":"\n","title":"Integrate an embedded marketplace","titles":[null]},"14":{"href":"/guides/webgl-guide#integrate-sequencekit-with-waas","html":"\n","isPage":true,"text":"\n","title":"Integrate SequenceKit with WaaS","titles":[null]},"15":{"href":"/guides/webgl-guide#deploy-a-collectibles-contract","html":"\n","isPage":false,"text":"\n","title":"Deploy a collectibles contract","titles":[null]},"16":{"href":"/guides/webgl-guide#deploy-a-remote-minter","html":"\n","isPage":false,"text":"\n","title":"Deploy a remote minter","titles":[null]},"17":{"href":"/guides/webgl-guide#mint-in-game-achievement-tokens","html":"\n","isPage":false,"text":"\n","title":"Mint in-game achievement tokens","titles":[null]},"18":{"href":"/guides/webgl-guide#burn-in-game-achievement-tokens","html":"\n","isPage":false,"text":"\n","title":"Burn in-game achievement tokens","titles":[null]},"19":{"href":"/guides/webgl-guide#integrate-an-embedded-marketplace","html":"\n","isPage":false,"text":"\n","title":"Integrate an embedded marketplace","titles":[null]},"20":{"href":"/solutions/minter#mint-tokens-using-builder-manually","html":"\n","isPage":true,"text":"\n","title":"Mint tokens using Builder manually","titles":[null]},"21":{"href":"/solutions/minter#deploy-a-serverless-minter-on-cloudflare-workers","html":"\n","isPage":false,"text":"\n","title":"Deploy a serverless minter on Cloudflare Workers","titles":[null]},"22":{"href":"/solutions/nft-checkout#integrate-nft-checkout-on-web","html":"\n","isPage":true,"text":"\n","title":"Integrate NFT Checkout on web","titles":[null]},"23":{"href":"/solutions/onramps#integrate-onramp-on-web","html":"\n","isPage":true,"text":"\n","title":"Integrate onramp on web","titles":[null]},"24":{"href":"/support/token-directory#token-directory","html":"</header>\n<p>....</p>","isPage":true,"text":"\n....","title":"Token Directory","titles":[]},"25":{"href":"/guides/templates/02-building-relaying-server#building-a-relaying-server","html":"</header>\n<p>With Sequence, you can create a smart contract wallet your server can use to dispatch transactions for your users\nwithout you having to be worried about transaction speed, throughput and re-orgs.</p>\n<p>:::info Sequentual Transactions\nBy default, Sequence transactions will be executed sequentially.\n:::</p>\n","isPage":true,"text":"\nWith Sequence, you can create a smart contract wallet your server can use to dispatch transactions for your users\nwithout you having to be worried about transaction speed, throughput and re-orgs.\n:::info Sequentual Transactions\nBy default, Sequence transactions will be executed sequentially.\n:::\n","title":"Building a Relaying Server","titles":[]},"26":{"href":"/guides/templates/02-building-relaying-server#nodejs-server","html":"\n<p>Your server will need an EOA wallet that will be able to sign messages. It will be the owner of your server-side Sequence\nwallet which will be used to dispatch transactions.</p>\n<p>This Sequence wallet should have the correct ownership at your contract level, not the EOA.\nAlso, the Sequence wallet should be sufficiently funded in order to pay fees needed by the relayer to dispatch your transactions.</p>\n<p>Using this approach - versus the next section (with sponsoring) - includes the ability to pay for gas in any available currency by our relayer (e.g. &#x27;MATIC&#x27;, &#x27;DAI&#x27;, &#x27;USDC&#x27;, &#x27;WETH&#x27;).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Session } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create your server EOA</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> walletEOA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(serverPrivateKey, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Open a Sequence session, this will find or create</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// a Sequence wallet controlled by your server EOA</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> session</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Session.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">singleSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signer: walletEOA,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;&lt;access_key&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the Sequence wallet address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(session.account.address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get a signer for a specific network</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - 1:     Ethereum Mainnet</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - 137:   Polygon Mainnet</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - 42161: Arbitrum One</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// See https://chainid.network/ for more</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Craft your transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [senderAddress, recipientAddress, id]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send the transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txn)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if transaction was successful </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (txnReceipt.status </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Unexpected status: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txnReceipt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">status</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You can also enforce a specific way to pay for gas fees, or the openning of a specific Sequence wallet.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Session } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create your server EOA</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> walletEOA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(serverPrivateKey, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Open a Sequence session, this will find or create</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// a Sequence wallet controlled by your server EOA</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> session</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Session.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">singleSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signer: walletEOA,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;&lt;access_key&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // OPTIONAL: Multiple wallets could be found for the same EOA</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // to enforce a specific wallet you can use the following callback</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  selectWallet: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">wallets</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> found</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallets.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">find</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">w</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> w </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> EXPECTED_WALLET_ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">found) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">throw</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;wallet not found&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Returning the wallet address will make the session use it</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // returning undefined will make the session create a new wallet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // OPTIONAL: You can also enforce a specific way to pay for gas fees</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // if not provided the sdk will select one for you</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  selectFee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    _txs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FeeOption</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Find the option to pay with native tokens</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> found</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> options.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">find</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">o</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">o.token.contractAddress)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">found) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">throw</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;fee option not found&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize the contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> usdc</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;0x2791bca1f2de4661ed88a30c99a7a9449aa84174&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// USDC on Polygon</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  ERC_20_ABI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send the transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> usdc.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recipient, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if transaction was successful </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (txnReceipt.status </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Unexpected status: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txnReceipt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">status</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>:::caution Triggers migration</p>\n<p>Openning a session may trigger a migration of your Sequence wallet to a new version, this could be <code>v1</code> to <code>v2</code> or <code>v2</code> to future versions.</p>\n<p>Migration is a one-way process, once your wallet is migrated it cannot be reverted to a previous version.</p>\n<p>To catch any unwanted migration, you can use the <code>onMigration</code> callback.\n:::</p>\n","isPage":false,"text":"\nYour server will need an EOA wallet that will be able to sign messages. It will be the owner of your server-side Sequence\nwallet which will be used to dispatch transactions.\nThis Sequence wallet should have the correct ownership at your contract level, not the EOA.\nAlso, the Sequence wallet should be sufficiently funded in order to pay fees needed by the relayer to dispatch your transactions.\nUsing this approach - versus the next section (with sponsoring) - includes the ability to pay for gas in any available currency by our relayer (e.g. &#x27;MATIC&#x27;, &#x27;DAI&#x27;, &#x27;USDC&#x27;, &#x27;WETH&#x27;).\nimport { Session } from &#x27;@0xsequence/auth&#x27;\n \n// Create your server EOA\nconst walletEOA = new ethers.Wallet(serverPrivateKey, provider)\n \n// Open a Sequence session, this will find or create\n// a Sequence wallet controlled by your server EOA\nconst session = await Session.singleSigner({\n  signer: walletEOA,\n  projectAccessKey: &#x27;&lt;access_key&gt;&#x27;\n})\n \n// Get the Sequence wallet address\nconsole.log(session.account.address)\n \n// Get a signer for a specific network\n// - 1:     Ethereum Mainnet\n// - 137:   Polygon Mainnet\n// - 42161: Arbitrum One\n// See https://chainid.network/ for more\nconst signer = session.account.getSigner(137)\n \n// Craft your transaction\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \nconst data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [senderAddress, recipientAddress, id]\n)\n \nconst txn = {\n  to: erc721TokenAddress,\n  data\n}\n \n// Send the transaction\nconst txnResponse = await signer.sendTransaction(txn)\n \n// Check if transaction was successful \nif (txnReceipt.status != 1) {\n  console.log(`Unexpected status: ${txnReceipt.status}`)\n}\nYou can also enforce a specific way to pay for gas fees, or the openning of a specific Sequence wallet.\nimport { Session } from &#x27;@0xsequence/auth&#x27;\n \n// Create your server EOA\nconst walletEOA = new ethers.Wallet(serverPrivateKey, provider)\n \n// Open a Sequence session, this will find or create\n// a Sequence wallet controlled by your server EOA\nconst session = await Session.singleSigner({\n  signer: walletEOA,\n  projectAccessKey: &#x27;&lt;access_key&gt;&#x27;\n  // OPTIONAL: Multiple wallets could be found for the same EOA\n  // to enforce a specific wallet you can use the following callback\n  selectWallet: async (wallets: string[]) =&gt; {\n    const found = wallets.find(w =&gt; w === EXPECTED_WALLET_ADDRESS)\n    if (!found) throw Error(&#x27;wallet not found&#x27;)\n    // Returning the wallet address will make the session use it\n    // returning undefined will make the session create a new wallet\n    return found\n  }\n})\n \nconst signer = session.account.getSigner(137, {\n  // OPTIONAL: You can also enforce a specific way to pay for gas fees\n  // if not provided the sdk will select one for you\n  selectFee: async (\n    _txs: any,\n    options: FeeOption[]\n  ) =&gt; {\n    // Find the option to pay with native tokens\n    const found = options.find(o =&gt; !o.token.contractAddress)\n    if (!found) throw Error(&#x27;fee option not found&#x27;)\n    return found\n  }\n})\n \n// Initialize the contract\nconst usdc = new ethers.Contract(\n  &#x27;0x2791bca1f2de4661ed88a30c99a7a9449aa84174&#x27;, // USDC on Polygon\n  ERC_20_ABI,\n  signer\n)\n \n// Send the transaction\nconst txnResponse = await usdc.transfer(recipient, 1)\n \n// Check if transaction was successful \nif (txnReceipt.status != 1) {\n  console.log(`Unexpected status: ${txnReceipt.status}`)\n}\n:::caution Triggers migration\nOpenning a session may trigger a migration of your Sequence wallet to a new version, this could be v1 to v2 or v2 to future versions.\nMigration is a one-way process, once your wallet is migrated it cannot be reverted to a previous version.\nTo catch any unwanted migration, you can use the onMigration callback.\n:::\n","title":"Nodejs Server","titles":["Building a Relaying Server"]},"27":{"href":"/guides/templates/02-building-relaying-server#nodejs-server-with-gas-sponsoring-using-sequence-builder","html":"\n<p>If you want to have your transactions sponsored &amp; paid for with a credit card, you can follow the below steps before beginning your code, at the following link: <a href=\"https://sequence.build/\">https://sequence.build/</a></p>\n<p>By sponsoring your transaction, you can now just send the transaction without a fee object and not have to fund the smart contract wallet before relaying any transactions.</p>\n<p>:::info Already Deployed Contract\nFor this example, we assume you have a smart contract deployed with a contract address to include in the last step.\n:::</p>\n","isPage":false,"text":"\nIf you want to have your transactions sponsored &amp; paid for with a credit card, you can follow the below steps before beginning your code, at the following link: https://sequence.build/\nBy sponsoring your transaction, you can now just send the transaction without a fee object and not have to fund the smart contract wallet before relaying any transactions.\n:::info Already Deployed Contract\nFor this example, we assume you have a smart contract deployed with a contract address to include in the last step.\n:::\n","title":"Nodejs Server with Gas Sponsoring using Sequence Builder","titles":["Building a Relaying Server"]},"28":{"href":"/guides/templates/02-building-relaying-server#a-create-dapp","html":"\n<p><img src=\"/img/builder/builder_create_dapp.png\" alt=\"Sequence builder create app\"/></p>\n","isPage":false,"text":"\n\n","title":"A. Create Dapp","titles":["Building a Relaying Server","Nodejs Server with Gas Sponsoring using Sequence Builder"]},"29":{"href":"/guides/templates/02-building-relaying-server#b-new-dapp","html":"\n<p><img src=\"/img/builder/builder_new_dapp.png\" alt=\"Sequence builder new dapp\"/></p>\n","isPage":false,"text":"\n\n","title":"B. New Dapp","titles":["Building a Relaying Server","Nodejs Server with Gas Sponsoring using Sequence Builder"]},"30":{"href":"/guides/templates/02-building-relaying-server#c1-gas-tank","html":"\n<p><img src=\"/img/builder/builder_gas_tank.png\" alt=\"Sequence builder gas tank\"/></p>\n","isPage":false,"text":"\n\n","title":"C.1 Gas Tank","titles":["Building a Relaying Server","Nodejs Server with Gas Sponsoring using Sequence Builder"]},"31":{"href":"/guides/templates/02-building-relaying-server#c2-add-gas","html":"\n<p><img src=\"/img/builder/builder_add_gas.png\" alt=\"Sequence builder add gas\"/></p>\n","isPage":false,"text":"\n\n","title":"C.2 Add Gas","titles":["Building a Relaying Server","Nodejs Server with Gas Sponsoring using Sequence Builder"]},"32":{"href":"/guides/templates/02-building-relaying-server#c3-add-sponsored-address","html":"\n<p><img src=\"/img/builder/builder_add_sponsored_address.png\" alt=\"Sequence builder add sponsored address\"/></p>\n<p>The following is example code that implements a relayed transaction, same as the above example (i.e. Nodejs Server) but without fees, taken care of by the Sequence Builder.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Session } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create your server EOA</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> walletEOA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(serverPrivateKey, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Open a Sequence session, this will find or create</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// a Sequence wallet controlled by your server EOA</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> session</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Session.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">singleSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signer: walletEOA,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;&lt;access_key&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the Sequence wallet address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(session.account.address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get a signer for a specific network</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - 1:     Ethereum Mainnet</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - 137:   Polygon Mainnet</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - 42161: Arbitrum One</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// See https://chainid.network/ for more</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // OPTIONAL: This ensures that the transaction is paid for by the gas tank</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // but if not provided, the gas tank will be used anyway</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  selectFee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    _txs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    _options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FeeOption</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Craft your transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [senderAddress, recipientAddress, id]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send the transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txn)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if transaction was successful </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (txnReceipt.status </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Unexpected status: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txnReceipt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">status</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n\nThe following is example code that implements a relayed transaction, same as the above example (i.e. Nodejs Server) but without fees, taken care of by the Sequence Builder.\nimport { Session } from &#x27;@0xsequence/auth&#x27;\n \n// Create your server EOA\nconst walletEOA = new ethers.Wallet(serverPrivateKey, provider)\n \n// Open a Sequence session, this will find or create\n// a Sequence wallet controlled by your server EOA\nconst session = await Session.singleSigner({\n  signer: walletEOA,\n  projectAccessKey: &#x27;&lt;access_key&gt;&#x27;\n})\n \n// Get the Sequence wallet address\nconsole.log(session.account.address)\n \n// Get a signer for a specific network\n// - 1:     Ethereum Mainnet\n// - 137:   Polygon Mainnet\n// - 42161: Arbitrum One\n// See https://chainid.network/ for more\nconst signer = session.account.getSigner(137, {\n  // OPTIONAL: This ensures that the transaction is paid for by the gas tank\n  // but if not provided, the gas tank will be used anyway\n  selectFee: async (\n    _txs: any,\n    _options: FeeOption[]\n  ) =&gt; {\n    return undefined\n  }\n})\n \n// Craft your transaction\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \nconst data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [senderAddress, recipientAddress, id]\n)\n \nconst txn = {\n  to: erc721TokenAddress,\n  data\n}\n \n// Send the transaction\nconst txnResponse = await signer.sendTransaction(txn)\n \n// Check if transaction was successful \nif (txnReceipt.status != 1) {\n  console.log(`Unexpected status: ${txnReceipt.status}`)\n}\n","title":"C.3 Add Sponsored Address","titles":["Building a Relaying Server","Nodejs Server with Gas Sponsoring using Sequence Builder"]},"33":{"href":"/guides/templates/02-building-relaying-server#parallel-transactions","html":"\n<p>If you want to send multiple independent transactions without needing to batch them, you can also send them in distinct nonce spaces.\nUsing distinct nonce spaces for your transactions signals to the relayer that there&#x27;s no dependency between them and that\nthey can be executed on-chain in any order.</p>\n<p>This allows the transactions to be dispatched immediately in an unbuffered way without having to wait for a full batch.\nHere is an example of how to do that:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate random nonce spaces with ~0% probability of collision</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> randomNonceSpace1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.BigNumber.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexlify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">randomBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> randomNonceSpace2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.BigNumber.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexlify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">randomBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create signers for each nonce space</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonceSpace: randomNonceSpace1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonceSpace: randomNonceSpace2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txn1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: tokenContract.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient1, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txn2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: tokenContract.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Dispatch transactions, which can now be executed in parallel</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">all</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signer1.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txn1),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signer2.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txn2)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span></code></pre>\n<p>If batching transactions is not a problem for your use-case, you can call <code>await wallet.sendTransaction(txns)</code>.\nYou can read more about batch transactions in <a href=\"/solutions/wallets/universal-wallet/03-guides/09-send-batch-transactions\">Sending Batched Transactions</a>.</p>","isPage":false,"text":"\nIf you want to send multiple independent transactions without needing to batch them, you can also send them in distinct nonce spaces.\nUsing distinct nonce spaces for your transactions signals to the relayer that there&#x27;s no dependency between them and that\nthey can be executed on-chain in any order.\nThis allows the transactions to be dispatched immediately in an unbuffered way without having to wait for a full batch.\nHere is an example of how to do that:\n// Generate random nonce spaces with ~0% probability of collision\nconst randomNonceSpace1 = ethers.BigNumber.from(ethers.utils.hexlify(ethers.utils.randomBytes(20)))\nconst randomNonceSpace2 = ethers.BigNumber.from(ethers.utils.hexlify(ethers.utils.randomBytes(20)))\n \n// Create signers for each nonce space\nconst signer1 = session.account.getSigner(137, {\n  nonceSpace: randomNonceSpace1\n})\n \nconst signer2 = session.account.getSigner(137, {\n  nonceSpace: randomNonceSpace2\n})\n \n// Generate transactions\nconst txn1 = {\n  to: tokenContract.address,\n  data: erc20Interface.encodeFunctionData(\n    &#x27;transfer&#x27;, [recipient1, amount1]\n  )\n}\n \nconst txn2 = {\n  to: tokenContract.address,\n  data: erc20Interface.encodeFunctionData(\n    &#x27;transfer&#x27;, [recipient2, amount2]\n  )\n}\n \n// Dispatch transactions, which can now be executed in parallel\nawait Promise.all([\n  signer1.sendTransaction(txn1),\n  signer2.sendTransaction(txn2)\n])\nIf batching transactions is not a problem for your use-case, you can call await wallet.sendTransaction(txns).\nYou can read more about batch transactions in Sending Batched Transactions.","title":"Parallel Transactions","titles":["Building a Relaying Server"]},"34":{"href":"/guides/templates/03-mint-collectibles-serverless#mint-collectibles-using-a-gasless-serverless-relayer","html":"</header>\n<p>Time to complete: 20-30 minutes</p>\n<p>The Sequence Relayer can be implemented on a serverless <a href=\"https://cloudflare.com/\">Cloudflare</a> worker so a game or app user interaction is seamless without a confirmation signature or gas payment. You&#x27;ll also benefit from not having to be worried about transaction speed, throughput and re-orgs by the relayer, and experience automatic scaling with Cloudflare.</p>\n<p>The following steps will guide you through how to build your hosted minter API in 4 steps:</p>\n<ol>\n<li><a href=\"/guides/templates/03-mint-collectibles-serverless#1-setup-cloudflare-environment-with-wrangler-cli--deploy-a-test\">Setup Cloudflare environment with wrangler cli and deploy a test</a></li>\n<li><a href=\"/guides/templates/03-mint-collectibles-serverless#2-deploy-sponsor-and-update-metadata-for-an-erc1155-contract-with-builder\">Deploy, sponsor and update Metadata for an ERC1155 contract with Builder</a></li>\n<li><a href=\"/guides/templates/03-mint-collectibles-serverless#3-use-ethauthproof-to-prevent-eoa-ddos\">Use EthAuthProof to prevent EOA DDoS</a></li>\n<li><a href=\"/guides/templates/03-mint-collectibles-serverless#4-mint-a-collectible-to-wallet\">Mint a collectible to wallet</a></li>\n</ol>\n<p>The result, a secure API with the following specs:</p>\n<ul>\n<li>HTTPS GET: returns blockNumber</li>\n<li>HTTPS POST(proof, address): mints a collectible &amp; returns transaction hash</li>\n</ul>\n<p>:::info Difficulty\nYou need basic knowledge of wrangler cli, npm, and Sequence Builder in order to complete this implementation.\n:::</p>\n","isPage":true,"text":"\nTime to complete: 20-30 minutes\nThe Sequence Relayer can be implemented on a serverless Cloudflare worker so a game or app user interaction is seamless without a confirmation signature or gas payment. You&#x27;ll also benefit from not having to be worried about transaction speed, throughput and re-orgs by the relayer, and experience automatic scaling with Cloudflare.\nThe following steps will guide you through how to build your hosted minter API in 4 steps:\n\nSetup Cloudflare environment with wrangler cli and deploy a test\nDeploy, sponsor and update Metadata for an ERC1155 contract with Builder\nUse EthAuthProof to prevent EOA DDoS\nMint a collectible to wallet\n\nThe result, a secure API with the following specs:\n\nHTTPS GET: returns blockNumber\nHTTPS POST(proof, address): mints a collectible &amp; returns transaction hash\n\n:::info Difficulty\nYou need basic knowledge of wrangler cli, npm, and Sequence Builder in order to complete this implementation.\n:::\n","title":"Mint Collectibles Using a Gasless Serverless Relayer","titles":[]},"35":{"href":"/guides/templates/03-mint-collectibles-serverless#1-setup-cloudflare-environment-with-wrangler-cli-and-deploy-a-test","html":"\n<p>In order to create the project from scratch, first create a project with <code>mkdir</code>, <code>cd</code> into the project, and run <code>pnpm init</code> to create a <code>package.json</code>.</p>\n<p>Next, make sure wrangler cli is installed in your project and set the <code>wrangler</code> keyword as an alias in your local bash session.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>pnpm install wrangler --save-dev</span></span>\n<span class=\"line\"><span>alias wrangler=&#x27;./node_modules/.bin/wrangler&#x27;</span></span></code></pre>\n<p>Create an account on the <a href=\"https://cloudflare.com/\">Cloudflare site</a> and perform a login step to login to your Cloudflare dashboard to connect the Cloudflare platform to your local development environment.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>wrangler login</span></span></code></pre>\n<p>Once logged in, initialize the project in the directory by accepting one of the randomly generated project folder names provided that you like, and follow the prompts to initialize your git tracked typescript <code>&quot;Hello World&quot; Worker</code> application.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>wrangler init</span></span></code></pre>\n<p>To complete this step, you should press enter 4 times after <code>wrangler init</code> with the last step answered as <code>No</code> to decline deployment.</p>\n<p>This will clone down a starter repository that can be used to deploy code to the cloud.</p>\n<p>:::info Local API Testing\nAt any point in the guide, you can use the <code>wrangler dev</code> command in the project folder for local testing\n:::</p>\n","isPage":false,"text":"\nIn order to create the project from scratch, first create a project with mkdir, cd into the project, and run pnpm init to create a package.json.\nNext, make sure wrangler cli is installed in your project and set the wrangler keyword as an alias in your local bash session.\npnpm install wrangler --save-dev\nalias wrangler=&#x27;./node_modules/.bin/wrangler&#x27;\nCreate an account on the Cloudflare site and perform a login step to login to your Cloudflare dashboard to connect the Cloudflare platform to your local development environment.\nwrangler login\nOnce logged in, initialize the project in the directory by accepting one of the randomly generated project folder names provided that you like, and follow the prompts to initialize your git tracked typescript &quot;Hello World&quot; Worker application.\nwrangler init\nTo complete this step, you should press enter 4 times after wrangler init with the last step answered as No to decline deployment.\nThis will clone down a starter repository that can be used to deploy code to the cloud.\n:::info Local API Testing\nAt any point in the guide, you can use the wrangler dev command in the project folder for local testing\n:::\n","title":"1. Setup Cloudflare environment with wrangler cli and deploy a test","titles":["Mint Collectibles Using a Gasless Serverless Relayer"]},"36":{"href":"/guides/templates/03-mint-collectibles-serverless#deploy-test","html":"\n<p>Finally, <code>cd</code> into the randomly generated project folder, and perform a <code>wrangler deploy</code> command.</p>\n<p>This should print a URL, which you can enter in the browser the URL <code>https://&lt;app&gt;.&lt;account&gt;.workers.dev</code> to view the <code>Hello World!</code> result.</p>\n","isPage":false,"text":"\nFinally, cd into the randomly generated project folder, and perform a wrangler deploy command.\nThis should print a URL, which you can enter in the browser the URL https://&lt;app&gt;.&lt;account&gt;.workers.dev to view the Hello World! result.\n","title":"Deploy Test","titles":["Mint Collectibles Using a Gasless Serverless Relayer","1. Setup Cloudflare environment with wrangler cli and deploy a test",null]},"37":{"href":"/guides/templates/03-mint-collectibles-serverless#2-deploy-sponsor-and-update-metadata-for-an-erc1155-contract-with-builder","html":"\n<p>First, follow <a href=\"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract\">this guide</a> to deploy a contract.</p>\n<p>Then, one must update the role access of the contract in the Builder to only receive requests from the minter wallet address, which can be done in 2 steps.</p>\n<p>You can do this in Sequence Builder by providing <code>minter permission</code> to your <code>Sequence Wallet Relayer Address</code>.</p>\n<p>In order to know what the relayer address you are working with is, one must first either:</p>\n<ol>\n<li>Have one generated for you using this <a href=\"https://73eql-hyaaa-aaaad-qf5bq-cai.ic.fleek.co/\">dapp</a> by selecting your network, and generating a wallet keypair with the <code>generate local wallet</code> button</li>\n<li>Or, you can print locally the account address produced from an EOA wallet private key using the following code snippet:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Session } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@0xsequence/auth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ethers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Generate a new EOA</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // const wallet = ethers.Wallet.createRandom()</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // const privateKey = wallet.privateKey</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Or, use an existing EOA private key</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> privateKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;https://nodes.sequence.app/mainnet&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create your server EOA</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> walletEOA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(privateKey, provider);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Open a Sequence session, this will find or create</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // a Sequence wallet controlled by your server EOA</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> session</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Session.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">singleSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    signer: walletEOA,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;access_key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Your relayer wallet address: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">signer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">account</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">address</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre>\n<p>To do so, open your project, navigate to the <code>Contracts</code> page, select your <code>Linked contracts</code> and under <code>Write Contract</code> tab expand the <code>grantRole</code> method.</p>\n<p>Complete with the following details:</p>\n<p><code>bytes32 role</code>: <code>0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6</code></p>\n<p><code>address account</code>: <code>&lt;Generated Sequence Relayer Wallet Address&gt;</code></p>\n<img src=\"/img/relayer/grant_role.png\"/>\n<p>Where the <code>role</code> string inputted is the result of <code>keccak256(&quot;MINTER_ROLE&quot;)</code> in solidity or <code>ethers.utils.keccak256(ethers.utils.toUtf8Bytes(&quot;MINTER_ROLE&quot;))</code> in javascript</p>\n<p>This makes it so that only your specific address can mint from the contract, it will error otherwise.</p>\n<p>Complete the role update by clicking <code>write</code> and sign the sponsored transaction.</p>\n","isPage":false,"text":"\nFirst, follow this guide to deploy a contract.\nThen, one must update the role access of the contract in the Builder to only receive requests from the minter wallet address, which can be done in 2 steps.\nYou can do this in Sequence Builder by providing minter permission to your Sequence Wallet Relayer Address.\nIn order to know what the relayer address you are working with is, one must first either:\n\nHave one generated for you using this dapp by selecting your network, and generating a wallet keypair with the generate local wallet button\nOr, you can print locally the account address produced from an EOA wallet private key using the following code snippet:\n\nimport { Session } from &quot;@0xsequence/auth&quot;;\nimport { ethers } from &quot;ethers&quot;;\n \n(async () =&gt; {\n  // Generate a new EOA\n  // const wallet = ethers.Wallet.createRandom()\n  // const privateKey = wallet.privateKey\n \n  // Or, use an existing EOA private key\n  const privateKey = &quot;&quot;;\n  const provider = new ethers.providers.JsonRpcProvider(\n    &quot;https://nodes.sequence.app/mainnet&quot;\n  );\n \n  // Create your server EOA\n  const walletEOA = new ethers.Wallet(privateKey, provider);\n \n  // Open a Sequence session, this will find or create\n  // a Sequence wallet controlled by your server EOA\n  const session = await Session.singleSigner({\n    signer: walletEOA,\n    projectAccessKey: &quot;access_key&quot;,\n  });\n \n  const signer = session.account.getSigner(1);\n  console.log(`Your relayer wallet address: ${signer.account.address}`);\n})();\nTo do so, open your project, navigate to the Contracts page, select your Linked contracts and under Write Contract tab expand the grantRole method.\nComplete with the following details:\nbytes32 role: 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\naddress account: &lt;Generated Sequence Relayer Wallet Address&gt;\n\nWhere the role string inputted is the result of keccak256(&quot;MINTER_ROLE&quot;) in solidity or ethers.utils.keccak256(ethers.utils.toUtf8Bytes(&quot;MINTER_ROLE&quot;)) in javascript\nThis makes it so that only your specific address can mint from the contract, it will error otherwise.\nComplete the role update by clicking write and sign the sponsored transaction.\n","title":"2. Deploy, Sponsor and Update Metadata for an ERC1155 Contract with Builder","titles":["Mint Collectibles Using a Gasless Serverless Relayer"]},"38":{"href":"/guides/templates/03-mint-collectibles-serverless#update-metadata","html":"\n<p>Next, you&#x27;ll need to update the metadata with your media or assets for your contract, which can be done by <a href=\"/solutions/collectibles/metadata/800-manage-metadata-builder\">following this guide</a>.</p>\n","isPage":false,"text":"\nNext, you&#x27;ll need to update the metadata with your media or assets for your contract, which can be done by following this guide.\n","title":"Update metadata","titles":["Mint Collectibles Using a Gasless Serverless Relayer","2. Deploy, Sponsor and Update Metadata for an ERC1155 Contract with Builder",null]},"39":{"href":"/guides/templates/03-mint-collectibles-serverless#contract-sponsoring","html":"\n<p>Finally, in order to sponsor the contract follow <a href=\"/solutions/builder/gas-tank\">this guide</a> to sponsor a contract.</p>\n","isPage":false,"text":"\nFinally, in order to sponsor the contract follow this guide to sponsor a contract.\n","title":"Contract sponsoring","titles":["Mint Collectibles Using a Gasless Serverless Relayer","2. Deploy, Sponsor and Update Metadata for an ERC1155 Contract with Builder",null]},"40":{"href":"/guides/templates/03-mint-collectibles-serverless#3-use-ethauthproof-to-prevent-eoa-ddos","html":"\n<p>Now that we have a contract deployed, we can return to the cloudflare worker directory and project, and install <code>ethers</code> and <code>0xsequence</code> to get access to sequence APIs in order to perform a proof validation that the request is coming from a trusted source, a sequence wallet.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>pnpm install 0xsequence @0xsequence/network</span></span></code></pre>\n<p>Then, we have to add a type of middleware, after we check if it&#x27;s a POST or GET request. If it&#x27;s a POST request, verify that the passed in <code>proofString</code> and <code>address</code> are valid, as well as the environment variables.</p>\n<p>The code scaffold placed into <code>src/index.ts</code> would look like this, with <code>callContract</code> and <code>getBlockNumber</code> mocked out, using the mentioned verification step of calling <code>verify</code> before any contract call.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { networks, findSupportedNetwork } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@0xsequence/network&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Env</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  PKEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Private key for EOA wallet</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  CONTRACT_ADDRESS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deployed ERC1155 or ERC721 contract address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  PROJECT_ACCESS_KEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// From sequence.build</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  CHAIN_HANDLE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Standardized chain name – See https://docs.sequence.xyz/multi-chain-support</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// use the sequence api to verify proof came from a sequence wallet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> verify</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  walletAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  ethAuthProofString</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Boolean</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> api</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.api.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SequenceAPIClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://api.sequence.app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">isValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> api.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValidETHAuthProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    chainId,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    walletAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ethAuthProofString,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  });</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> isValid;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handleRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  env</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Env</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  ctx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExecutionContext</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PKEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PKEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Make sure PKEY is configured in your environment&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CONTRACT_ADDRESS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CONTRACT_ADDRESS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &quot;Make sure CONTRACT_ADDRESS is configured in your environment&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      { status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &quot;Make sure PROJECT_ACCESS_KEY is configured in your environment&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      { status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &quot;Make sure CHAIN_HANDLE is configured in your environment&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      { status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chainConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> findSupportedNetwork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (chainConfig </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Unsupported network or unknown CHAIN_HANDLE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // POST request</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (request.method </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // parse the request body as JSON</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> body</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> request.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">proof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">tokenId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> body;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // check that the proof is valid</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> verify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, address, proof)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">          // mocked call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">          const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(request, env, address, tokenId);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">          return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">res</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">hash</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, { status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">          return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Something went wrong: ${</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Unauthorized`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, { status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">401</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Unauthorized ${</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">401</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // GET request</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // mocked call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, request);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Block Number: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">res</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Response</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Something went wrong: ${</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">JSON</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stringify</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        status: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">500</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBlockNumber</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Request</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chainId;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  env</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Env</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  tokenId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ethers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">providers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { hash: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> default</span><span style=\"color:#24292E;--shiki-dark:#F69D50\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetch</span><span style=\"color:#24292E;--shiki-dark:#F69D50\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Request</span><span style=\"color:#24292E;--shiki-dark:#F69D50\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">env</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Env</span><span style=\"color:#24292E;--shiki-dark:#F69D50\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExecutionContext</span><span style=\"color:#24292E;--shiki-dark:#F69D50\">) </span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process the request and create a response</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handleRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(request, env, ctx);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Set CORS headers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    response.headers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Access-Control-Allow-Origin&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;*&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    response.headers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &quot;Access-Control-Allow-Methods&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    response.headers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Access-Control-Allow-Headers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // return response</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> response;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span><span style=\"color:#24292E;--shiki-dark:#F69D50\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F69D50\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nNow that we have a contract deployed, we can return to the cloudflare worker directory and project, and install ethers and 0xsequence to get access to sequence APIs in order to perform a proof validation that the request is coming from a trusted source, a sequence wallet.\npnpm install 0xsequence @0xsequence/network\nThen, we have to add a type of middleware, after we check if it&#x27;s a POST or GET request. If it&#x27;s a POST request, verify that the passed in proofString and address are valid, as well as the environment variables.\nThe code scaffold placed into src/index.ts would look like this, with callContract and getBlockNumber mocked out, using the mentioned verification step of calling verify before any contract call.\nimport { sequence } from &quot;0xsequence&quot;;\nimport { networks, findSupportedNetwork } from &quot;@0xsequence/network&quot;;\n \nexport interface Env {\n  PKEY: string; // Private key for EOA wallet\n  CONTRACT_ADDRESS: string; // Deployed ERC1155 or ERC721 contract address\n  PROJECT_ACCESS_KEY: string; // From sequence.build\n  CHAIN_HANDLE: string; // Standardized chain name – See https://docs.sequence.xyz/multi-chain-support\n}\n \n// use the sequence api to verify proof came from a sequence wallet\nconst verify = async (\n  chainId: string,\n  walletAddress: string,\n  ethAuthProofString: string\n): Promise&lt;Boolean&gt; =&gt; {\n  const api = new sequence.api.SequenceAPIClient(&quot;https://api.sequence.app&quot;);\n  const { isValid } = await api.isValidETHAuthProof({\n    chainId,\n    walletAddress,\n    ethAuthProofString,\n  });\n  return isValid;\n};\n \nasync function handleRequest(\n  request: Request,\n  env: Env,\n  ctx: ExecutionContext\n): Promise&lt;Response&gt; {\n  if (env.PKEY === undefined || env.PKEY === &quot;&quot;) {\n    return new Response(&quot;Make sure PKEY is configured in your environment&quot;, {\n      status: 400,\n    });\n  }\n \n  if (env.CONTRACT_ADDRESS === undefined || env.CONTRACT_ADDRESS === &quot;&quot;) {\n    return new Response(\n      &quot;Make sure CONTRACT_ADDRESS is configured in your environment&quot;,\n      { status: 400 }\n    );\n  }\n \n  if (env.PROJECT_ACCESS_KEY === undefined || env.PROJECT_ACCESS_KEY === &quot;&quot;) {\n    return new Response(\n      &quot;Make sure PROJECT_ACCESS_KEY is configured in your environment&quot;,\n      { status: 400 }\n    );\n  }\n \n  if (env.CHAIN_HANDLE === undefined || env.CHAIN_HANDLE === &quot;&quot;) {\n    return new Response(\n      &quot;Make sure CHAIN_HANDLE is configured in your environment&quot;,\n      { status: 400 }\n    );\n  }\n \n  const chainConfig = findSupportedNetwork(env.CHAIN_HANDLE);\n \n  if (chainConfig === undefined) {\n    return new Response(&quot;Unsupported network or unknown CHAIN_HANDLE&quot;, {\n      status: 400,\n    });\n  }\n \n  // POST request\n  if (request.method === &quot;POST&quot;) {\n    // parse the request body as JSON\n    const body = await request.json();\n    const { proof, address, tokenId }: any = body;\n    try {\n      // check that the proof is valid\n      if (await verify(env.CHAIN_HANDLE, address, proof)) {\n        try {\n          // mocked call\n          const res = await callContract(request, env, address, tokenId);\n          return new Response(`${res.hash}`, { status: 200 });\n        } catch (err: any) {\n          console.log(err);\n          return new Response(`Something went wrong: ${JSON.stringify(err)}`, {\n            status: 400,\n          });\n        }\n      } else {\n        return new Response(`Unauthorized`, { status: 401 });\n      }\n    } catch (err: any) {\n      return new Response(`Unauthorized ${JSON.stringify(err)}`, {\n        status: 401,\n      });\n    }\n  }\n  // GET request\n  else {\n    try {\n      // mocked call\n      const res = await getBlockNumber(env.CHAIN_HANDLE, request);\n      return new Response(`Block Number: ${res}`);\n    } catch (err: any) {\n      return new Response(`Something went wrong: ${JSON.stringify(err)}`, {\n        status: 500,\n      });\n    }\n  }\n}\n \nconst getBlockNumber = async (\n  chainId: string,\n  request: Request\n): Promise&lt;number&gt; =&gt; {\n  return chainId;\n};\n \nconst callContract = async (\n  request: Request,\n  env: Env,\n  address: string,\n  tokenId: number\n): Promise&lt;ethers.providers.TransactionResponse&gt; =&gt; {\n  return { hash: &quot;0x&quot; } as any;\n};\n \nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext) {\n    // Process the request and create a response\n    const response = await handleRequest(request, env, ctx);\n \n    // Set CORS headers\n    response.headers.set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);\n    response.headers.set(\n      &quot;Access-Control-Allow-Methods&quot;,\n      &quot;GET, POST, PUT, DELETE, OPTIONS&quot;\n    );\n    response.headers.set(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);\n \n    // return response\n    return response;\n  },\n};\n","title":"3. Use EthAuthProof to prevent EOA DDoS","titles":["Mint Collectibles Using a Gasless Serverless Relayer"]},"41":{"href":"/guides/templates/03-mint-collectibles-serverless#add-cloudflare-environment-variables","html":"\n<p>Then, pass in the environment variables for your build by updating the <code>[vars]</code> section in your <code>wrangler.toml</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>[vars]</span></span>\n<span class=\"line\"><span>PKEY = &quot;&quot; # Private key for EOA wallet</span></span>\n<span class=\"line\"><span>CONTRACT_ADDRESS = &quot;&quot; # // Deployed ERC1155 or ERC721 contract address</span></span>\n<span class=\"line\"><span>PROJECT_ACCESS_KEY = &quot;&quot; # From sequence.build</span></span>\n<span class=\"line\"><span>CHAIN_HANDLE = &quot;&quot; # // Standardized chain name – See https://docs.sequence.xyz/multi-chain-support</span></span></code></pre>\n","isPage":false,"text":"\nThen, pass in the environment variables for your build by updating the [vars] section in your wrangler.toml.\n[vars]\nPKEY = &quot;&quot; # Private key for EOA wallet\nCONTRACT_ADDRESS = &quot;&quot; # // Deployed ERC1155 or ERC721 contract address\nPROJECT_ACCESS_KEY = &quot;&quot; # From sequence.build\nCHAIN_HANDLE = &quot;&quot; # // Standardized chain name – See https://docs.sequence.xyz/multi-chain-support\n","title":"Add cloudflare environment variables","titles":["Mint Collectibles Using a Gasless Serverless Relayer","3. Use EthAuthProof to prevent EOA DDoS",null]},"42":{"href":"/guides/templates/03-mint-collectibles-serverless#implement-window-object-in-wrangler-template","html":"\n<p>It should be noted, if you try to deploy this you&#x27;ll get a missing <code>window</code> object required by the web3 modules.</p>\n<p>To prevent this, add the following line to your <code>wrangler.toml</code> file to make the environment compatible.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>...</span></span>\n<span class=\"line\"><span>node_compat = true # add this line</span></span>\n<span class=\"line\"><span>...</span></span></code></pre>\n","isPage":false,"text":"\nIt should be noted, if you try to deploy this you&#x27;ll get a missing window object required by the web3 modules.\nTo prevent this, add the following line to your wrangler.toml file to make the environment compatible.\n...\nnode_compat = true # add this line\n...\n","title":"Implement window object in wrangler template","titles":["Mint Collectibles Using a Gasless Serverless Relayer","3. Use EthAuthProof to prevent EOA DDoS",null]},"43":{"href":"/guides/templates/03-mint-collectibles-serverless#testing-the-deploy","html":"\n<p>You can now redeploy using <code>wrangler deploy</code></p>\n<p>And perform a curl request to test your endpoint like such:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>curl -X POST https://your-worker.your-subdomain.workers.dev \\</span></span>\n<span class=\"line\"><span>-H &quot;Content-Type: application/json&quot; \\</span></span>\n<span class=\"line\"><span>-d &#x27;{&quot;proof&quot;: &quot;&lt;some_proof&gt;&quot;, &quot;address&quot;: &quot;&lt;some_address&gt;&quot;, &quot;tokenId&quot;: 0 }&#x27;</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>... invalid proof string ...</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># and if you replace with actual proof (from a wallet client login) and address on polygon, it should return</span></span>\n<span class=\"line\"><span>success</span></span></code></pre>\n<p>You can acquire your wallet address proof by using this <a href=\"https://73eql-hyaaa-aaaad-qf5bq-cai.ic.fleek.co/\">dapp</a> and follow the below steps.</p>\n","isPage":false,"text":"\nYou can now redeploy using wrangler deploy\nAnd perform a curl request to test your endpoint like such:\ncurl -X POST https://your-worker.your-subdomain.workers.dev \\\n-H &quot;Content-Type: application/json&quot; \\\n-d &#x27;{&quot;proof&quot;: &quot;&lt;some_proof&gt;&quot;, &quot;address&quot;: &quot;&lt;some_address&gt;&quot;, &quot;tokenId&quot;: 0 }&#x27;\n\n... invalid proof string ...\n\n# and if you replace with actual proof (from a wallet client login) and address on polygon, it should return\nsuccess\nYou can acquire your wallet address proof by using this dapp and follow the below steps.\n","title":"Testing the deploy","titles":["Mint Collectibles Using a Gasless Serverless Relayer","3. Use EthAuthProof to prevent EOA DDoS",null]},"44":{"href":"/guides/templates/03-mint-collectibles-serverless#using-the-ethauthproof-viewer-dapp","html":"\n<p>When you arrive on the page, the first thing you should do is select a network.</p>\n<p>Then you have an option to either connect and generate the Proof, or, generate a local wallet</p>\n<p><img src=\"/img/relayer/ethauthproof_viewer_connect.png\" alt=\"ETHAuthProof Viewer\"/></p>\n<p>Press the <code>connect</code> button and then <code>copy to clipboard</code>.</p>\n<p><img src=\"/img/relayer/ethauthproof_viewer_copy.png\" alt=\"ETHAuthProof Viewer copy to clipboard\"/></p>\n<p>It should be noted, it is best not to share this <code>ETHAuthProof</code> with anyone as this means someone can prove ownership of your wallet and interact with specific APIs.</p>\n<p>Finally, replace the <code>url</code> with your app from <a href=\"/guides/templates/03-mint-collectibles-serverless#deploy-test\">this step</a>, the <code>&lt;some_proof&gt;</code> with the generated value copied from the viewer dapp, and <code>&lt;some_address&gt;</code> with your wallet address and it should return just the mocked <code>0x</code> string.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>curl -X POST https://your-worker.your-subdomain.workers.dev \\</span></span>\n<span class=\"line\"><span>-H &quot;Content-Type: application/json&quot; \\</span></span>\n<span class=\"line\"><span>-d &#x27;{&quot;proof&quot;: &quot;&lt;some_proof&gt;&quot;, &quot;address&quot;: &quot;&lt;some_address&gt;&quot;, &quot;tokenId&quot;: 0 }&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nWhen you arrive on the page, the first thing you should do is select a network.\nThen you have an option to either connect and generate the Proof, or, generate a local wallet\n\nPress the connect button and then copy to clipboard.\n\nIt should be noted, it is best not to share this ETHAuthProof with anyone as this means someone can prove ownership of your wallet and interact with specific APIs.\nFinally, replace the url with your app from this step, the &lt;some_proof&gt; with the generated value copied from the viewer dapp, and &lt;some_address&gt; with your wallet address and it should return just the mocked 0x string.\ncurl -X POST https://your-worker.your-subdomain.workers.dev \\\n-H &quot;Content-Type: application/json&quot; \\\n-d &#x27;{&quot;proof&quot;: &quot;&lt;some_proof&gt;&quot;, &quot;address&quot;: &quot;&lt;some_address&gt;&quot;, &quot;tokenId&quot;: 0 }&#x27;\n","title":"Using the ETHAuthProof Viewer dapp","titles":["Mint Collectibles Using a Gasless Serverless Relayer","3. Use EthAuthProof to prevent EOA DDoS",null]},"45":{"href":"/guides/templates/03-mint-collectibles-serverless#4-mint-a-collectible-to-wallet","html":"\n<p>Finally, to deploy and mint a collectible from the sponsored contract address, we install the following packages</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>pnpm install @0xsequence/auth ethers@5.7.2</span></span></code></pre>\n<p>and implement the <code>callContract</code> and <code>getBlockNumber</code> methods previously mocked out as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Session, SessionSettings } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBlockNumber</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nodeUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `https://nodes.sequence.app/${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">chainId</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: nodeUrl, skipFetchSetup: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\treturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">env</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Env</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tokenId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ethers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">providers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nodeUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `https://nodes.sequence.app/${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> relayerUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `https://{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}-relayer.sequence.app`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: nodeUrl, skipFetchSetup: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CONTRACT_ADDRESS</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // create EOA from private key</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> walletEOA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PKEY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, provider);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t// instantiate settings</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> settings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Partial</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SessionSettings</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tnetworks: [{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\t...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">networks[</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">findSupportedNetwork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.chainId],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\trpcUrl: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">findSupportedNetwork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.rpcUrl,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\tprovider: provider,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\trelayer: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\turl: relayerUrl,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tprovider: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\turl: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">findSupportedNetwork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.rpcUrl</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t}],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // create a single signer sequence wallet session</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> session</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Session.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">singleSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tsettings: settings,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tsigner: walletEOA,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tprojectAccessKey: env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t// get signer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> session.account.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">findSupportedNetwork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CHAIN_HANDLE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.chainId)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t// create interface from partial abi</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> collectibleInterface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&#x27;function mint(address to, uint256 tokenId, uint256 amount, bytes data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t// create calldata</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> collectibleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">\t\t&#x27;mint&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, tokenId, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x00&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">\t// create transaction object</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { to: contractAddress, data }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\ttry</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\treturn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txn)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (err) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\tthrow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Once these steps are complete, you can redeploy and test with the steps outlined in this <a href=\"/guides/templates/03-mint-collectibles-serverless#testing\">prior step</a>, and this time the POST request should return a transaction hash for the completed mint and the GET request would return a block number.</p>\n<p>If you want to browse the full code, see <a href=\"https://github.com/0xsequence-demos/cloudflare-worker-sequence-relayer\">an example implementation here</a></p>","isPage":false,"text":"\nFinally, to deploy and mint a collectible from the sponsored contract address, we install the following packages\npnpm install @0xsequence/auth ethers@5.7.2\nand implement the callContract and getBlockNumber methods previously mocked out as follows:\nimport { ethers } from &#x27;ethers&#x27;\nimport { Session, SessionSettings } from &#x27;@0xsequence/auth&#x27;\n \n...\n \nconst getBlockNumber = async (chainId: string, request: Request): Promise&lt;number&gt; =&gt; {\n\tconst nodeUrl = `https://nodes.sequence.app/${chainId}`\n\tconst provider = new ethers.providers.JsonRpcProvider({ url: nodeUrl, skipFetchSetup: true })\n\treturn await provider.getBlockNumber()\n}\n \nconst callContract = async (request: Request, env: Env, address: string, tokenId: number): Promise&lt;ethers.providers.TransactionResponse&gt; =&gt; {\n \n\tconst nodeUrl = `https://nodes.sequence.app/${env.CHAIN_HANDLE}`\n\tconst relayerUrl = `https://{env.CHAIN_HANDLE}-relayer.sequence.app`\n\tconst provider = new ethers.providers.JsonRpcProvider({ url: nodeUrl, skipFetchSetup: true })\n    const contractAddress = env.CONTRACT_ADDRESS\n \n    // create EOA from private key\n\tconst walletEOA = new ethers.Wallet(env.PKEY, provider);\n \n\t// instantiate settings\n\tconst settings: Partial&lt;SessionSettings&gt; = {\n\t\tnetworks: [{\n\t\t\t...networks[findSupportedNetwork(env.CHAIN_HANDLE)!.chainId],\n\t\t\trpcUrl: findSupportedNetwork(env.CHAIN_HANDLE)!.rpcUrl,\n\t\t\tprovider: provider,\n\t\t\trelayer: {\n\t\t\t\turl: relayerUrl,\n\t\t\t\tprovider: {\n\t\t\t\t\turl: findSupportedNetwork(env.CHAIN_HANDLE)!.rpcUrl\n\t\t\t\t}\n\t\t\t}\n\t\t}],\n\t}\n \n    // create a single signer sequence wallet session\n\tconst session = await Session.singleSigner({\n\t\tsettings: settings,\n\t\tsigner: walletEOA,\n\t\tprojectAccessKey: env.PROJECT_ACCESS_KEY\n\t})\n \n\t// get signer\n\tconst signer = session.account.getSigner(findSupportedNetwork(env.CHAIN_HANDLE)!.chainId)\n \n\t// create interface from partial abi\n\tconst collectibleInterface = new ethers.utils.Interface([\n\t\t&#x27;function mint(address to, uint256 tokenId, uint256 amount, bytes data)&#x27;\n\t])\n \n\t// create calldata\n\tconst data = collectibleInterface.encodeFunctionData(\n\t\t&#x27;mint&#x27;, [address, tokenId, 1, &quot;0x00&quot;]\n\t)\n \n\t// create transaction object\n\tconst txn = { to: contractAddress, data }\n \n\ttry {\n\t\treturn await signer.sendTransaction(txn)\n\t} catch (err) {\n\t\tthrow err\n\t}\n}\nOnce these steps are complete, you can redeploy and test with the steps outlined in this prior step, and this time the POST request should return a transaction hash for the completed mint and the GET request would return a block number.\nIf you want to browse the full code, see an example implementation here","title":"4. Mint a collectible to wallet","titles":["Mint Collectibles Using a Gasless Serverless Relayer"]},"46":{"href":"/guides/templates/template-embedded-wallet#quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Quickstart","titles":[]},"47":{"href":"/guides/templates/template-embedded-wallet#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Try out seamless UX of our embedded wallet at our <a href=\"https://0xsequence.github.io/demo-waas-auth/\">demo</a></p></aside>\n","isPage":false,"text":"\nTry out seamless UX of our embedded wallet at our demo\n","title":"Try a Demo","titles":["Quickstart"]},"48":{"href":"/guides/templates/template-embedded-wallet#template","html":"\n<aside data-callout=\"info\"><p>Get started quickly with a <a href=\"https://github.com/0xsequence/demo-waas-auth\">template</a> leveraging our embedded wallet.</p></aside>\n","isPage":false,"text":"\nGet started quickly with a template leveraging our embedded wallet.\n","title":"Template","titles":["Quickstart"]},"49":{"href":"/guides/templates/template-embedded-wallet#getting-started","html":"\n","isPage":false,"text":"\n","title":"Getting Started","titles":["Quickstart"]},"50":{"href":"/guides/templates/template-embedded-wallet#sdk-installation","html":"\n<p>We provide TypeScript and Unity SDKs for the Embedded Wallet authentication system. You can install the TypeScript SDK with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/waas</span></span></code></pre>\n<p>For more information on the Unity Embedded Wallet SDK, please refer to the TODO add link <a href=\"#TODO\">Unity SDK documentation</a></p>\n","isPage":false,"text":"\nWe provide TypeScript and Unity SDKs for the Embedded Wallet authentication system. You can install the TypeScript SDK with:\npnpm install @0xsequence/waas\nFor more information on the Unity Embedded Wallet SDK, please refer to the TODO add link Unity SDK documentation\n","title":"SDK Installation","titles":["Quickstart","Getting Started"]},"51":{"href":"/guides/templates/template-embedded-wallet#project-setup","html":"\n<p>Sequence Embedded Wallet is currently only available as a closed beta. To start using the Embedded Wallet SDKs, you&#x27;ll need to contact the Sequence team and acquire API credentials. Once this is done, you will be provided with two keys:</p>\n<ul>\n<li>Project access key</li>\n<li>Embedded Wallet configuration key</li>\n</ul>\n","isPage":false,"text":"\nSequence Embedded Wallet is currently only available as a closed beta. To start using the Embedded Wallet SDKs, you&#x27;ll need to contact the Sequence team and acquire API credentials. Once this is done, you will be provided with two keys:\n\nProject access key\nEmbedded Wallet configuration key\n\n","title":"Project Setup","titles":["Quickstart","Getting Started"]},"52":{"href":"/guides/templates/template-embedded-wallet#library-setup","html":"\n<p>To start using Sequence Embedded Wallet SDK, you&#x27;ll need to create a new instance of the <code>waas</code> class:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>Note that the library is operational, but it can&#x27;t be used to interact with any wallet until you have authenticated <strong>as a user</strong>.</p>","isPage":false,"text":"\nTo start using Sequence Embedded Wallet SDK, you&#x27;ll need to create a new instance of the waas class:\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\nNote that the library is operational, but it can&#x27;t be used to interact with any wallet until you have authenticated as a user.","title":"Library Setup","titles":["Quickstart","Getting Started"]},"53":{"href":"/guides/templates/template-marketplace-api#deploy-an-in-game-collectibles-contract","html":"\n","isPage":true,"text":"\n","title":"Deploy an in-game collectibles contract","titles":[null]},"54":{"href":"/guides/templates/template-marketplace-api#query-contract-details","html":"\n","isPage":false,"text":"\n","title":"Query contract details","titles":[null]},"55":{"href":"/sdk/go/overview#go","html":"\n<p>A complete Sequence SDK is also available in Go: <a href=\"https://github.com/0xsequence/go-sequence\">https://github.com/0xsequence/go-sequence</a>.</p>\n<p><a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a> is the equivalent of <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a>\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with <a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a>.</p>\n","isPage":true,"text":"\nA complete Sequence SDK is also available in Go: https://github.com/0xsequence/go-sequence.\ngo-sequence is the equivalent of 0xsequence\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with go-sequence.\n","title":"Go","titles":[null,null]},"56":{"href":"/sdk/go/overview#ethkit","html":"\n<p>As part of the Sequence open source tools, our team has also built <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a>, which\nis an Ethereum dev toolkit for Go backends. <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a> supports EOA wallets,\nand you can think of it like <code>ethers.js</code> but for Go.</p>","isPage":false,"text":"\nAs part of the Sequence open source tools, our team has also built ethkit, which\nis an Ethereum dev toolkit for Go backends. ethkit supports EOA wallets,\nand you can think of it like ethers.js but for Go.","title":"ethkit","titles":[null,null]},"57":{"href":"/sdk/sequence-kit/01-overview#sequencekit-sdk","html":"</header>\n<p>Sequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular <a href=\"https://wagmi.sh/\">wagmi</a> library, unlock a realm of possibilities in the world of web3.</p>\n","isPage":true,"text":"\nSequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular wagmi library, unlock a realm of possibilities in the world of web3.\n","title":"SequenceKit SDK","titles":[]},"58":{"href":"/sdk/sequence-kit/01-overview#key-features","html":"\n<ul>\n<li>\n<p><strong>Universal Connections</strong>: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪</p>\n</li>\n<li>\n<p><strong>Web3 Wallet Integration</strong>: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️</p>\n</li>\n<li>\n<p><strong>Embedded Wallet Experience</strong>: Provide your users with a comprehensive embedded wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙</p>\n</li>\n</ul>\n<p>Explore the potential of Sequence Kit by trying out our <a href=\"https://0xsequence.github.io/kit\">demo</a>!</p>\n<header>","isPage":false,"text":"\n\n\nUniversal Connections: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪\n\n\nWeb3 Wallet Integration: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️\n\n\nEmbedded Wallet Experience: Provide your users with a comprehensive embedded wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙\n\n\nExplore the potential of Sequence Kit by trying out our demo!\n","title":"Key Features","titles":["SequenceKit SDK"]},"59":{"href":"/sdk/sequence-kit/01-overview#next-steps","html":"</header>\n<p>Ready to integrate Sequence Kit into your application? Check out our <a href=\"#TODO\">Getting Started guide</a>. If you&#x27;re already familiar with Sequence Kit dive into the available <a href=\"#TODO\">configuration options</a> or take a look at the <a href=\"#TODO\">checkout</a>.</p>","isPage":false,"text":"\nReady to integrate Sequence Kit into your application? Check out our Getting Started guide. If you&#x27;re already familiar with Sequence Kit dive into the available configuration options or take a look at the checkout.","title":"Next Steps","titles":[]},"60":{"href":"/sdk/sequence-kit/02-getting-started#getting-started-with-sequence-kit","html":"</header>\n<p>In this guide, we will walk you through installing Sequence Kit, triggering the connection modal, and displaying the embedded wallet in your application.</p>\n","isPage":true,"text":"\nIn this guide, we will walk you through installing Sequence Kit, triggering the connection modal, and displaying the embedded wallet in your application.\n","title":"Getting Started with Sequence Kit","titles":[]},"61":{"href":"/sdk/sequence-kit/02-getting-started#installing-sequence-kit-packages","html":"\n<p>Sequence Kit is modular, allowing you to install only the necessary packages. To get started, install the <code>kit</code> core package, the <code>connectors</code> package for interfacing with various wallet providers, and the <code>wallet</code> for the embedded wallet. Additionally, install other dependencies such as wagmi, viem, and 0xsequence.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/kit @0xsequence/kit-connectors wagmi ethers@5.7.2 viem </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence @tanstack/react-query</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/kit @0xsequence/kit-connectors wagmi ethers@5.7.2 viem </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence @tanstack/react-query</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add @0xsequence/kit @0xsequence/kit-connectors wagmi ethers@5.7.2 viem </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence @tanstack/react-query</span></span></code></pre>\n<header>","isPage":false,"text":"\nSequence Kit is modular, allowing you to install only the necessary packages. To get started, install the kit core package, the connectors package for interfacing with various wallet providers, and the wallet for the embedded wallet. Additionally, install other dependencies such as wagmi, viem, and 0xsequence.\nnpm install @0xsequence/kit @0xsequence/kit-connectors wagmi ethers@5.7.2 viem 0xsequence @tanstack/react-query\n# or\npnpm install @0xsequence/kit @0xsequence/kit-connectors wagmi ethers@5.7.2 viem 0xsequence @tanstack/react-query\n# or\nyarn add @0xsequence/kit @0xsequence/kit-connectors wagmi ethers@5.7.2 viem 0xsequence @tanstack/react-query\n","title":"Installing Sequence Kit Packages","titles":["Getting Started with Sequence Kit"]},"62":{"href":"/sdk/sequence-kit/02-getting-started#setting-up-the-kit-wrapper","html":"</header>\n<p>To utilize the core kit wrapper for connecting web3 wallets to your application, follow these steps:</p>\n<ol>\n<li>Configure wagmi for your app. Below is a basic wagmi configuration. For advanced configurations, please refer to the <a href=\"https://wagmi.sh/react/WagmiConfig\">wagmi documentation</a>.</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> MyPage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./components/MyPage&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { KitProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getDefaultConnectors } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-connectors&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { QueryClient, QueryClientProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tanstack/react-query&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createConfig, http, WagmiProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;wagmi&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet, polygon, Chain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;wagmi/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> queryClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> QueryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chains</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [mainnet, polygon] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Chain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Chain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> projectAccessKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&lt;access-key&gt;&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getDefaultConnectors</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    walletConnectProjectId: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;wallet-connect-id&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    defaultChainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    appName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;demo app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    projectAccessKey</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transports</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chains.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">forEach</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transports[chain.id] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transports,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connectors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    chains</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">MyPage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<ol start=\"2\">\n<li>Wrap your app with the <code>KitProvider</code> within the <code>WagmiConfig</code> wrapper.</li>\n</ol>\n<header>","isPage":false,"text":"\nTo utilize the core kit wrapper for connecting web3 wallets to your application, follow these steps:\n\nConfigure wagmi for your app. Below is a basic wagmi configuration. For advanced configurations, please refer to the wagmi documentation.\n\nimport MyPage from &#x27;./components/MyPage&#x27;\nimport { KitProvider } from &#x27;@0xsequence/kit&#x27;\nimport { getDefaultConnectors } from &#x27;@0xsequence/kit-connectors&#x27;\nimport { QueryClient, QueryClientProvider } from &#x27;@tanstack/react-query&#x27;\nimport { createConfig, http, WagmiProvider } from &#x27;wagmi&#x27;\nimport { mainnet, polygon, Chain } from &#x27;wagmi/chains&#x27;\n \nconst queryClient = new QueryClient() \n \nfunction App() {\n  const chains = [mainnet, polygon] as [Chain, ...Chain[]]\n  \n  const projectAccessKey = &#x27;&lt;access-key&gt;&#x27;\n \n  const connectors = getDefaultConnectors({\n    walletConnectProjectId: &#x27;wallet-connect-id&#x27;,\n    defaultChainId: 137,\n    appName: &#x27;demo app&#x27;,\n    projectAccessKey\n  })\n \n  const transports = {}\n \n  chains.forEach(chain =&gt; {\n    transports[chain.id] = http()\n  })\n  \n  const config = createConfig({\n    transports,\n    connectors,\n    chains\n  })\n \n  return (\n    &lt;WagmiConfig config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt; \n        &lt;KitProvider&gt;\n          &lt;MyPage /&gt;\n        &lt;/KitProvider&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n\nWrap your app with the KitProvider within the WagmiConfig wrapper.\n\n","title":"Setting Up the Kit Wrapper","titles":[]},"63":{"href":"/sdk/sequence-kit/02-getting-started#setting-up-the-embedded-wallet-wrapper","html":"</header>\n<p>To install the optional embedded wallet, add the <code>KitWalletProvider</code> below the <code>KitProvider</code> wrapper.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { KitWalletProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-wallet&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> App</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">kitConfig</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitWalletProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">Page</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitWalletProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The complete code will then look like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> MyPage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./components/MyPage&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { KitProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getDefaultConnectors } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-connectors&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { KitWalletProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-wallet&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { QueryClient, QueryClientProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tanstack/react-query&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createConfig, http, WagmiProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;wagmi&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet, polygon, Chain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;wagmi/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> queryClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> QueryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chains</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [mainnet, polygon] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Chain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Chain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> projectAccessKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&lt;access-key&gt;&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getDefaultConnectors</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    walletConnectProjectId: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;wallet-connect-id&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    defaultChainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    appName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;demo app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    projectAccessKey</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transports</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chains.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">forEach</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transports[chain.id] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transports,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connectors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    chains</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitWalletProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">MyPage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitWalletProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<header>","isPage":false,"text":"\nTo install the optional embedded wallet, add the KitWalletProvider below the KitProvider wrapper.\nimport { KitWalletProvider } from &#x27;@0xsequence/kit-wallet&#x27;\n \n// ...\n \nconst App = () =&gt; {\n  return (\n    &lt;WagmiConfig config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt; \n        &lt;KitProvider config={kitConfig}&gt;\n          &lt;KitWalletProvider&gt;\n            &lt;Page /&gt;\n          &lt;/KitWalletProvider&gt;\n        &lt;/KitProvider&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiConfig&gt;\n  )\n}\nThe complete code will then look like this:\nimport MyPage from &#x27;./components/MyPage&#x27;\nimport { KitProvider } from &#x27;@0xsequence/kit&#x27;\nimport { getDefaultConnectors } from &#x27;@0xsequence/kit-connectors&#x27;\nimport { KitWalletProvider } from &#x27;@0xsequence/kit-wallet&#x27;\nimport { QueryClient, QueryClientProvider } from &#x27;@tanstack/react-query&#x27;\nimport { createConfig, http, WagmiProvider } from &#x27;wagmi&#x27;\nimport { mainnet, polygon, Chain } from &#x27;wagmi/chains&#x27;\n \nconst queryClient = new QueryClient() \n \nfunction App() {\n  const chains = [mainnet, polygon] as [Chain, ...Chain[]]\n  \n  const projectAccessKey = &#x27;&lt;access-key&gt;&#x27;\n \n  const connectors = getDefaultConnectors({\n    walletConnectProjectId: &#x27;wallet-connect-id&#x27;,\n    defaultChainId: 137,\n    appName: &#x27;demo app&#x27;,\n    projectAccessKey\n  })\n \n  const transports = {}\n \n  chains.forEach(chain =&gt; {\n    transports[chain.id] = http()\n  })\n  \n  const config = createConfig({\n    transports,\n    connectors,\n    chains\n  })\n \n  return (\n    &lt;WagmiConfig config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt; \n        &lt;KitProvider&gt;\n          &lt;KitWalletProvider&gt;\n            &lt;MyPage /&gt;\n          &lt;/KitWalletProvider&gt;\n        &lt;/KitProvider&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n","title":"Setting Up the Embedded Wallet Wrapper","titles":[]},"64":{"href":"/sdk/sequence-kit/02-getting-started#triggering-the-connect-modal","html":"</header>\n<div class=\"text--center\"><img src=\"/img/kit/sign-in-modal.png\"/></div>\n<p>Invoke the connect modal using the <code>useOpenConnectModal</code> hook.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useOpenConnectModal } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useDisconnect, useAccount } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;wagmi&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyReactComponent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">setOpenConnectModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useOpenConnectModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">isConnected</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    setOpenConnectModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">      {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">isConnected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">onClick</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          Sign in</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      )</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The modal will automatically close once the user signs in. You can utilize the <code>useAccount</code> hook from wagmi to detect the user&#x27;s connection status.</p>\n<header>","isPage":false,"text":"\n\nInvoke the connect modal using the useOpenConnectModal hook.\nimport { useOpenConnectModal } from &#x27;@0xsequence/kit&#x27;\nimport { useDisconnect, useAccount } from &#x27;wagmi&#x27;\n \n \nconst MyReactComponent = () =&gt; {\n  const { setOpenConnectModal } = useOpenConnectModal()\n \n  const { isConnected } = useAccount()\n \n  const onClick = () =&gt; {\n    setOpenConnectModal(true)\n  }\n \n  return (\n    &lt;&gt;\n      {!isConnected &amp;&amp; (\n        &lt;button onClick={onClick}&gt;\n          Sign in\n        &lt;/button&gt;\n      )}\n    &lt;/&gt;\n  )\n}\nThe modal will automatically close once the user signs in. You can utilize the useAccount hook from wagmi to detect the user&#x27;s connection status.\n","title":"Triggering the Connect Modal","titles":[]},"65":{"href":"/sdk/sequence-kit/02-getting-started#invoking-the-embedded-wallet-modal","html":"</header>\n<div class=\"text--center\"><img src=\"/img/kit/embedded-wallet.png\"/></div>\n<p>Open the embedded wallet using the <code>useOpenWalletModal</code> react hook.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useOpenWalletModal } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-wallet&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyComponent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">setOpenWalletModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useOpenWalletModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    setOpenWalletModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">onClick</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;open wallet&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<header>","isPage":false,"text":"\n\nOpen the embedded wallet using the useOpenWalletModal react hook.\nimport { useOpenWalletModal } from &#x27;@0xsequence/kit-wallet&#x27;\n \nconst MyComponent = () =&gt; {\n  const { setOpenWalletModal } = useOpenWalletModal()\n \n  const onClick = () =&gt; {\n    setOpenWalletModal(true)\n  }\n \n  return (\n    &lt;button onClick={onClick}&gt;open wallet&lt;/button&gt;\n  )\n}\n","title":"Invoking the embedded wallet modal","titles":[]},"66":{"href":"/sdk/sequence-kit/02-getting-started#react-example","html":"</header>\n<p>The Sequence Kit <a href=\"https://github.com/0xsequence/kit\">Github repository</a> contains an <a href=\"https://github.com/0xsequence/kit/tree/master/examples/react\">example app</a> that you can use for learning and testing.</p>","isPage":false,"text":"\nThe Sequence Kit Github repository contains an example app that you can use for learning and testing.","title":"React Example","titles":[]},"67":{"href":"/sdk/sequence-kit/03-configuration#configuration-options","html":"</header>\n<p>Developers can customize the Sequence Kit experience by passing configuration options to the <code>KitProvider</code> wrapper.</p>\n<p>Here&#x27;s how you can configure the kit using these options:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> kitConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tdefaultTheme: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;light&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tposition: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;top-left&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">kitConfig</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<header>","isPage":true,"text":"\nDevelopers can customize the Sequence Kit experience by passing configuration options to the KitProvider wrapper.\nHere&#x27;s how you can configure the kit using these options:\n \n  const kitConfig =  {\n\t\tdefaultTheme: &#x27;light&#x27;,\n\t\tposition: &#x27;top-left&#x27;,\n\t\t...\n\t}\n \n  &lt;KitProvider config={kitConfig}&gt;\n    &lt;App /&gt;\n  &lt;KitProvider&gt;\n \n","title":"Configuration Options","titles":[]},"68":{"href":"/sdk/sequence-kit/03-configuration#available-options","html":"</header>\n","isPage":false,"text":"\n","title":"Available Options","titles":[]},"69":{"href":"/sdk/sequence-kit/03-configuration#defaulttheme","html":"\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string or object</td><td>dark</td></tr></tbody></table>\n<p>The defaultTheme determines the color palette used for styling the modal. Possible values include:</p>\n<ul>\n<li>&#x27;light&#x27;</li>\n<li>&#x27;dark&#x27;</li>\n<li>object</li>\n</ul>\n<p>Specific colors can be overwritten by passing a theme override object. The <a href=\"https://sequence.build/\">Sequence Builder</a> provides a useful playground for toying with the colors in Sequence Kit.</p>\n","isPage":false,"text":"\nTypeDefaultstring or objectdark\nThe defaultTheme determines the color palette used for styling the modal. Possible values include:\n\n&#x27;light&#x27;\n&#x27;dark&#x27;\nobject\n\nSpecific colors can be overwritten by passing a theme override object. The Sequence Builder provides a useful playground for toying with the colors in Sequence Kit.\n","title":"defaultTheme","titles":["Available Options"]},"70":{"href":"/sdk/sequence-kit/03-configuration#position","html":"\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string</td><td>center</td></tr></tbody></table>\n<p>The position parameter determines the location of the various modals on the screen. Possible values include:</p>\n<ul>\n<li>center</li>\n<li>middle-right</li>\n<li>middle-left</li>\n<li>top-center</li>\n<li>top-right</li>\n<li>top-left</li>\n<li>bottom-center</li>\n<li>bottom-right</li>\n<li>bottom-left</li>\n</ul>\n","isPage":false,"text":"\nTypeDefaultstringcenter\nThe position parameter determines the location of the various modals on the screen. Possible values include:\n\ncenter\nmiddle-right\nmiddle-left\ntop-center\ntop-right\ntop-left\nbottom-center\nbottom-right\nbottom-left\n\n","title":"position","titles":["Available Options"]},"71":{"href":"/sdk/sequence-kit/03-configuration#sign-in-modal-configuration-signin","html":"\n<p>The <code>signIn</code> object is used to configure the sign in modal.</p>\n","isPage":false,"text":"\nThe signIn object is used to configure the sign in modal.\n","title":"Sign In Modal Configuration (signIn)","titles":["Available Options"]},"72":{"href":"/sdk/sequence-kit/03-configuration#signinlogourl","html":"\n<div><img src=\"/img/kit/dark-mode-logo.png\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string</td><td>undefined</td></tr></tbody></table>\n<p>URL of the logo to be shown in the sign in modal.</p>\n","isPage":false,"text":"\n\nTypeDefaultstringundefined\nURL of the logo to be shown in the sign in modal.\n","title":"signIn.logoUrl","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"73":{"href":"/sdk/sequence-kit/03-configuration#signinprojectname","html":"\n<div><img src=\"/img/kit/project-name.png\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string</td><td>undefined</td></tr></tbody></table>\n<p>Name of the project to be shown in the sign in modal.</p>\n","isPage":false,"text":"\n\nTypeDefaultstringundefined\nName of the project to be shown in the sign in modal.\n","title":"signIn.projectName","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"74":{"href":"/sdk/sequence-kit/03-configuration#signinshowemailinput","html":"\n<div><img src=\"/img/kit/email-input.png\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>boolean</td><td>true</td></tr></tbody></table>\n<p>Determines whether the inline email input will be shown in the sign in modal.</p>\n","isPage":false,"text":"\n\nTypeDefaultbooleantrue\nDetermines whether the inline email input will be shown in the sign in modal.\n","title":"signIn.showEmailInput","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"75":{"href":"/sdk/sequence-kit/03-configuration#signinsocialauthoptions","html":"\n<div><img src=\"/img/kit/mini-auth-options.png\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string[]</td><td>[&#x27;google&#x27;, &#x27;facebook&#x27;, &#x27;twitch&#x27;, &#x27;apple&#x27;]</td></tr></tbody></table>\n<p>Determines which authentication options will be shown as social options in the sign in modal.\nThe wallets will be displayed in the order they are passed in the array. The values correspond to the connector&#x27;s id and a corresponding connector must be passed down to wagmi.</p>\n<p>For a full list of official connectors, see the <a href=\"https://github.com/0xsequence/kit/tree/master/packages/connectors\">connectors</a> page.</p>\n","isPage":false,"text":"\n\nTypeDefaultstring[][&#x27;google&#x27;, &#x27;facebook&#x27;, &#x27;twitch&#x27;, &#x27;apple&#x27;]\nDetermines which authentication options will be shown as social options in the sign in modal.\nThe wallets will be displayed in the order they are passed in the array. The values correspond to the connector&#x27;s id and a corresponding connector must be passed down to wagmi.\nFor a full list of official connectors, see the connectors page.\n","title":"signIn.socialAuthOptions","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"76":{"href":"/sdk/sequence-kit/03-configuration#signinwalletauthoptions","html":"\n<div><img src=\"/img/kit/auth-options.png\"/></div>\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>string[]</td><td>[&#x27;sequence&#x27;, &#x27;metamask&#x27;, &#x27;wallet-connect&#x27;, &#x27;coinbase-wallet&#x27;]</td></tr></tbody></table>\n<p>Determines which authentication options will be shown in the modal as web3 wallet options.\nThe wallets will be displayed in the order they are passed in the array. The values correspond to the connector&#x27;s id and a corresponding connector must be passed down to wagmi.</p>\n<p>For a full list of official connectors, see the <a href=\"https://github.com/0xsequence/kit/tree/master/packages/connectors\">connectors</a> page.</p>\n","isPage":false,"text":"\n\nTypeDefaultstring[][&#x27;sequence&#x27;, &#x27;metamask&#x27;, &#x27;wallet-connect&#x27;, &#x27;coinbase-wallet&#x27;]\nDetermines which authentication options will be shown in the modal as web3 wallet options.\nThe wallets will be displayed in the order they are passed in the array. The values correspond to the connector&#x27;s id and a corresponding connector must be passed down to wagmi.\nFor a full list of official connectors, see the connectors page.\n","title":"signIn.walletAuthOptions","titles":["Available Options","Sign In Modal Configuration (signIn)"]},"77":{"href":"/sdk/sequence-kit/03-configuration#displayedassets","html":"\n<table><thead><tr><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>[{ contractAddress: string, chainId: number }, ...]</td><td>undefined</td></tr></tbody></table>\n<p>If provided, this will determine which assets are to be displayed in the embedded wallet modal main view.\nBy passing a list of displayed assets, only assets from the provided list will be displayed in the main view.\nIn the case that no assets are provided, all owned assets can be displayed in the main view.</p>","isPage":false,"text":"\nTypeDefault[{ contractAddress: string, chainId: number }, ...]undefined\nIf provided, this will determine which assets are to be displayed in the embedded wallet modal main view.\nBy passing a list of displayed assets, only assets from the provided list will be displayed in the main view.\nIn the case that no assets are provided, all owned assets can be displayed in the main view.","title":"displayedAssets","titles":["Available Options"]},"78":{"href":"/sdk/sequence-kit/04-checkout#overview","html":"</header>\n<p>The checkout modal enables developers to easily facilitate cryptocurrency payments.</p>\n<div class=\"text--center\"><img src=\"/img/kit/checkout-modal.png\"/></div>\n<header>","isPage":true,"text":"\nThe checkout modal enables developers to easily facilitate cryptocurrency payments.\n\n","title":"Overview","titles":[]},"79":{"href":"/sdk/sequence-kit/04-checkout#integration","html":"</header>\n<p>To integrate the checkout feature, follow these steps:</p>\n<ol>\n<li>Install the <code>kit-checkout</code> module:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/kit-checkout</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/kit-checkout</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add @0xsequence/kit-checkout</span></span></code></pre>\n<ol start=\"2\">\n<li>Place the KitCheckoutProvider below the Sequence Kit Core provider in your app:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { KitCheckoutProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-checkout&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> App</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitCheckoutProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">Page</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitCheckoutProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTo integrate the checkout feature, follow these steps:\n\nInstall the kit-checkout module:\n\nnpm install @0xsequence/kit-checkout\n# or\npnpm install @0xsequence/kit-checkout\n# or\nyarn add @0xsequence/kit-checkout\n\nPlace the KitCheckoutProvider below the Sequence Kit Core provider in your app:\n\nimport { KitCheckoutProvider } from &#x27;@0xsequence/kit-checkout&#x27;\n \n \nconst App = () =&gt; {\n  return (\n    &lt;WagmiConfig config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt; \n        &lt;KitProvider&gt;\n          &lt;KitCheckoutProvider&gt;\n            &lt;Page /&gt;\n          &lt;/KitCheckoutProvider&gt;\n        &lt;/KitProvider&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiConfig&gt;\n  )\n}\n","title":"Integration","titles":[]},"80":{"href":"/sdk/sequence-kit/04-checkout#opening-the-checkout-modal","html":"\n<p>Use the <code>useCheckoutModal</code> hook to open the checkout modal and pass a settings object:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useCheckoutModal } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit-checkout&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyComponent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">triggerCheckout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useCheckoutModal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> checkoutSettings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      triggerCheckout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkoutSettings)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> onClick</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">onClick</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;checkout&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span></code></pre>\n","isPage":false,"text":"\nUse the useCheckoutModal hook to open the checkout modal and pass a settings object:\n  import { useCheckoutModal } from &#x27;@0xsequence/kit-checkout&#x27;\n \n \n  const MyComponent = () =&gt; {\n    const { triggerCheckout } = useCheckoutModal()\n  \n    const onClick = () =&gt; {\n      const checkoutSettings = {...}\n      triggerCheckout(checkoutSettings)\n    }\n \n    return (\n      &lt;button onClick={onClick}&gt;checkout&lt;/button&gt;\n    )\n  }\n","title":"Opening the Checkout modal","titles":["Integration"]},"81":{"href":"/sdk/sequence-kit/04-checkout#configuring-the-checkout-modal","html":"\n<p>Configure the checkout modal using the <code>checkoutSettings</code> object:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> checkoutSettings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  cryptoCheckout: {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  orderSummaryItems: {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nConfigure the checkout modal using the checkoutSettings object:\nconst checkoutSettings = {\n  cryptoCheckout: {...},\n  orderSummaryItems: {...}\n}\n","title":"Configuring the Checkout modal","titles":["Integration"]},"82":{"href":"/sdk/sequence-kit/04-checkout#crypto-checkout-configuration-cryptocheckout","html":"\n<p>The <code>cryptoCheckout</code> field specifies settings for checking out with cryptocurrency, e.g., interacting with a minting contract or marketplace contract.</p>\n<p>Example configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cons checkoutConfig </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  cryptoCheckout: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    triggerTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;triggered transaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    coinQuantity: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      contractAddress: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      amountRequiredRaw: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;10000000000&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe cryptoCheckout field specifies settings for checking out with cryptocurrency, e.g., interacting with a minting contract or marketplace contract.\nExample configuration:\ncons checkoutConfig = {\n  // ...\n  cryptoCheckout: {\n    chainId: 137,\n    triggerTransaction: async () =&gt; { console.log(&#x27;triggered transaction&#x27;) },\n    coinQuantity: {\n      contractAddress: &#x27;0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174&#x27;,\n      amountRequiredRaw: &#x27;10000000000&#x27;\n    },\n  },\n}\n","title":"Crypto Checkout Configuration (cryptoCheckout)","titles":["Integration","Configuring the Checkout modal"]},"83":{"href":"/sdk/sequence-kit/04-checkout#order-summary-configuration-ordersummaryitems","html":"\n<p>The <code>orderSummaryItems</code> field specifies the list of collectibles shown in the order summary.</p>\n<p>Example configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    orderSummaryItems</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        contractAddress: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x631998e91476da5b870d741192fc5cbc55f5a52e&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tokenId: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;66597&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        quantityRaw: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span></code></pre>","isPage":false,"text":"\nThe orderSummaryItems field specifies the list of collectibles shown in the order summary.\nExample configuration:\n    orderSummaryItems: [\n      {\n        contractAddress: &#x27;0x631998e91476da5b870d741192fc5cbc55f5a52e&#x27;,\n        tokenId: &#x27;66597&#x27;,\n        quantityRaw: &#x27;100&#x27;\n      },\n    ]","title":"Order Summary Configuration (orderSummaryItems)","titles":["Integration","Configuring the Checkout modal"]},"84":{"href":"/sdk/sequence-kit/05-custom-connectors#custom-connectors-in-sequence-kit","html":"</header>\n<p>Sequence Kit provides official connectors via the <a href=\"https://github.com/0xsequence/kit/tree/master/packages/connectors\">@0xsequence/kit-connectors</a> package. However, you can also integrate custom connectors with Sequence Kit to support additional wallets. This guide will walk you through creating and using custom connectors.</p>\n","isPage":true,"text":"\nSequence Kit provides official connectors via the @0xsequence/kit-connectors package. However, you can also integrate custom connectors with Sequence Kit to support additional wallets. This guide will walk you through creating and using custom connectors.\n","title":"Custom Connectors in Sequence Kit","titles":[]},"85":{"href":"/sdk/sequence-kit/05-custom-connectors#creating-a-custom-connector","html":"\n<p>To create a custom connector, you can use an existing connector as a basis. For example, the <a href=\"https://github.com/0xsequence/kit/blob/master/packages/connectors/src/connectors/metamask/metamask.ts\">Metamask Connector</a> is a good starting point. Here&#x27;s an example of how to create a custom connector:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myCustomConnector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyCustomConnectorOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  id: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;my-custom-connector&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;My Custom Connector&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  logoDark: MyCustomLogoDark,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  logoLight: MyCustomLogoLight,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  createConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myCustomConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(options);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> connector;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>Make sure to provide a unique <code>id</code> for your connector to avoid conflicts with other connectors. You can also customize fields such as <code>name</code>, <code>logoDark</code>, and <code>logoLight</code> to control how the connector appears in Sequence Kit.</p>\n<p>The <code>createConnector</code> function should return an initialized connector. Sequence Kit connectors are wrappers of Wagmi connectors, so you can use an official Wagmi connector if available, or create your own if needed.</p>\n<p>For more details on creating custom connectors, refer to <a href=\"https://wagmi.sh/examples/custom-connector\">Wagmi&#x27;s guide on Custom Connectors</a>.</p>\n<header>","isPage":false,"text":"\nTo create a custom connector, you can use an existing connector as a basis. For example, the Metamask Connector is a good starting point. Here&#x27;s an example of how to create a custom connector:\nexport const myCustomConnector = (options: MyCustomConnectorOptions) =&gt; ({\n  id: &#x27;my-custom-connector&#x27;,\n  name: &#x27;My Custom Connector&#x27;,\n  logoDark: MyCustomLogoDark,\n  logoLight: MyCustomLogoLight,\n  createConnector: () =&gt; {\n    const connector = myCustomConnector(options);\n    return connector;\n  },\n});\nMake sure to provide a unique id for your connector to avoid conflicts with other connectors. You can also customize fields such as name, logoDark, and logoLight to control how the connector appears in Sequence Kit.\nThe createConnector function should return an initialized connector. Sequence Kit connectors are wrappers of Wagmi connectors, so you can use an official Wagmi connector if available, or create your own if needed.\nFor more details on creating custom connectors, refer to Wagmi&#x27;s guide on Custom Connectors.\n","title":"Creating a Custom Connector","titles":["Custom Connectors in Sequence Kit"]},"86":{"href":"/sdk/sequence-kit/05-custom-connectors#using-custom-connectors","html":"</header>\n<p>When using custom connectors, you can&#x27;t rely on the <code>getDefaultConnectors</code> utility function. Instead, you need to pass custom configurations to Sequence Kit.</p>\n<p>First, create a list of connectors, including your custom connector, and provide it to the Wagmi configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getKitConnectWallets } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/kit&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getKitConnectWallets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  google</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    defaultNetwork: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connect: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;my-app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;&lt;access-key&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... other connectors</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  myCustomConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ appName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;my-app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transports,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  connectors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chains</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>Next, use your custom connector by specifying its <code>id</code> in either the <code>socialAuthOptions</code> or <code>walletAuthOptions</code> field of the Sequence Kit configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> kitConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signIn: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    socialAuthOptions: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;google&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;facebook&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    walletAuthOptions: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;metamask&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;my-custom-connector&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">kitConfig</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">KitProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<header>","isPage":false,"text":"\nWhen using custom connectors, you can&#x27;t rely on the getDefaultConnectors utility function. Instead, you need to pass custom configurations to Sequence Kit.\nFirst, create a list of connectors, including your custom connector, and provide it to the Wagmi configuration:\nimport { getKitConnectWallets } from &#x27;@0xsequence/kit&#x27;;\n \nconst connectors = getKitConnectWallets([\n  google({\n    defaultNetwork: 137,\n    connect: {\n      app: &#x27;my-app&#x27;,\n      projectAccessKey: &#x27;&lt;access-key&gt;&#x27;\n    }\n  }),\n  // ... other connectors\n  myCustomConnector({ appName: &#x27;my-app&#x27; }),\n]);\n \nconst config = createConfig({\n  transports,\n  connectors,\n  chains\n})\nNext, use your custom connector by specifying its id in either the socialAuthOptions or walletAuthOptions field of the Sequence Kit configuration:\nconst kitConfig = {\n  signIn: {\n    socialAuthOptions: [&#x27;google&#x27;, &#x27;facebook&#x27;],\n    walletAuthOptions: [&#x27;metamask&#x27;, &#x27;my-custom-connector&#x27;],\n  }\n};\n \nreturn (\n  &lt;WagmiConfig config={wagmiConfig}&gt;\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;KitProvider config={kitConfig}&gt;\n        &lt;App /&gt;\n      &lt;/KitProvider&gt;\n    &lt;/QueryClientProvider&gt;\n  &lt;/WagmiConfig&gt;\n);\n","title":"Using Custom Connectors","titles":[]},"87":{"href":"/sdk/sequence-kit/05-custom-connectors#share-your-custom-connectors","html":"</header>\n<p>Feel free to contribute your custom connectors by creating a <a href=\"https://github.com/0xsequence/kit/pulls\">pull request</a>. This way, others can benefit from your work and enjoy seamless integration with Sequence Kit.</p>\n<p>Share the love ❤️ by expanding the ecosystem of custom connectors!</p>","isPage":false,"text":"\nFeel free to contribute your custom connectors by creating a pull request. This way, others can benefit from your work and enjoy seamless integration with Sequence Kit.\nShare the love ❤️ by expanding the ecosystem of custom connectors!","title":"Share Your Custom Connectors","titles":[]},"88":{"href":"/sdk/typescript/01-overview#wallet","html":"</header>\n<p>Sequence Wallet gives you a friendly, non-custodial wallet for your users with multi-chain support and seamless integration.</p>\n<div class=\"text--center\"><img src=\"/img/wallet-screen.png\"/></div>\n<p>Most wallets for Ethereum have a single private key that has full control over a wallet, i.e. an Externally Owned Account (EOAs).\nHowever, a Sequence wallet is a Smart Contract that is deployed on the blockchain and which can be controlled by multiple private keys.\nThese keys are meant to be controlled by the wallet owner and provide added security since more than one of these keys would need to be\ncompromised for the wallet to be compromised.</p>","isPage":true,"text":"\nSequence Wallet gives you a friendly, non-custodial wallet for your users with multi-chain support and seamless integration.\n\nMost wallets for Ethereum have a single private key that has full control over a wallet, i.e. an Externally Owned Account (EOAs).\nHowever, a Sequence wallet is a Smart Contract that is deployed on the blockchain and which can be controlled by multiple private keys.\nThese keys are meant to be controlled by the wallet owner and provide added security since more than one of these keys would need to be\ncompromised for the wallet to be compromised.","title":"Wallet","titles":[]},"89":{"href":"/sdk/typescript/02-quickstart#quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Quickstart","titles":[]},"90":{"href":"/sdk/typescript/02-quickstart#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Try out the Universal Wallet leveraging SequenceKit at our <a href=\"https://0xsequence.github.io/kit/\">demo</a></p></aside>\n","isPage":false,"text":"\nTry out the Universal Wallet leveraging SequenceKit at our demo\n","title":"Try a Demo","titles":["Quickstart"]},"91":{"href":"/sdk/typescript/02-quickstart#template","html":"\n<aside data-callout=\"info\"><p>Get started quickly with a <a href=\"https://github.com/0xsequence/kit/tree/master/examples/react\">template</a> using SequenceKit</p></aside>\n","isPage":false,"text":"\nGet started quickly with a template using SequenceKit\n","title":"Template","titles":["Quickstart"]},"92":{"href":"/sdk/typescript/02-quickstart#install-for-existing-project","html":"\n<p>We provide TypeScript and Unity SDKs for the Embedded Wallet authentication system. You can install the TypeScript SDK with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/waas</span></span></code></pre>\n<p>For more information on the Unity Embedded Wallet SDK, please refer to the <a href=\"#TODO\">Unity SDK documentation</a>.</p>\n<p>The sequence.js SDK is composed of several sub-packages combined into a single meta-package called <code>0xsequence</code>.\nTo add the SDK to your project, add a dependency on 0xsequence to your package.json:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>If you know that your project only requires specific sub-packages, you can also depend on those directly with\n<code>npm add @0xsequence/&lt;sub-package name&gt;</code>.</p>\n<p>Your package.json should look something like this (actual version may vary):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;my-dapp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;dependencies&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;^1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;ethers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">^</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5.7</span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}</span></span></code></pre>\n","isPage":false,"text":"\nWe provide TypeScript and Unity SDKs for the Embedded Wallet authentication system. You can install the TypeScript SDK with:\npnpm install @0xsequence/waas\nFor more information on the Unity Embedded Wallet SDK, please refer to the Unity SDK documentation.\nThe sequence.js SDK is composed of several sub-packages combined into a single meta-package called 0xsequence.\nTo add the SDK to your project, add a dependency on 0xsequence to your package.json:\nnpm install 0xsequence ethers\nor\npnpm install 0xsequence ethers\nor\nyarn add 0xsequence ethers\nIf you know that your project only requires specific sub-packages, you can also depend on those directly with\nnpm add @0xsequence/&lt;sub-package name&gt;.\nYour package.json should look something like this (actual version may vary):\n{\n  &quot;name&quot;: &quot;my-dapp&quot;,\n  ...\n  &quot;dependencies&quot;: {\n    &quot;0xsequence&quot;: &quot;^1.0.0&quot;,\n    &quot;ethers&quot;: ^5.7.0&quot;\n    ...\n  }\n}\n","title":"Install for existing project","titles":["Quickstart"]},"93":{"href":"/sdk/typescript/02-quickstart#cdn-distribution-as-native-js","html":"\n<p>Optionally, <code>0xsequence</code> can be installed as a JS script source (UMD distribution) via:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://cdn.ethers.io/lib/ethers-5.7.umd.min.js&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://unpkg.com/0xsequence@latest/dist/0xsequence.umd.min.js&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>","isPage":false,"text":"\nOptionally, 0xsequence can be installed as a JS script source (UMD distribution) via:\n&lt;script src=&quot;https://cdn.ethers.io/lib/ethers-5.7.umd.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://unpkg.com/0xsequence@latest/dist/0xsequence.umd.min.js&quot;&gt;&lt;/script&gt;","title":"CDN distribution as native JS","titles":["Quickstart","Install for existing project",null]},"94":{"href":"/sdk/typescript/04-platforms#platforms","html":"</header>\n","isPage":true,"text":"\n","title":"Platforms","titles":[]},"95":{"href":"/sdk/typescript/04-platforms#web-wallet","html":"\n<p>Sequence works beautifully on all modern Web Browsers! Try it at <a href=\"https://sequence.app\">https://sequence.app</a> from any computer, phone or tablet.</p>\n<p>See <a href=\"/solutions/wallets/universal-wallet/02-quickstart.mdx\">Build With Sequence</a> to get started.</p>\n","isPage":false,"text":"\nSequence works beautifully on all modern Web Browsers! Try it at https://sequence.app from any computer, phone or tablet.\nSee Build With Sequence to get started.\n","title":"Web Wallet","titles":["Platforms"]},"96":{"href":"/sdk/typescript/04-platforms#mobile-wallet","html":"\n<p>Sequence works beautifully on your Mobile Web Browser! Try it at <a href=\"https://sequence.app\">https://sequence.app</a> from any phone or tablet.</p>\n<p>This means dapps which integrate the Sequence Wallet will automatically support users on all mobile devices,\nwhile using standard Ethereum web3 dapp-to-wallet communication. See <a href=\"/solutions/wallets/universal-wallet/02-quickstart.mdx\">Build With Sequence</a> to get started.</p>\n","isPage":false,"text":"\nSequence works beautifully on your Mobile Web Browser! Try it at https://sequence.app from any phone or tablet.\nThis means dapps which integrate the Sequence Wallet will automatically support users on all mobile devices,\nwhile using standard Ethereum web3 dapp-to-wallet communication. See Build With Sequence to get started.\n","title":"Mobile Wallet","titles":["Platforms"]},"97":{"href":"/sdk/typescript/04-platforms#browser-extension-wallet","html":"\n<p>Sequence Chrome Extension: <a href=\"https://chrome.google.com/webstore/detail/sequence-wallet/ocmccklecaalljlflmclidjeclpcpdim?hl=en\">Install</a></p>\n<p><img src=\"/img/build/seq-chrome-store.png\" alt=\"Sequence Chrome Extension\"/></p>\n<p><img src=\"/img/build/seq-chrome-ext-uniswap.png\" alt=\"Sequence Chrome Extension\"/></p>","isPage":false,"text":"\nSequence Chrome Extension: Install\n\n","title":"Browser Extension Wallet","titles":["Platforms"]},"98":{"href":"/sdk/typescript/05-fiat-on-ramps#fiat-on-ramps","html":"</header>\n<p>Sequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;</p>\n<ul>\n<li><a href=\"https://www.moonpay.com/\">Moonpay</a></li>\n<li><a href=\"https://ramp.network/\">Ramp</a></li>\n<li><a href=\"https://onmeta.in/\">UPI via Onmeta</a></li>\n<li><a href=\"https://www.sardine.ai/\">Sardine</a></li>\n<li><a href=\"https://paytrie.com/\">PayTrie</a></li>\n<li><a href=\"https://www.sendwyre.com/\">Wyre</a> (deprecated)</li>\n</ul>\n<p>Only providers that support the region the users are in will be displayed.</p>\n<p><img src=\"/img/fiat-providers.png\" alt=\"Sequence on-demand sign in\"/></p>\n<p>As a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.</p>\n<p>To learn more on how to configure the on-ramp options, see <a href=\"/solutions/wallets/universal-wallet/03-guides/01-connect-wallet#wallet-login-and-connect-options\">Sequence Connect Options</a>.</p>","isPage":true,"text":"\nSequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;\n\nMoonpay\nRamp\nUPI via Onmeta\nSardine\nPayTrie\nWyre (deprecated)\n\nOnly providers that support the region the users are in will be displayed.\n\nAs a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.\nTo learn more on how to configure the on-ramp options, see Sequence Connect Options.","title":"Fiat On-Ramps","titles":[]},"99":{"href":"/sdk/typescript/06-key-management#key-management","html":"</header>\n<p>Each Sequence wallet can be controlled by multiple private keys, acting like a multisignature wallet. Users can either create a Sequence wallet using one of the supported social login options or create a wallet with a private key stored only on that device.</p>\n<p>The improved security compared to traditional blockchain wallet comes from the fact that multiple independent keys need to be compromised for a malicious actor to take control of a user’s wallet, instead of a single key. The philosophy is that the more independent private-keys the user adds to their wallet, the more secure their wallet becomes, even if each individual key is only moderately secure on their own.</p>\n","isPage":true,"text":"\nEach Sequence wallet can be controlled by multiple private keys, acting like a multisignature wallet. Users can either create a Sequence wallet using one of the supported social login options or create a wallet with a private key stored only on that device.\nThe improved security compared to traditional blockchain wallet comes from the fact that multiple independent keys need to be compromised for a malicious actor to take control of a user’s wallet, instead of a single key. The philosophy is that the more independent private-keys the user adds to their wallet, the more secure their wallet becomes, even if each individual key is only moderately secure on their own.\n","title":"Key Management","titles":[]},"100":{"href":"/sdk/typescript/06-key-management#social-login-wallets","html":"\n<p>Sequence Wallet created with social logins are currently secured using three private keys: Session keys, a Guard key and a Torus key. The Session key and Torus key are both generated for the first time when a user creates their Sequence Wallet via social login or email authentication.\nAt least two of the three keys are needed to unlock an account. This means that if one of the three keys is lost or compromised, a user can use the two remaining keys to replace the lost/compromised key. For example, if a user lost their device containing their Session Key, they can unlock their Sequence Wallet account by email or social login for the Torus key combined with the Guard key. Once done, another session key is auto-generated and the user is back in their account with all 3 keys accessible again.</p>\n","isPage":false,"text":"\nSequence Wallet created with social logins are currently secured using three private keys: Session keys, a Guard key and a Torus key. The Session key and Torus key are both generated for the first time when a user creates their Sequence Wallet via social login or email authentication.\nAt least two of the three keys are needed to unlock an account. This means that if one of the three keys is lost or compromised, a user can use the two remaining keys to replace the lost/compromised key. For example, if a user lost their device containing their Session Key, they can unlock their Sequence Wallet account by email or social login for the Torus key combined with the Guard key. Once done, another session key is auto-generated and the user is back in their account with all 3 keys accessible again.\n","title":"Social Login Wallets","titles":["Key Management"]},"101":{"href":"/sdk/typescript/06-key-management#session-keys","html":"\n<p>Session keys are stored in the browser&#x27;s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a>.\nUsers should be prudent in safeguarding their devices from unauthorized access since an attacker with access to their IndexedDB effectively has control of their session key.</p>\n","isPage":false,"text":"\nSession keys are stored in the browser&#x27;s IndexedDB.\nUsers should be prudent in safeguarding their devices from unauthorized access since an attacker with access to their IndexedDB effectively has control of their session key.\n","title":"Session Keys","titles":["Key Management","Social Login Wallets"]},"102":{"href":"/sdk/typescript/06-key-management#guard-key","html":"\n<p>A Guard key is a key owned by Horizon. This key allows Horizon to help users that lost their Session key and can require additional information from the user in case of suspicious activity, if the user wants this additional protection. This key would be compromised if a malicious actor took control over Horizon servers hosting the Guard key.</p>\n","isPage":false,"text":"\nA Guard key is a key owned by Horizon. This key allows Horizon to help users that lost their Session key and can require additional information from the user in case of suspicious activity, if the user wants this additional protection. This key would be compromised if a malicious actor took control over Horizon servers hosting the Guard key.\n","title":"Guard Key","titles":["Key Management","Social Login Wallets"]},"103":{"href":"/sdk/typescript/06-key-management#torus-key","html":"\n<p>A Torus key is a key generated by the <a href=\"https://tor.us/\">Torus network</a>, and is generated using a user’s email or social login credentials such as Google or AppleID. Torus uses threshold cryptography to ensure that only the user can access their private key, making these keys non-custodial. A Torus key would be compromised if a malicious actor had control over the social account or email a user used to generate their Torus key. All Torus keys could be compromised if the Torus network itself was compromised.</p>\n<p>:::info DEFAULTS + CUSTOMIZATION</p>\n<p>While this is the default setup for new Sequence Wallets, we intend to add the ability for users to add, remove and replace the keys controlling their wallet such that users can choose their preference in terms of security and user experience tradeoff. Even the Guard key will be able to be removed. Security tips and recommendations will be added to ensure users are well informed of the risks and how to protect themselves against them.</p>\n<p>:::</p>","isPage":false,"text":"\nA Torus key is a key generated by the Torus network, and is generated using a user’s email or social login credentials such as Google or AppleID. Torus uses threshold cryptography to ensure that only the user can access their private key, making these keys non-custodial. A Torus key would be compromised if a malicious actor had control over the social account or email a user used to generate their Torus key. All Torus keys could be compromised if the Torus network itself was compromised.\n:::info DEFAULTS + CUSTOMIZATION\nWhile this is the default setup for new Sequence Wallets, we intend to add the ability for users to add, remove and replace the keys controlling their wallet such that users can choose their preference in terms of security and user experience tradeoff. Even the Guard key will be able to be removed. Security tips and recommendations will be added to ensure users are well informed of the risks and how to protect themselves against them.\n:::","title":"Torus Key","titles":["Key Management","Social Login Wallets"]},"104":{"href":"/sdk/unity/01-overview#introduction","html":"</header>\n<p>The Sequence Unity Embedded Wallet SDK provides full Sequence <a href=\"/solutions/wallets/embedded-wallet/01-overview\">Embedded Wallet</a> and <a href=\"/api/indexer\">Indexer</a> integration for your Unity Games, integrated with our own purpose-built for Unity SequenceEthereum library. That&#x27;s right, no Nethereum required!</p>\n<p>This SDK follows <a href=\"https://semver.org/\">Semantic Versioning</a> (<code>major.minor.patch</code>). While we&#x27;re still in <code>0.x.y</code> builds, API breaking changes can be made at any time. After <code>1.0.0</code>, breaking changes will always cause a <code>major</code> version increment, non-breaking new features will cause a <code>minor</code> version increment, and bugfixes will cause a <code>patch</code> version increment.</p>\n","isPage":true,"text":"\nThe Sequence Unity Embedded Wallet SDK provides full Sequence Embedded Wallet and Indexer integration for your Unity Games, integrated with our own purpose-built for Unity SequenceEthereum library. That&#x27;s right, no Nethereum required!\nThis SDK follows Semantic Versioning (major.minor.patch). While we&#x27;re still in 0.x.y builds, API breaking changes can be made at any time. After 1.0.0, breaking changes will always cause a major version increment, non-breaking new features will cause a minor version increment, and bugfixes will cause a patch version increment.\n","title":"Introduction","titles":[]},"105":{"href":"/sdk/unity/01-overview#requirements","html":"\n<p>Unity 2021.3.6f1 or later</p>\n<ul>\n<li>Android</li>\n<li>iOS</li>\n<li>PC standalone</li>\n<li>Mac standalone -&gt; (Mono builds only when using Social Sign in -&gt; in our testing MacOS doesn&#x27;t pick up custom URL schemes automatically unless you run some system commands first; these system commands only work on Mono -&gt; see <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Authentication/OpenIdAuthenticator.cs#L89\">OpenIdAuthentication.PlatformSpecificSetup</a>)</li>\n<li>WebGL (excluding Social Sign in)</li>\n</ul>","isPage":false,"text":"\nUnity 2021.3.6f1 or later\n\nAndroid\niOS\nPC standalone\nMac standalone -&gt; (Mono builds only when using Social Sign in -&gt; in our testing MacOS doesn&#x27;t pick up custom URL schemes automatically unless you run some system commands first; these system commands only work on Mono -&gt; see OpenIdAuthentication.PlatformSpecificSetup)\nWebGL (excluding Social Sign in)\n","title":"Requirements","titles":["Introduction"]},"106":{"href":"/sdk/unity/02-installation#installation","html":"</header>\n","isPage":true,"text":"\n","title":"Installation","titles":[]},"107":{"href":"/sdk/unity/02-installation#package-manager---recommended","html":"\n<ol>\n<li>Ensure you have Git 2.14.0 or above installed on your machine</li>\n<li>Open Package Manager (Window &gt; Package Manager)</li>\n<li>Click the &quot;+&quot; icon in the Package Manager window &gt; &quot;Add package from git URL...&quot;</li>\n<li>Paste this url and click Add or press Enter on your keyboard <code>https://github.com/0xsequence/sequence-unity.git?path=/Assets</code></li>\n<li>From Package Manager, click on &quot;Samples&quot;</li>\n<li>Import &quot;Setup&quot; from Samples\n<img src=\"/img/unity/unity-import-setup.png\" alt=\"Setup\"/></li>\n</ol>\n<p>a) This will import a Resources folder with the SequenceConfig scriptable object (more on this in Setup).</p>\n<p>b) This will also import an Editor folder with a Post Process Build script that will setup social sign in for you automatically on MacOS and iOS.</p>\n<ol start=\"7\">\n<li>Import <code>TMP Essentials</code> (if you haven&#x27;t already). Note: Unity should prompt you to do this automatically if you attempt to Play or Build with a TextMeshPro object in your scene.</li>\n</ol>\n<p><img src=\"/img/unity/unity-import-tmpro.png\" alt=\"Import TMPro\"/></p>\n","isPage":false,"text":"\n\nEnsure you have Git 2.14.0 or above installed on your machine\nOpen Package Manager (Window &gt; Package Manager)\nClick the &quot;+&quot; icon in the Package Manager window &gt; &quot;Add package from git URL...&quot;\nPaste this url and click Add or press Enter on your keyboard https://github.com/0xsequence/sequence-unity.git?path=/Assets\nFrom Package Manager, click on &quot;Samples&quot;\nImport &quot;Setup&quot; from Samples\n\n\na) This will import a Resources folder with the SequenceConfig scriptable object (more on this in Setup).\nb) This will also import an Editor folder with a Post Process Build script that will setup social sign in for you automatically on MacOS and iOS.\n\nImport TMP Essentials (if you haven&#x27;t already). Note: Unity should prompt you to do this automatically if you attempt to Play or Build with a TextMeshPro object in your scene.\n\n\n","title":"Package Manager - Recommended","titles":["Installation"]},"108":{"href":"/sdk/unity/02-installation#samples","html":"\n<p>In addition to this documentation, we&#x27;ve also provided you with a few samples to help with using our SDK.</p>\n<p>These can be found by:</p>\n<ol>\n<li>Opening Package Manager</li>\n<li>Finding our SDK &quot;Sequence WaaS SDK&quot;</li>\n<li>Click on &quot;Samples&quot;</li>\n<li>Click &quot;Import&quot; next to any sample you wish to install. This will create a Samples folder under Assets and import the sample there. The sample will be completely mutable as it lives within your Assets folder.</li>\n</ol>\n<p><img src=\"/img/unity/unity-package-manager-samples.png\" alt=\"Samples\"/></p>\n<p>The second sample &quot;Demo Scene&quot; is sample scene that showcases some of the features of our SDK. It serves as a useful supplement to the documentation.</p>\n<p>The third sample &quot;Demo Tower Defense Game&quot; is a sample game. We began with <a href=\"https://assetstore.unity.com/packages/essentials/tutorial-projects/tower-defense-template-107692\">Unity&#x27;s Tower Defense Template</a> project and ripped out the save system to replace it with ERC1155s. When importing this sample game into your project, you may get a message &quot;Script Updating Consent&quot; that asks if you want to update the source files to the a newer API. This is because the template project was made on a much earlier version of Unity and some of the scripting APIs used by Unity have changed since the template project was created. You can simply click &quot;Yes, just for these files&quot;. Note that, in order to play the demo game, there is some <a href=\"https://github.com/0xsequence/sequence-unity-demo/tree/tower-defence/package-manager?tab=readme-ov-file#how-it-was-made\">config you need to setup</a>. However, even without configuring the game, we believe the Scripts within the project can be a useful resource when starting out.</p>\n<p><img src=\"/img/unity/unity-update-api-prompt.png\" alt=\"Update API Prompt\"/></p>\n","isPage":false,"text":"\nIn addition to this documentation, we&#x27;ve also provided you with a few samples to help with using our SDK.\nThese can be found by:\n\nOpening Package Manager\nFinding our SDK &quot;Sequence WaaS SDK&quot;\nClick on &quot;Samples&quot;\nClick &quot;Import&quot; next to any sample you wish to install. This will create a Samples folder under Assets and import the sample there. The sample will be completely mutable as it lives within your Assets folder.\n\n\nThe second sample &quot;Demo Scene&quot; is sample scene that showcases some of the features of our SDK. It serves as a useful supplement to the documentation.\nThe third sample &quot;Demo Tower Defense Game&quot; is a sample game. We began with Unity&#x27;s Tower Defense Template project and ripped out the save system to replace it with ERC1155s. When importing this sample game into your project, you may get a message &quot;Script Updating Consent&quot; that asks if you want to update the source files to the a newer API. This is because the template project was made on a much earlier version of Unity and some of the scripting APIs used by Unity have changed since the template project was created. You can simply click &quot;Yes, just for these files&quot;. Note that, in order to play the demo game, there is some config you need to setup. However, even without configuring the game, we believe the Scripts within the project can be a useful resource when starting out.\n\n","title":"Samples","titles":["Installation","Package Manager - Recommended"]},"109":{"href":"/sdk/unity/02-installation#manual","html":"\n<p>Installing via Package Manager will put the SDK in a read-only state - note: you will still be able to modify the UI when using Package Manager.</p>\n<p>For most use cases, this is ideal. However, we recognize that some advanced users will want the flexibility to edit the SDK as they see fit.</p>\n<p>Please note that if you do chose this route that updating the SDK will become more challenging because any changes you make will be overwritten and these changes can easily go unnoticed in a version control system. In general, we feel it is safer to import the SDK in read-only mode via Package Manager and write wrappers to extend as needed, but we empower you to work with our SDK how you see fit.</p>\n<ol>\n<li>Add <a href=\"https://docs.unity3d.com/Packages/com.unity.nuget.newtonsoft-json@3.0/manual/index.html\">Newtonsoft.json</a> to your project (if it isn&#x27;t there already) via package manager. Click on the &quot;+&quot; icon in the Package Manager window &gt; &quot;Add package by name...&quot; and add <code>com.unity.nuget.newtonsoft-json</code>.</li>\n<li>Download <a href=\"https://github.com/0xsequence/sequence-unity/releases\">the latest release of the Sequence Unity SDK UnityPackage</a></li>\n<li>Drag the <code>.unitypackage</code> file into your project window and import it</li>\n<li>Import <code>TMP Essentials</code> (if you haven&#x27;t already). Note: Unity should prompt you to do this automatically if you attempt to Play or Build with a TextMeshPro object in your scene.</li>\n</ol>","isPage":false,"text":"\nInstalling via Package Manager will put the SDK in a read-only state - note: you will still be able to modify the UI when using Package Manager.\nFor most use cases, this is ideal. However, we recognize that some advanced users will want the flexibility to edit the SDK as they see fit.\nPlease note that if you do chose this route that updating the SDK will become more challenging because any changes you make will be overwritten and these changes can easily go unnoticed in a version control system. In general, we feel it is safer to import the SDK in read-only mode via Package Manager and write wrappers to extend as needed, but we empower you to work with our SDK how you see fit.\n\nAdd Newtonsoft.json to your project (if it isn&#x27;t there already) via package manager. Click on the &quot;+&quot; icon in the Package Manager window &gt; &quot;Add package by name...&quot; and add com.unity.nuget.newtonsoft-json.\nDownload the latest release of the Sequence Unity SDK UnityPackage\nDrag the .unitypackage file into your project window and import it\nImport TMP Essentials (if you haven&#x27;t already). Note: Unity should prompt you to do this automatically if you attempt to Play or Build with a TextMeshPro object in your scene.\n","title":"Manual","titles":["Installation"]},"110":{"href":"/sdk/unity/03-setup#setup","html":"</header>\n<ol>\n<li>\n<p>Navigate to the Resources folder imported via the <code>Setup</code> sample and locate the <code>SequenceConfig</code> ScriptableObject</p>\n<p>a) If you imported the SDK manually, you will need to create a Resources folder and SequenceConfig</p>\n<p>b) Create a <code>Resources</code> folder located at <code>Assets/Resources</code>. The SDK uses <a href=\"https://docs.unity3d.com/ScriptReference/Resources.Load.html\">Resources.Load</a> to load the config <code>ScriptableObject</code> we&#x27;ll create in the next step.</p>\n<p>c) On the top bar, click <code>Assets &gt; Create &gt; Sequence &gt; SequenceConfig</code> and place the newly created <code>ScriptableObject</code> at the root of your <code>Resources</code> folder.</p>\n</li>\n<li>\n<p>Fill in <code>SequenceConfig</code> with the appropriate values for your project.</p>\n<p>a) <code>Url Scheme</code> - You must replace this with a string that is unique to your application. This is very important. Failure to do so will cause unexpected behaviour when signing in with social sign in and it will not work.</p>\n<p>b) <code>Builder API Keys</code> - These are found in the <a href=\"https://sequence.build/\">Builder</a> under <code>Settings &gt; API Access Keys</code></p>\n<p>c) <code>WaaS Config Key</code> - This will be given to you by the Sequence team during WaaS onboarding</p>\n</li>\n</ol>","isPage":true,"text":"\n\n\nNavigate to the Resources folder imported via the Setup sample and locate the SequenceConfig ScriptableObject\na) If you imported the SDK manually, you will need to create a Resources folder and SequenceConfig\nb) Create a Resources folder located at Assets/Resources. The SDK uses Resources.Load to load the config ScriptableObject we&#x27;ll create in the next step.\nc) On the top bar, click Assets &gt; Create &gt; Sequence &gt; SequenceConfig and place the newly created ScriptableObject at the root of your Resources folder.\n\n\nFill in SequenceConfig with the appropriate values for your project.\na) Url Scheme - You must replace this with a string that is unique to your application. This is very important. Failure to do so will cause unexpected behaviour when signing in with social sign in and it will not work.\nb) Builder API Keys - These are found in the Builder under Settings &gt; API Access Keys\nc) WaaS Config Key - This will be given to you by the Sequence team during WaaS onboarding\n\n","title":"Setup","titles":[]},"111":{"href":"/sdk/unity/04-authentication#authentication","html":"</header>\n<p>As a WaaS SDK, authentication is extremely important. Authentication works by establishing a session signing wallet through association with an <a href=\"https://auth0.com/docs/secure/tokens/id-tokens/id-token-structure#sample-id-token\">OIDC idToken</a>. For more on how our Embedded Wallet works, please <a href=\"/solutions/wallets/embedded-wallet/01-overview\">see Embedded Wallet docs</a>.</p>\n<p>To implement authentication, we recommend using our <code>LoginPanel</code> prefab. Locate this prefab under <code>SequenceExamples &gt; Prefabs</code> and drag it under a <a href=\"https://docs.unity3d.com/2020.1/Documentation/Manual/UICanvas.html\">Canvas</a> in your scene.\nWe recommend having the <code>Canvas Scaler</code> component attached to your <code>Canvas</code> use the &quot;Scale with Screen Size&quot; UI Scale Mode. This will make it so that the LoginPanel (and any other UI elements under this Canvas) are scaled automatically when switching between build targets.</p>\n<p>Note: The <code>LoginPanel</code> is hidden by default. You can open it with the <code>Open</code> method and no arguments. To help with this, the <code>LoginPanel</code> GameObject is not disabled, so feel free to use <a href=\"https://docs.unity3d.com/ScriptReference/Component.GetComponentInChildren.html\">GetComponentInChildren</a>, <a href=\"https://docs.unity3d.com/ScriptReference/Object.FindObjectOfType.html\">FindObjectOfType</a>, or similar to obtain a reference to the <code>LoginPanel</code> MonoBehaviour.</p>\n<p>This will provide you easy access to two authentication methods:</p>\n","isPage":true,"text":"\nAs a WaaS SDK, authentication is extremely important. Authentication works by establishing a session signing wallet through association with an OIDC idToken. For more on how our Embedded Wallet works, please see Embedded Wallet docs.\nTo implement authentication, we recommend using our LoginPanel prefab. Locate this prefab under SequenceExamples &gt; Prefabs and drag it under a Canvas in your scene.\nWe recommend having the Canvas Scaler component attached to your Canvas use the &quot;Scale with Screen Size&quot; UI Scale Mode. This will make it so that the LoginPanel (and any other UI elements under this Canvas) are scaled automatically when switching between build targets.\nNote: The LoginPanel is hidden by default. You can open it with the Open method and no arguments. To help with this, the LoginPanel GameObject is not disabled, so feel free to use GetComponentInChildren, FindObjectOfType, or similar to obtain a reference to the LoginPanel MonoBehaviour.\nThis will provide you easy access to two authentication methods:\n","title":"Authentication","titles":[]},"112":{"href":"/sdk/unity/04-authentication#1-email-sign-in","html":"\n<p>Available on all platforms, email sign in leverages <a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a> and provides the user with a 2FA challenge - a 6 digit code emailed to the entered address for the user to enter on the next page.\nOnce the user successfully completes the 2FA challenge, the SDK will receive an idToken in JWT format from Amazon Cognito and proceed to establish the session with WaaS API.</p>\n","isPage":false,"text":"\nAvailable on all platforms, email sign in leverages Amazon Cognito and provides the user with a 2FA challenge - a 6 digit code emailed to the entered address for the user to enter on the next page.\nOnce the user successfully completes the 2FA challenge, the SDK will receive an idToken in JWT format from Amazon Cognito and proceed to establish the session with WaaS API.\n","title":"1. Email Sign In","titles":["Authentication"]},"113":{"href":"/sdk/unity/04-authentication#2-social-sign-in","html":"\n<p>Available on all platforms except WebGL (currently), social sign in uses <a href=\"https://openid.net/developers/how-connect-works/\">OIDC</a> with the <a href=\"https://auth0.com/docs/authenticate/login/oidc-conformant-authentication/oidc-adoption-implicit-flow\">implicit flow</a> to allow users to login via their existing Google, Discord, Facebook, or Apple accounts.\nOnce the user successfully signs in, an idToken is returned via deep link to the application.\nIn order to enable deep linking, we must register a custom URL scheme for our application. There are some platform specific requirements to set this up.</p>\n<b>Note: social sign in does not work in the Editor as we cannot register a custom URL scheme.</b>\n","isPage":false,"text":"\nAvailable on all platforms except WebGL (currently), social sign in uses OIDC with the implicit flow to allow users to login via their existing Google, Discord, Facebook, or Apple accounts.\nOnce the user successfully signs in, an idToken is returned via deep link to the application.\nIn order to enable deep linking, we must register a custom URL scheme for our application. There are some platform specific requirements to set this up.\nNote: social sign in does not work in the Editor as we cannot register a custom URL scheme.\n","title":"2. Social Sign in","titles":["Authentication"]},"114":{"href":"/sdk/unity/04-authentication#ios","html":"\n<ol>\n<li>Open the iOS Player Settings window (menu: Edit &gt; Project Settings &gt; Player Settings, then select iOS).</li>\n<li>Select <code>Other Settings</code>, then scroll down to <code>Configuration</code>.</li>\n<li>Expand the <code>Supported URL schemes</code> section, and add 1 to the size.</li>\n<li>In the new <code>Element N</code> field, enter the URL scheme you&#x27;ve configured in <code>SequenceConfig</code>.</li>\n</ol>\n<p><img src=\"/img/unity/unity-url-scheme-ios.png\" alt=\"iOS URL Scheme\"/></p>\n","isPage":false,"text":"\n\nOpen the iOS Player Settings window (menu: Edit &gt; Project Settings &gt; Player Settings, then select iOS).\nSelect Other Settings, then scroll down to Configuration.\nExpand the Supported URL schemes section, and add 1 to the size.\nIn the new Element N field, enter the URL scheme you&#x27;ve configured in SequenceConfig.\n\n\n","title":"iOS","titles":["Authentication","2. Social Sign in"]},"115":{"href":"/sdk/unity/04-authentication#macos","html":"\n<ol>\n<li>Open the Windows/Mac/Linux Player Settings window (menu: Edit &gt; Project Settings &gt; Player Settings, then select Windows/Mac/Linux).</li>\n<li>Select <code>Other Settings</code>, then scroll down to <code>Mac Configuration</code>.</li>\n<li>Expand the <code>Supported URL schemes</code> section, and add 1 to the size.</li>\n<li>In the new <code>Element N</code> field, enter the URL scheme you&#x27;ve configured in <code>SequenceConfig</code>.</li>\n</ol>\n<p><img src=\"/img/unity/unity-url-scheme-mac.png\" alt=\"Mac URL Scheme\"/></p>\n","isPage":false,"text":"\n\nOpen the Windows/Mac/Linux Player Settings window (menu: Edit &gt; Project Settings &gt; Player Settings, then select Windows/Mac/Linux).\nSelect Other Settings, then scroll down to Mac Configuration.\nExpand the Supported URL schemes section, and add 1 to the size.\nIn the new Element N field, enter the URL scheme you&#x27;ve configured in SequenceConfig.\n\n\n","title":"MacOS","titles":["Authentication","2. Social Sign in"]},"116":{"href":"/sdk/unity/04-authentication#pc","html":"\n<p>No additional steps required.</p>\n","isPage":false,"text":"\nNo additional steps required.\n","title":"PC","titles":["Authentication","2. Social Sign in"]},"117":{"href":"/sdk/unity/04-authentication#android","html":"\n<ol>\n<li>In the Project window, browse to <code>Assets &gt; Plugins &gt; Android</code>.</li>\n</ol>\n<p>a) Note: in Unity versions 2021.2 and up this path doesn&#x27;t exist by default. Please navigate to <code>Edit &gt; Project Settings &gt; Player</code> and under the Android Publishing Settings, enable <code>Custom Main Manifest</code> in the Build section. See <a href=\"https://docs.unity3d.com/Manual/deep-linking-android.html\">https://docs.unity3d.com/Manual/deep-linking-android.html</a> for more info.</p>\n<ol start=\"2\">\n<li>If it doesn&#x27;t already exist, create a new file and name it <code>AndroidManifest.xml</code>.</li>\n<li>Paste the following XML into the file, or, if you already have one, add the new keys from this XML to it.</li>\n<li>Make sure to replace &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in <code>SequenceConfig</code></li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   &lt;?</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">xml</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> version</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> encoding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;utf-8&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">manifest</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">     xmlns:android</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">     xmlns:tools</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://schemas.android.com/tools&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   &gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">     &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">application</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">activity</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">         android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;com.unity3d.player.UnityPlayerActivity&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">         android:theme</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;@style/UnityThemeSelector&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       &gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">action</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.action.MAIN&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.LAUNCHER&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">action</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.action.VIEW&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.DEFAULT&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.BROWSABLE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">data</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:scheme</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sdk-powered-by-sequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">/&gt; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">&lt;!-- substitute &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in `SequenceConfig` --&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">activity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">     &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">application</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">manifest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<p>b) Note: Unity 2022 versions prior to <code>2022.3.7f1</code> and 2023 versions prior to <code>2023.1.7f1</code>, <code>2023.2.0b3</code>, or <code>2023.3.0a1</code> contain a bug with Android deep-linking. Please use this XML instead.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;?</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">xml</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> version</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> encoding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;utf-8&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">manifest</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">        xmlns:android</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">        xmlns:tools</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://schemas.android.com/tools&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">application</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">activity</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">                android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;com.unity3d.player.UnityPlayerActivity&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">                android:theme</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;@style/UnityThemeSelector&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">                android:exported</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;true&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">action</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.action.MAIN&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.LAUNCHER&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">meta-data</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unityplayer.UnityActivity&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;true&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">action</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.action.VIEW&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.DEFAULT&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">category</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;android.intent.category.BROWSABLE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">data</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> android:scheme</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sdk-powered-by-sequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">/&gt; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">&lt;!-- substitute &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in `SequenceConfig` --&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">intent-filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">activity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">application</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">manifest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<p>i.e. add <code>&lt;meta-data android:name=&quot;unityplayer.UnityActivity&quot; android:value=&quot;true&quot; /&gt;</code> after your first <code>intent-filter</code>. Please see <a href=\"https://forum.unity.com/threads/deep-linking-in-unity-2022-the-app-is-restarted.1447300/\">https://forum.unity.com/threads/deep-linking-in-unity-2022-the-app-is-restarted.1447300/</a> for more info.</p>\n","isPage":false,"text":"\n\nIn the Project window, browse to Assets &gt; Plugins &gt; Android.\n\na) Note: in Unity versions 2021.2 and up this path doesn&#x27;t exist by default. Please navigate to Edit &gt; Project Settings &gt; Player and under the Android Publishing Settings, enable Custom Main Manifest in the Build section. See https://docs.unity3d.com/Manual/deep-linking-android.html for more info.\n\nIf it doesn&#x27;t already exist, create a new file and name it AndroidManifest.xml.\nPaste the following XML into the file, or, if you already have one, add the new keys from this XML to it.\nMake sure to replace &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in SequenceConfig\n\n   &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n   &lt;manifest\n     xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n     xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n   &gt;\n     &lt;application&gt;\n       &lt;activity\n         android:name=&quot;com.unity3d.player.UnityPlayerActivity&quot;\n         android:theme=&quot;@style/UnityThemeSelector&quot;\n       &gt;\n         &lt;intent-filter&gt;\n           &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n           &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n         &lt;/intent-filter&gt;\n         &lt;intent-filter&gt;\n           &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n           &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n           &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n           &lt;data android:scheme=&quot;sdk-powered-by-sequence&quot;/&gt; &lt;!-- substitute &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in `SequenceConfig` --&gt;\n         &lt;/intent-filter&gt;\n       &lt;/activity&gt;\n     &lt;/application&gt;\n   &lt;/manifest&gt;\nb) Note: Unity 2022 versions prior to 2022.3.7f1 and 2023 versions prior to 2023.1.7f1, 2023.2.0b3, or 2023.3.0a1 contain a bug with Android deep-linking. Please use this XML instead.\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest\n        xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n        xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n&gt;\n    &lt;application&gt;\n        &lt;activity\n                android:name=&quot;com.unity3d.player.UnityPlayerActivity&quot;\n                android:theme=&quot;@style/UnityThemeSelector&quot;\n                android:exported=&quot;true&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n            &lt;meta-data android:name=&quot;unityplayer.UnityActivity&quot; android:value=&quot;true&quot; /&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n                &lt;data android:scheme=&quot;sdk-powered-by-sequence&quot;/&gt; &lt;!-- substitute &#x27;sdk-powered-by-sequence&#x27; with the Url Scheme you set in `SequenceConfig` --&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\ni.e. add &lt;meta-data android:name=&quot;unityplayer.UnityActivity&quot; android:value=&quot;true&quot; /&gt; after your first intent-filter. Please see https://forum.unity.com/threads/deep-linking-in-unity-2022-the-app-is-restarted.1447300/ for more info.\n","title":"Android","titles":["Authentication","2. Social Sign in"]},"118":{"href":"/sdk/unity/04-authentication#webgl","html":"\n<p>Coming soon.</p>\n","isPage":false,"text":"\nComing soon.\n","title":"WebGL","titles":["Authentication","2. Social Sign in"]},"119":{"href":"/sdk/unity/04-authentication#connecting-with-waas","html":"\n<p>Once we&#x27;ve received the <code>idToken</code> from either email login or social sign in, the SDK will handle connecting with WaaS servers for you. If you&#x27;re curious how this is done, please see <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/WaaS/WaaSLogin.cs#L88\"><code>ConnectToWaaS</code> in <code>WaaSLogin.cs</code></a>.\nYou&#x27;ll want to subscribe to the <code>WaaSWallet.OnWaaSWalletCreated</code> event. This can be done with the following code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>WaaSWallet.OnWaaSWalletCreated += OnWaaSWalletCreatedHandler;</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnWaaSWalletCreatedHandler(WaaSWallet wallet) {</span></span>\n<span class=\"line\"><span>  // Do something</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>where <code>OnWaaSWalletCreatedHandler</code> is a function accepting a <code>WaaSWallet</code> as it&#x27;s only parameter. If you&#x27;re unfamiliar with working with events in Unity, check out this great <a href=\"https://www.reddit.com/r/gamedev/comments/u3hz2v/how_to_use_events_a_supersimple_unity_example/\">Reddit post</a>!</p>\n<p>Congratulations! You&#x27;ve just connected your user with WaaS, creating them a new account and non-custodial smart contract wallet as needed.</p>","isPage":false,"text":"\nOnce we&#x27;ve received the idToken from either email login or social sign in, the SDK will handle connecting with WaaS servers for you. If you&#x27;re curious how this is done, please see ConnectToWaaS in WaaSLogin.cs.\nYou&#x27;ll want to subscribe to the WaaSWallet.OnWaaSWalletCreated event. This can be done with the following code snippet:\nWaaSWallet.OnWaaSWalletCreated += OnWaaSWalletCreatedHandler;\n\npublic void OnWaaSWalletCreatedHandler(WaaSWallet wallet) {\n  // Do something\n}\nwhere OnWaaSWalletCreatedHandler is a function accepting a WaaSWallet as it&#x27;s only parameter. If you&#x27;re unfamiliar with working with events in Unity, check out this great Reddit post!\nCongratulations! You&#x27;ve just connected your user with WaaS, creating them a new account and non-custodial smart contract wallet as needed.","title":"Connecting with WaaS","titles":["Authentication"]},"120":{"href":"/sdk/unity/05-write-to-blockchain#write-to-blockchain","html":"</header>\n<p>The blockchain can be thought of as a general-purpose, publically viewable and verified, database. To write to a blockchain, similar to with a typical database, you must make a <u>transaction</u>.</p>\n<p>Typically, creating a blockchain transaction is rather complex, but WaaS handles that complexity for you and exposes 5 types of <code>Transactions</code>.</p>\n<p>Sending a transaction is an <a href=\"https://medium.com/@sonusprocks/async-await-in-c-unity-explained-in-easy-words-571ebb6a9369\">asynchronous Task</a>. You can use <code>await</code> when calling <code>WaaSWallet.SendTransaction</code> from within an async Task if you wish to obtain the <code>TransactionReturn</code> object directly. Or, you can take the recommended approach which is to setup handler functions for the <code>WaaSWallet.OnSendTransactionComplete</code> and <code>WaaSWallet.OnSendTransactionFailed</code> events and call the <code>WaaSWallet.SendTransaction</code> method from anywhere (without await). For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>public void OnSendTransactionCompleteHandler(SuccessfulTransactionReturn result) {</span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnSendTransactionFailedHandler(FailedTransactionReturn result) {</span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnWaaSWalletCreatedHander(WaaSWallet wallet) {</span></span>\n<span class=\"line\"><span>    wallet.OnSendTransactionComplete += OnSendTransactionCompleteHandler;</span></span>\n<span class=\"line\"><span>    wallet.OnSendTransactionFailed += OnSendTransactionFailedHandler;</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>If you&#x27;re unfamiliar with working with events in Unity, check out this great <a href=\"https://www.reddit.com/r/gamedev/comments/u3hz2v/how_to_use_events_a_supersimple_unity_example/\">Reddit post</a>!</p>\n","isPage":true,"text":"\nThe blockchain can be thought of as a general-purpose, publically viewable and verified, database. To write to a blockchain, similar to with a typical database, you must make a transaction.\nTypically, creating a blockchain transaction is rather complex, but WaaS handles that complexity for you and exposes 5 types of Transactions.\nSending a transaction is an asynchronous Task. You can use await when calling WaaSWallet.SendTransaction from within an async Task if you wish to obtain the TransactionReturn object directly. Or, you can take the recommended approach which is to setup handler functions for the WaaSWallet.OnSendTransactionComplete and WaaSWallet.OnSendTransactionFailed events and call the WaaSWallet.SendTransaction method from anywhere (without await). For example:\npublic void OnSendTransactionCompleteHandler(SuccessfulTransactionReturn result) {\n    // Do something\n}\n\npublic void OnSendTransactionFailedHandler(FailedTransactionReturn result) {\n    // Do something\n}\n\npublic void OnWaaSWalletCreatedHander(WaaSWallet wallet) {\n    wallet.OnSendTransactionComplete += OnSendTransactionCompleteHandler;\n    wallet.OnSendTransactionFailed += OnSendTransactionFailedHandler;\n}\nIf you&#x27;re unfamiliar with working with events in Unity, check out this great Reddit post!\n","title":"Write to Blockchain","titles":[]},"121":{"href":"/sdk/unity/05-write-to-blockchain#rawtransaction","html":"\n<p>The most basic form of a <code>Transaction</code>, a raw transaction is very useful to send ETH or the gas currency of the network you are interacting with to an <code>Address</code>.</p>\n<p>For example, to send one MATIC to <code>0x9766bf76b2E3e7BCB8c61410A3fC873f1e89b43f</code> you can use this snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(</span></span>\n<span class=\"line\"><span>    Chain.Polygon,</span></span>\n<span class=\"line\"><span>    new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(&quot;0x9766bf76b2E3e7BCB8c61410A3fC873f1e89b43f&quot;, DecimalNormalizer.Normalize(1))</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>where _wallet is a WaaSWallet.</p>\n<p>Note: the <a href=\"https://ethereum.org/en/developers/docs/evm/\">EVM</a> does not support floating point numbers. As a result, token (and gas currency) values are represented by whole numbers and a &quot;decimals&quot; value. 1 ETH (or in the example above 1 MATIC) is represented as <code>1000000000000000000</code> (1 * 10^18) as ETH, MATIC, and most gas currencies have a &quot;decimals&quot; value of 18. <code>DecimalNormalizer.Normalize</code> (above) is a basic helper function that will return <code>input value * 10^decimals</code> and optionally accepts a &quot;decimals&quot; value as a second parameter (defaulting to 18 when not provided).</p>\n<p>Additionally, you can include data with a raw transaction in hexadecimal format as a string. For more on this, please see the advanced section of this documentation.</p>\n","isPage":false,"text":"\nThe most basic form of a Transaction, a raw transaction is very useful to send ETH or the gas currency of the network you are interacting with to an Address.\nFor example, to send one MATIC to 0x9766bf76b2E3e7BCB8c61410A3fC873f1e89b43f you can use this snippet:\n_wallet.SendTransaction(\n    Chain.Polygon,\n    new SequenceSDK.WaaS.Transaction[]\n    {\n        new RawTransaction(&quot;0x9766bf76b2E3e7BCB8c61410A3fC873f1e89b43f&quot;, DecimalNormalizer.Normalize(1))\n    });\nwhere _wallet is a WaaSWallet.\nNote: the EVM does not support floating point numbers. As a result, token (and gas currency) values are represented by whole numbers and a &quot;decimals&quot; value. 1 ETH (or in the example above 1 MATIC) is represented as 1000000000000000000 (1 * 10^18) as ETH, MATIC, and most gas currencies have a &quot;decimals&quot; value of 18. DecimalNormalizer.Normalize (above) is a basic helper function that will return input value * 10^decimals and optionally accepts a &quot;decimals&quot; value as a second parameter (defaulting to 18 when not provided).\nAdditionally, you can include data with a raw transaction in hexadecimal format as a string. For more on this, please see the advanced section of this documentation.\n","title":"RawTransaction","titles":["Write to Blockchain"]},"122":{"href":"/sdk/unity/05-write-to-blockchain#senderc20","html":"\n<p>An <a href=\"https://docs.openzeppelin.com/contracts/4.x/erc20\">ERC20</a> token is the fungible token standard. You can easily deploy an ERC20 contract and mint tokens using our <a href=\"https://sequence.build/\">Builder</a>. Learn how in our <a href=\"https://docs.sequence.xyz/builder/overview\">Builder documentation</a>.</p>\n<p>To send an ERC20 token transaction, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new SendERC20(</span></span>\n<span class=\"line\"><span>            erc20TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            AmountAsString),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>Note: as above, it is recommended to use <code>DecimalNormalizer.Normalize</code> to convert the amount from human readable format to EVM format. Please make sure to include the optional &quot;decimals&quot; int parameter if your ERC20 token has a &quot;decimals&quot; value that is not 18. If you&#x27;re not sure how many &quot;decimals&quot; your ERC20 has, this can be easily read on the Builder using the &quot;decimals&quot; method under &quot;Read Contract&quot;.</p>\n","isPage":false,"text":"\nAn ERC20 token is the fungible token standard. You can easily deploy an ERC20 contract and mint tokens using our Builder. Learn how in our Builder documentation.\nTo send an ERC20 token transaction, you can use this code snippet:\n_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]\n    {\n        new SendERC20(\n            erc20TokenAddress,\n            ToAddress,\n            AmountAsString),\n    });\nNote: as above, it is recommended to use DecimalNormalizer.Normalize to convert the amount from human readable format to EVM format. Please make sure to include the optional &quot;decimals&quot; int parameter if your ERC20 token has a &quot;decimals&quot; value that is not 18. If you&#x27;re not sure how many &quot;decimals&quot; your ERC20 has, this can be easily read on the Builder using the &quot;decimals&quot; method under &quot;Read Contract&quot;.\n","title":"sendERC20","titles":["Write to Blockchain"]},"123":{"href":"/sdk/unity/05-write-to-blockchain#complex-erc20-interactions","html":"\n<p>For interactions with ERC20 tokens outside of basic transfers, you&#x27;ll want to use our <code>SequenceEthereum</code> library provided with the SDK. We&#x27;ve created ERC20 smart contract wrapper functions for your convenience that allow you to create and send <code>RawTransactions</code> with WaaS.</p>\n<p>First, you&#x27;ll need to create an <code>ERC20</code> object by providing a contract address and optionally, an <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#json\">ABI</a> string, if you are using a custom variation of the ERC20 standard (not recommended).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC20 myToken = new ERC20(myTokenAddress);</span></span></code></pre>\n<p>with this reference, you&#x27;ll have access to all of the methods implemented by the ERC20 class. Any method that returns a <code>CallContractFunction</code>, e.g. <code>Mint</code>, can be used when creating a RawTransaction with WaaS. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC20 myToken = new ERC20(myTokenAddress);</span></span>\n<span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(myToken.Mint(toAddress, DecimalNormalizer.NormalizeAsBigInteger(amount))),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nFor interactions with ERC20 tokens outside of basic transfers, you&#x27;ll want to use our SequenceEthereum library provided with the SDK. We&#x27;ve created ERC20 smart contract wrapper functions for your convenience that allow you to create and send RawTransactions with WaaS.\nFirst, you&#x27;ll need to create an ERC20 object by providing a contract address and optionally, an ABI string, if you are using a custom variation of the ERC20 standard (not recommended).\nERC20 myToken = new ERC20(myTokenAddress);\nwith this reference, you&#x27;ll have access to all of the methods implemented by the ERC20 class. Any method that returns a CallContractFunction, e.g. Mint, can be used when creating a RawTransaction with WaaS. For example:\nERC20 myToken = new ERC20(myTokenAddress);\n_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]\n    {\n        new RawTransaction(myToken.Mint(toAddress, DecimalNormalizer.NormalizeAsBigInteger(amount))),\n    });\n","title":"Complex ERC20 Interactions","titles":["Write to Blockchain","sendERC20"]},"124":{"href":"/sdk/unity/05-write-to-blockchain#senderc721","html":"\n<p>An <a href=\"https://docs.openzeppelin.com/contracts/4.x/erc721\">ERC721</a> token is the non-fungible standard, you&#x27;ve probably heard of them as NFTs. You can easily deploy an ERC721 contract and mint tokens using our <a href=\"https://sequence.build/\">Builder</a>. Learn how in our <a href=\"https://docs.sequence.xyz/builder/overview\">Builder documentation</a>.</p>\n<p>To send an ERC721 token transaction, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new SendERC721(</span></span>\n<span class=\"line\"><span>            erc721TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            TokenIdAsString),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nAn ERC721 token is the non-fungible standard, you&#x27;ve probably heard of them as NFTs. You can easily deploy an ERC721 contract and mint tokens using our Builder. Learn how in our Builder documentation.\nTo send an ERC721 token transaction, you can use this code snippet:\n_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]\n    {\n        new SendERC721(\n            erc721TokenAddress,\n            ToAddress,\n            TokenIdAsString),\n    });\n","title":"sendERC721","titles":["Write to Blockchain"]},"125":{"href":"/sdk/unity/05-write-to-blockchain#complex-erc721-interactions","html":"\n<p>For interactions with ERC721 tokens outside of basic transfers, you&#x27;ll want to use our <code>SequenceEthereum</code> library provided with the SDK. We&#x27;ve created ERC21 smart contract wrapper functions for your convenience that allow you to create and send <code>RawTransactions</code> with WaaS.</p>\n<p>First, you&#x27;ll need to create an <code>ERC721</code> object by providing a contract address and optionally, an <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#json\">ABI</a> string, if you are using a custom variation of the ERC721 standard (not recommended).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC721 myToken = new ERC721(myTokenAddress);</span></span></code></pre>\n<p>with this reference, you&#x27;ll have access to all of the methods implemented by the ERC721 class. Any method that returns a <code>CallContractFunction</code>, e.g. <code>SafeMint</code>, can be used when creating a RawTransaction with WaaS. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC721 myToken = new ERC721(myTokenAddress);</span></span>\n<span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(myToken.SafeMint(toAddress)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nFor interactions with ERC721 tokens outside of basic transfers, you&#x27;ll want to use our SequenceEthereum library provided with the SDK. We&#x27;ve created ERC21 smart contract wrapper functions for your convenience that allow you to create and send RawTransactions with WaaS.\nFirst, you&#x27;ll need to create an ERC721 object by providing a contract address and optionally, an ABI string, if you are using a custom variation of the ERC721 standard (not recommended).\nERC721 myToken = new ERC721(myTokenAddress);\nwith this reference, you&#x27;ll have access to all of the methods implemented by the ERC721 class. Any method that returns a CallContractFunction, e.g. SafeMint, can be used when creating a RawTransaction with WaaS. For example:\nERC721 myToken = new ERC721(myTokenAddress);\n_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]\n    {\n        new RawTransaction(myToken.SafeMint(toAddress)),\n    });\n","title":"Complex ERC721 Interactions","titles":["Write to Blockchain","sendERC721"]},"126":{"href":"/sdk/unity/05-write-to-blockchain#senderc1155","html":"\n<p>An <a href=\"https://docs.openzeppelin.com/contracts/4.x/api/token/erc1155\">ERC1155</a> token is the multi token standard, often referred to as SFTs (semi-fungible tokens). As <a href=\"https://eips.ethereum.org/EIPS/eip-1155\">co-creators of the ERC1155 standard</a> we are firm believers in its unparalleled usefulness for games. You can easily deploy an ERC1155 contract and mint tokens using our <a href=\"https://sequence.build/\">Builder</a>. Learn how in our <a href=\"https://docs.sequence.xyz/builder/overview\">Builder documentation</a>.</p>\n<p>To send an ERC1155 token transaction, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new SendERC1155(</span></span>\n<span class=\"line\"><span>            erc1155TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            new SendERC1155Values[]</span></span>\n<span class=\"line\"><span>            {</span></span>\n<span class=\"line\"><span>                new SendERC1155Values(TokenIdAsString, AmountAsString),</span></span>\n<span class=\"line\"><span>                ...</span></span>\n<span class=\"line\"><span>            }),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>Note: you can send multiple token ids from the same ERC1155 contract in a single transaction by including multiple <code>SendERC1155Values</code> objects in the transaction</p>\n","isPage":false,"text":"\nAn ERC1155 token is the multi token standard, often referred to as SFTs (semi-fungible tokens). As co-creators of the ERC1155 standard we are firm believers in its unparalleled usefulness for games. You can easily deploy an ERC1155 contract and mint tokens using our Builder. Learn how in our Builder documentation.\nTo send an ERC1155 token transaction, you can use this code snippet:\n_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]\n    {\n        new SendERC1155(\n            erc1155TokenAddress,\n            ToAddress,\n            new SendERC1155Values[]\n            {\n                new SendERC1155Values(TokenIdAsString, AmountAsString),\n                ...\n            }),\n    });\nNote: you can send multiple token ids from the same ERC1155 contract in a single transaction by including multiple SendERC1155Values objects in the transaction\n","title":"sendERC1155","titles":["Write to Blockchain"]},"127":{"href":"/sdk/unity/05-write-to-blockchain#complex-erc1155-interactions","html":"\n<p>For interactions with ERC1155 tokens outside of basic transfers, you&#x27;ll want to use our <code>SequenceEthereum</code> library provided with the SDK. We&#x27;ve created ERC1155 smart contract wrapper functions for your convenience that allow you to create and send <code>RawTransactions</code> with WaaS.</p>\n<p>First, you&#x27;ll need to create an <code>ERC1155</code> object by providing a contract address and optionally, an <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#json\">ABI</a> string, if you are using a custom variation of the ERC1155 standard (not recommended).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC1155 myToken = new ERC1155(myTokenAddress);</span></span></code></pre>\n<p>with this reference, you&#x27;ll have access to all of the methods implemented by the ERC1155 class. Any method that returns a <code>CallContractFunction</code>, e.g. <code>Mint</code>, can be used when creating a RawTransaction with WaaS. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC1155 myToken = new ERC1155(myTokenAddress);</span></span>\n<span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(myToken.Mint(toAddress, tokenId, amount)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nFor interactions with ERC1155 tokens outside of basic transfers, you&#x27;ll want to use our SequenceEthereum library provided with the SDK. We&#x27;ve created ERC1155 smart contract wrapper functions for your convenience that allow you to create and send RawTransactions with WaaS.\nFirst, you&#x27;ll need to create an ERC1155 object by providing a contract address and optionally, an ABI string, if you are using a custom variation of the ERC1155 standard (not recommended).\nERC1155 myToken = new ERC1155(myTokenAddress);\nwith this reference, you&#x27;ll have access to all of the methods implemented by the ERC1155 class. Any method that returns a CallContractFunction, e.g. Mint, can be used when creating a RawTransaction with WaaS. For example:\nERC1155 myToken = new ERC1155(myTokenAddress);\n_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]\n    {\n        new RawTransaction(myToken.Mint(toAddress, tokenId, amount)),\n    });\n","title":"Complex ERC1155 Interactions","titles":["Write to Blockchain","sendERC1155"]},"128":{"href":"/sdk/unity/05-write-to-blockchain#delayedencode","html":"\n<p>When calling a smart contract on an EVM-based network, the client goes through a complex process known as &quot;ABI encoding&quot; where the function signature you want to call as well as the parameters you&#x27;re providing are encoded into a binary format. This process is complicated and error-prone so we&#x27;ve abstracted it all away so that you don&#x27;t have to deal with it. But, if you&#x27;re curious to learn how it works, please see <a href=\"https://docs.soliditylang.org/en/develop/abi-spec.html\">this document</a>.</p>\n<p>A DelayedEncode transaction allows you to call any method on an arbitrary smart contract, allowing us to handle the complicated ABI encoding process.</p>\n<p>To send a DelayedEncode transaction, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new DelayedEncode(ContractAddress, ValueAsString, new DelayedEncodeData(</span></span>\n<span class=\"line\"><span>            ContractABIAsString,</span></span>\n<span class=\"line\"><span>            ParametersAsObjectArray,</span></span>\n<span class=\"line\"><span>            FunctionNameAsString)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>Let&#x27;s examine the above to get a better understanding of some of the variables that may be non-obvious.</p>\n<p>ValueAsString: This will <i>usually</i> be &quot;0&quot; unless you are calling a <a href=\"https://solidity-by-example.org/payable/\">payable method</a> denoted by the <code>payable</code> keyword in the smart contract definition. If you are calling a payable method, it is recommended to use <code>DecimalNormalizer.Normalize</code> to convert the amount from human readable format to EVM format.</p>\n<p>ContractABIAsString: This can either be the entire <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#json\">ABI</a> or just the function you plan on interacting with. If you&#x27;re not familiar with ABIs, we&#x27;d recommend copy-pasting the function signature (with parameters) from the contract source code on Etherscan (or the appropriate block explorer for your network) and removing the whitespace and variable names.</p>\n<p>ParametersAsObjectArray: The parameters you want to provide to the method you wish to call. No need to provide the parameter names, just their values in the order they appear in the ABI. Provide parameters in string format when in doubt.</p>\n<p>FunctionNameAsString: The name of the function you want to call as it appears in the ABI (or source code). Exclude parentheses and parameters.</p>\n<p>Putting this together, an example of using delayed encode to call the &quot;mint&quot; function on an ERC20 would look like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new DelayedEncode(ContractAddress, &quot;0&quot;, new DelayedEncodeData(</span></span>\n<span class=\"line\"><span>            &quot;mint(address,uint256)&quot;,</span></span>\n<span class=\"line\"><span>            new object[]</span></span>\n<span class=\"line\"><span>            {</span></span>\n<span class=\"line\"><span>                ToAddress, DecimalNormalizer.Normalize(1)</span></span>\n<span class=\"line\"><span>            },</span></span>\n<span class=\"line\"><span>            &quot;mint&quot;)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n","isPage":false,"text":"\nWhen calling a smart contract on an EVM-based network, the client goes through a complex process known as &quot;ABI encoding&quot; where the function signature you want to call as well as the parameters you&#x27;re providing are encoded into a binary format. This process is complicated and error-prone so we&#x27;ve abstracted it all away so that you don&#x27;t have to deal with it. But, if you&#x27;re curious to learn how it works, please see this document.\nA DelayedEncode transaction allows you to call any method on an arbitrary smart contract, allowing us to handle the complicated ABI encoding process.\nTo send a DelayedEncode transaction, you can use this code snippet:\n_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]\n    {\n        new DelayedEncode(ContractAddress, ValueAsString, new DelayedEncodeData(\n            ContractABIAsString,\n            ParametersAsObjectArray,\n            FunctionNameAsString)),\n    });\nLet&#x27;s examine the above to get a better understanding of some of the variables that may be non-obvious.\nValueAsString: This will usually be &quot;0&quot; unless you are calling a payable method denoted by the payable keyword in the smart contract definition. If you are calling a payable method, it is recommended to use DecimalNormalizer.Normalize to convert the amount from human readable format to EVM format.\nContractABIAsString: This can either be the entire ABI or just the function you plan on interacting with. If you&#x27;re not familiar with ABIs, we&#x27;d recommend copy-pasting the function signature (with parameters) from the contract source code on Etherscan (or the appropriate block explorer for your network) and removing the whitespace and variable names.\nParametersAsObjectArray: The parameters you want to provide to the method you wish to call. No need to provide the parameter names, just their values in the order they appear in the ABI. Provide parameters in string format when in doubt.\nFunctionNameAsString: The name of the function you want to call as it appears in the ABI (or source code). Exclude parentheses and parameters.\nPutting this together, an example of using delayed encode to call the &quot;mint&quot; function on an ERC20 would look like this:\n_wallet.SendTransaction(Chain.Polygon, new SequenceSDK.WaaS.Transaction[]\n    {\n        new DelayedEncode(ContractAddress, &quot;0&quot;, new DelayedEncodeData(\n            &quot;mint(address,uint256)&quot;,\n            new object[]\n            {\n                ToAddress, DecimalNormalizer.Normalize(1)\n            },\n            &quot;mint&quot;)),\n    });\n","title":"DelayedEncode","titles":["Write to Blockchain"]},"129":{"href":"/sdk/unity/05-write-to-blockchain#batch-transactions","html":"\n<p>Using the magic of the Sequence Smart Contract wallet, our SDK allows you to seemlessly batch transactions together. Batching transactions together is extremely beneficial as it provides material gas savings and allows you to create complex transactions, that either all pass or all fail, without deploying custom smart contracts for each bespoke use case, opening a whole new realm of design possibilities!</p>\n<p>Sending a batch transaction is easy! Simply include multiple transactions, of any type, in your transaction array when making the <code>SendTransaction</code> request.</p>\n<p>For example - sending a transaction of each type in a batch:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SendTransaction(</span></span>\n<span class=\"line\"><span>    Chain.Polygon,</span></span>\n<span class=\"line\"><span>    new SequenceSDK.WaaS.Transaction[]</span></span>\n<span class=\"line\"><span>    {</span></span>\n<span class=\"line\"><span>        new RawTransaction(ToAddress, DecimalNormalizer.Normalize(1)),</span></span>\n<span class=\"line\"><span>        new SendERC20(</span></span>\n<span class=\"line\"><span>            erc20TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            AmountAsString),</span></span>\n<span class=\"line\"><span>        new RawTransaction(new ERC20(erc20TokenAddress).Burn(DecimalNormalizer.NormalizeAsBigInteger(amount))),</span></span>\n<span class=\"line\"><span>        new SendERC721(</span></span>\n<span class=\"line\"><span>            erc721TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            TokenIdAsString),</span></span>\n<span class=\"line\"><span>        new SendERC1155(</span></span>\n<span class=\"line\"><span>            erc1155TokenAddress,</span></span>\n<span class=\"line\"><span>            ToAddress,</span></span>\n<span class=\"line\"><span>            new SendERC1155Values[]</span></span>\n<span class=\"line\"><span>            {</span></span>\n<span class=\"line\"><span>                new SendERC1155Values(TokenIdAsString, AmountAsString),</span></span>\n<span class=\"line\"><span>                ...</span></span>\n<span class=\"line\"><span>            }),</span></span>\n<span class=\"line\"><span>        new DelayedEncode(ContractAddress, ValueAsString, new DelayedEncodeData(</span></span>\n<span class=\"line\"><span>            ContractABIAsString,</span></span>\n<span class=\"line\"><span>            ParametersAsObjectArray,</span></span>\n<span class=\"line\"><span>            FunctionNameAsString)),</span></span>\n<span class=\"line\"><span>    });</span></span></code></pre>\n<p>Since these transactions are all batched into a single transaction by the Sequence Smart Contract Wallet before being submitted to the network, you will receive only one transaction receipt.</p>","isPage":false,"text":"\nUsing the magic of the Sequence Smart Contract wallet, our SDK allows you to seemlessly batch transactions together. Batching transactions together is extremely beneficial as it provides material gas savings and allows you to create complex transactions, that either all pass or all fail, without deploying custom smart contracts for each bespoke use case, opening a whole new realm of design possibilities!\nSending a batch transaction is easy! Simply include multiple transactions, of any type, in your transaction array when making the SendTransaction request.\nFor example - sending a transaction of each type in a batch:\n_wallet.SendTransaction(\n    Chain.Polygon,\n    new SequenceSDK.WaaS.Transaction[]\n    {\n        new RawTransaction(ToAddress, DecimalNormalizer.Normalize(1)),\n        new SendERC20(\n            erc20TokenAddress,\n            ToAddress,\n            AmountAsString),\n        new RawTransaction(new ERC20(erc20TokenAddress).Burn(DecimalNormalizer.NormalizeAsBigInteger(amount))),\n        new SendERC721(\n            erc721TokenAddress,\n            ToAddress,\n            TokenIdAsString),\n        new SendERC1155(\n            erc1155TokenAddress,\n            ToAddress,\n            new SendERC1155Values[]\n            {\n                new SendERC1155Values(TokenIdAsString, AmountAsString),\n                ...\n            }),\n        new DelayedEncode(ContractAddress, ValueAsString, new DelayedEncodeData(\n            ContractABIAsString,\n            ParametersAsObjectArray,\n            FunctionNameAsString)),\n    });\nSince these transactions are all batched into a single transaction by the Sequence Smart Contract Wallet before being submitted to the network, you will receive only one transaction receipt.","title":"Batch Transactions","titles":["Write to Blockchain"]},"130":{"href":"/sdk/unity/06-read-from-blockchain#read-from-blockchain","html":"</header>\n<p>Reading from the blockchain is done using Unity-Native implementation of our <a href=\"/api/indexer\">Sequence Indexer</a>.</p>\n<p>We recommend creating an instance of the <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Indexer/ChainIndexer.cs\"><code>ChainIndexer</code> class</a>. This will expose you to all the functionality offered by the <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Indexer/IIndexer.cs\"><code>IIndexer</code> interface</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IIndexer polygonIndexer = new ChainIndexer(Chain.Polygon);</span></span></code></pre>\n<p><code>ChainIndexer</code> is essentially a wrapper of the <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Indexer/Indexer.cs\"><code>Indexer</code> static class</a> which is fully documented here: <a href=\"https://docs.sequence.xyz/unity-sdk/indexer/guides\">https://docs.sequence.xyz/unity-sdk/indexer/guides</a>.</p>","isPage":true,"text":"\nReading from the blockchain is done using Unity-Native implementation of our Sequence Indexer.\nWe recommend creating an instance of the ChainIndexer class. This will expose you to all the functionality offered by the IIndexer interface.\nIIndexer polygonIndexer = new ChainIndexer(Chain.Polygon);\nChainIndexer is essentially a wrapper of the Indexer static class which is fully documented here: https://docs.sequence.xyz/unity-sdk/indexer/guides.","title":"Read from Blockchain","titles":[]},"131":{"href":"/sdk/unity/07-sign-messages#sign-messages","html":"</header>\n<p>Signing a message is an <a href=\"https://medium.com/@sonusprocks/async-await-in-c-unity-explained-in-easy-words-571ebb6a9369\">asynchronous Task</a>. You can use <code>await</code> when calling <code>WaaSWallet.SignMessage</code> from within an async Task if you wish to obtain the <code>SignMessageReturn</code> object directly. Or, you can take the recommended approach which is to setup a handler function for the <code>WaaSWallet.OnSignMessageComplete</code> event and call the <code>WaaSWallet.SignMessage</code> method from anywhere (without await). For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>public void OnSignMessageCompleteHandler(string signature) {</span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnWaaSWalletCreatedHander(WaaSWallet wallet) {</span></span>\n<span class=\"line\"><span>    wallet.OnSignMessageComplete += OnSignMessageCompleteHandler;</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>_wallet.SignMessage(Chain.Polygon, &quot;Message to sign&quot;);</span></span></code></pre>\n<p>If you&#x27;re unfamiliar with working with events in Unity, check out this great <a href=\"https://www.reddit.com/r/gamedev/comments/u3hz2v/how_to_use_events_a_supersimple_unity_example/\">Reddit post</a>!</p>","isPage":true,"text":"\nSigning a message is an asynchronous Task. You can use await when calling WaaSWallet.SignMessage from within an async Task if you wish to obtain the SignMessageReturn object directly. Or, you can take the recommended approach which is to setup a handler function for the WaaSWallet.OnSignMessageComplete event and call the WaaSWallet.SignMessage method from anywhere (without await). For example:\npublic void OnSignMessageCompleteHandler(string signature) {\n    // Do something\n}\n\npublic void OnWaaSWalletCreatedHander(WaaSWallet wallet) {\n    wallet.OnSignMessageComplete += OnSignMessageCompleteHandler;\n}\n_wallet.SignMessage(Chain.Polygon, &quot;Message to sign&quot;);\nIf you&#x27;re unfamiliar with working with events in Unity, check out this great Reddit post!","title":"Sign Messages","titles":[]},"132":{"href":"/sdk/unity/08-deploy-contracts#contract-deployment","html":"</header>\n<p>While, in general, we would recommend deploying your smart contracts via the <a href=\"https://sequence.build/\">Builder</a>, we recognize that there are some use cases where deploying a smart contract from Unity (or a Made-With-Unity application) is useful.</p>\n<p>Contract deployment involves sending a transaction, which is done via an <a href=\"https://medium.com/@sonusprocks/async-await-in-c-unity-explained-in-easy-words-571ebb6a9369\">asynchronous Task</a>. You can use <code>await</code> when calling <code>WaaSWallet.DeployContract</code> from within an async Task if you wish to obtain the <code>ContractDeploymentReturn</code> object directly. Or, you can take the recommended approach which is to setup handler functions for the <code>WaaSWallet.OnDeployContractComplete</code> and <code>WaaSWallet.OnDeployContractFailed</code> events and call the <code>WaaSWallet.DeployContract</code> method from anywhere (without await).</p>\n<p><code>WaaSWallet.DeployContract</code> is essentially a wrapper for a very special <code>WaaSWallet.SendTransaction</code> call and therefore, you can expect to still receive the <code>WaaSWallet.OnSendTransactionComplete</code> or <code>WaaSWallet.OnSendTransactionFailed</code> events in addition.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>public void OnDeployContractCompleteHandler(SuccessfulContractDeploymentReturn result) {</span></span>\n<span class=\"line\"><span>    Address newlyDeployedContractAddress = result.DeployedContractAddress;</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnDeployContractFailedHandler(FailedContractDeploymentReturn result) {</span></span>\n<span class=\"line\"><span>    // Do something</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>public void OnWaaSWalletCreatedHander(WaaSWallet wallet) {</span></span>\n<span class=\"line\"><span>    wallet.OnDeployContractComplete += OnDeployContractCompleteHandler;</span></span>\n<span class=\"line\"><span>    wallet.OnDeployContractFailed += OnDeployContractFailedHandler;</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<p>If you&#x27;re unfamiliar with working with events in Unity, check out this great <a href=\"https://www.reddit.com/r/gamedev/comments/u3hz2v/how_to_use_events_a_supersimple_unity_example/\">Reddit post</a>!</p>\n<p>To deploy a contract you&#x27;ll need to first <a href=\"https://medium.com/coinmonks/compiling-the-smart-contracts-8dcda8071638\">compile your smart contract code into bytecode</a> and add the bytecode as a hexadecimal string in one of your C# scripts.</p>\n<p>To deploy a smart contract, you can use this code snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string bytecode = &quot;Here you&#x27;ll paste your compiled bytecode&quot;</span></span>\n<span class=\"line\"><span>_wallet.DeployContract(Chain.Polygon, bytecode);</span></span></code></pre>","isPage":true,"text":"\nWhile, in general, we would recommend deploying your smart contracts via the Builder, we recognize that there are some use cases where deploying a smart contract from Unity (or a Made-With-Unity application) is useful.\nContract deployment involves sending a transaction, which is done via an asynchronous Task. You can use await when calling WaaSWallet.DeployContract from within an async Task if you wish to obtain the ContractDeploymentReturn object directly. Or, you can take the recommended approach which is to setup handler functions for the WaaSWallet.OnDeployContractComplete and WaaSWallet.OnDeployContractFailed events and call the WaaSWallet.DeployContract method from anywhere (without await).\nWaaSWallet.DeployContract is essentially a wrapper for a very special WaaSWallet.SendTransaction call and therefore, you can expect to still receive the WaaSWallet.OnSendTransactionComplete or WaaSWallet.OnSendTransactionFailed events in addition.\npublic void OnDeployContractCompleteHandler(SuccessfulContractDeploymentReturn result) {\n    Address newlyDeployedContractAddress = result.DeployedContractAddress;\n\n    // Do something\n}\n\npublic void OnDeployContractFailedHandler(FailedContractDeploymentReturn result) {\n    // Do something\n}\n\npublic void OnWaaSWalletCreatedHander(WaaSWallet wallet) {\n    wallet.OnDeployContractComplete += OnDeployContractCompleteHandler;\n    wallet.OnDeployContractFailed += OnDeployContractFailedHandler;\n}\nIf you&#x27;re unfamiliar with working with events in Unity, check out this great Reddit post!\nTo deploy a contract you&#x27;ll need to first compile your smart contract code into bytecode and add the bytecode as a hexadecimal string in one of your C# scripts.\nTo deploy a smart contract, you can use this code snippet:\nstring bytecode = &quot;Here you&#x27;ll paste your compiled bytecode&quot;\n_wallet.DeployContract(Chain.Polygon, bytecode);","title":"Contract Deployment","titles":[]},"133":{"href":"/sdk/unity/09-wallet-ui#wallet-ui","html":"</header>\n<p>As a Wallet as a Service product, this SDK requires no UI. However, as we expect some apps will still choose to provide some form of wallet UI to users, we are making efforts to provide a default UI for you to use.</p>\n<p>This UI can be found under <code>SequenceExamples</code>.</p>\n<p>To add the UI to your scene, you can add the <code>WalletPanel</code> prefab found under <code>SequenceExamples &gt; Prefabs</code>. It is opened using the Open method; you must provide an <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/WaaS/IWallet.cs\"><code>IWallet</code></a> (e.g. a <code>WaaSWallet</code>) as an argument.</p>\n<p>You&#x27;ll notice that the UI is still a work in progress and is also using mocks in some places (fetching transaction history and prices). These will be replaced in coming updates of the SDK, but please feel free to replace them on your own (and for bonus points, submit a PR!).</p>\n","isPage":true,"text":"\nAs a Wallet as a Service product, this SDK requires no UI. However, as we expect some apps will still choose to provide some form of wallet UI to users, we are making efforts to provide a default UI for you to use.\nThis UI can be found under SequenceExamples.\nTo add the UI to your scene, you can add the WalletPanel prefab found under SequenceExamples &gt; Prefabs. It is opened using the Open method; you must provide an IWallet (e.g. a WaaSWallet) as an argument.\nYou&#x27;ll notice that the UI is still a work in progress and is also using mocks in some places (fetching transaction history and prices). These will be replaced in coming updates of the SDK, but please feel free to replace them on your own (and for bonus points, submit a PR!).\n","title":"Wallet UI","titles":[]},"134":{"href":"/sdk/unity/09-wallet-ui#how-it-works","html":"\n<p>The sample Sequence UI is comprised of a few important components.</p>\n","isPage":false,"text":"\nThe sample Sequence UI is comprised of a few important components.\n","title":"How It Works","titles":["Wallet UI"]},"135":{"href":"/sdk/unity/09-wallet-ui#ui-customizability","html":"\n<p>Built on Unity&#x27;s UI system, the UI is entirely customizable. We encourage you to make it your own and &quot;beautify&quot; it to suit your app!</p>\n","isPage":false,"text":"\nBuilt on Unity&#x27;s UI system, the UI is entirely customizable. We encourage you to make it your own and &quot;beautify&quot; it to suit your app!\n","title":"UI Customizability","titles":["Wallet UI"]},"136":{"href":"/sdk/unity/09-wallet-ui#color-scheme-manager","html":"\n<p>To help you with the process, we&#x27;ve added a basic <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceExamples/Scripts/UI/ColorSchemeManager.cs\"><code>ColorSchemeManager</code> script</a> which you can experiment with in our Demo scene, which can be <a href=\"https://docs.sequence.xyz/unity-waas-sdk/installation#samples\">imported via Package Manager</a>.</p>\n<p>To use the <code>ColorSchemeManager</code>, please perform the following in edit mode.</p>\n<ol>\n<li>Create a <code>Color Scheme</code> <a href=\"https://docs.unity3d.com/Manual/class-ScriptableObject.html\">scriptable object</a> by navigating to the top bar <code>Assets &gt; Create &gt; Sequence &gt; Color Scheme</code> and give it an appropriate name.</li>\n<li>Set the desired colors in your new scriptable object - don&#x27;t forget to set the alpha values! Unity defaults these to 0.</li>\n<li>Locate the <code>ColorSchemeManager</code> MonoBehaviour in your scene in the inspector. In our demo scene, this is attached to the <code>SequenceCanvas</code> gameObject.</li>\n<li>Set your newly created scriptable object as the Color Scheme.</li>\n<li>Click &quot;Apply&quot;. Note that this may take a few seconds to apply and you <i>may</i> need to click apply multiple times due to the way Unity refreshes after changes in the inspector (version dependant).</li>\n</ol>\n<p>The <code>ColorSchemeManager</code> isn&#x27;t meant to give you perfect results and the perfect UI right out of the gate, but we hope it saves you some time on the way there!</p>\n","isPage":false,"text":"\nTo help you with the process, we&#x27;ve added a basic ColorSchemeManager script which you can experiment with in our Demo scene, which can be imported via Package Manager.\nTo use the ColorSchemeManager, please perform the following in edit mode.\n\nCreate a Color Scheme scriptable object by navigating to the top bar Assets &gt; Create &gt; Sequence &gt; Color Scheme and give it an appropriate name.\nSet the desired colors in your new scriptable object - don&#x27;t forget to set the alpha values! Unity defaults these to 0.\nLocate the ColorSchemeManager MonoBehaviour in your scene in the inspector. In our demo scene, this is attached to the SequenceCanvas gameObject.\nSet your newly created scriptable object as the Color Scheme.\nClick &quot;Apply&quot;. Note that this may take a few seconds to apply and you may need to click apply multiple times due to the way Unity refreshes after changes in the inspector (version dependant).\n\nThe ColorSchemeManager isn&#x27;t meant to give you perfect results and the perfect UI right out of the gate, but we hope it saves you some time on the way there!\n","title":"Color Scheme Manager","titles":["Wallet UI","UI Customizability"]},"137":{"href":"/sdk/unity/09-wallet-ui#more-customization-tools-coming-soon","html":"\n<p>We hope to bring you more convenience tools to help you customize the UI quicker and easier! While we have ideas of our own, nobody understands your needs better than you do, so please don&#x27;t hesitate to reach out to us with any ideas you have! Or better yet, submit a PR!</p>","isPage":false,"text":"\nWe hope to bring you more convenience tools to help you customize the UI quicker and easier! While we have ideas of our own, nobody understands your needs better than you do, so please don&#x27;t hesitate to reach out to us with any ideas you have! Or better yet, submit a PR!","title":"More Customization Tools Coming Soon","titles":["Wallet UI","UI Customizability"]},"138":{"href":"/solutions/builder/getting-started#get-started","html":"</header>\n<p>Signing up and creating a project is easy to do with Sequence Builder and should take you less than a minute. In this tutorial, we will help you sign up for Builder and then create your first project.</p>\n<p>Let&#x27;s get started!</p>\n","isPage":true,"text":"\nSigning up and creating a project is easy to do with Sequence Builder and should take you less than a minute. In this tutorial, we will help you sign up for Builder and then create your first project.\nLet&#x27;s get started!\n","title":"Get Started","titles":[]},"139":{"href":"/solutions/builder/getting-started#sign-up-for-builder","html":"\n","isPage":false,"text":"\n","title":"Sign up for Builder","titles":["Get Started"]},"140":{"href":"/solutions/builder/getting-started#step-1-go-to-sequencebuild","html":"\n<p>Go to <a href=\"https://sequence.build/\">Sequence.Build</a> and click on the <code>Start Building</code> button to get started.</p>\n<p><img src=\"/img/builder/builder_landing_page_signup_project.png\" alt=\"Sequence builder landing page\"/></p>\n","isPage":false,"text":"\nGo to Sequence.Build and click on the Start Building button to get started.\n\n","title":"Step 1: Go to sequence.build","titles":["Get Started","Sign up for Builder"]},"141":{"href":"/solutions/builder/getting-started#step-2-choose-a-sign-in-method","html":"\n<p>When you first sign in to Builder, a wallet is created for you.</p>\n<p>You may, however, already have a Sequence wallet. If you are signed in with that wallet, you will see an option to use it. This is a great way to get started.</p>\n<p>Without a wallet, you will be given a few options to sign in. You can use any of the social sign ins, or you can simply use your email to get started.</p>\n<p><img src=\"/img/builder/builder_choose_signin_signup_project.png\" alt=\"Sequence builder choose signin\"/></p>\n","isPage":false,"text":"\nWhen you first sign in to Builder, a wallet is created for you.\nYou may, however, already have a Sequence wallet. If you are signed in with that wallet, you will see an option to use it. This is a great way to get started.\nWithout a wallet, you will be given a few options to sign in. You can use any of the social sign ins, or you can simply use your email to get started.\n\n","title":"Step 2: Choose a sign in method","titles":["Get Started","Sign up for Builder"]},"142":{"href":"/solutions/builder/getting-started#step-3-sign-in-to-sequencebuild","html":"\n<p>After choosing how you would like to sign in, you will be presented with the terms of use. To read the <code>Terms of Use</code>, <code>Privacy Policy</code>, and <code>Master Services Agreement</code>, click on the respective links for each.</p>\n<p><img src=\"/img/builder/builder_accept_terms_signup_project.png\" alt=\"Sequence builder accept terms\"/></p>\n<p>Once you have read each, click through to continue.</p>\n<p>You are now signed in to Builder!</p>\n","isPage":false,"text":"\nAfter choosing how you would like to sign in, you will be presented with the terms of use. To read the Terms of Use, Privacy Policy, and Master Services Agreement, click on the respective links for each.\n\nOnce you have read each, click through to continue.\nYou are now signed in to Builder!\n","title":"Step 3: Sign in to sequence.build","titles":["Get Started","Sign up for Builder"]},"143":{"href":"/solutions/builder/getting-started#create-a-project","html":"\n<p>Everything you do in Builder is centered around each project - so let&#x27;s start one.</p>\n<p>The easiest way to start a project is to simply click <code>+ Create Project</code>.</p>\n<p><img src=\"/img/builder/builder_dashboard_signup_project.png\" alt=\"Sequence builder dashboard\"/></p>\n","isPage":false,"text":"\nEverything you do in Builder is centered around each project - so let&#x27;s start one.\nThe easiest way to start a project is to simply click + Create Project.\n\n","title":"Create a Project","titles":["Get Started"]},"144":{"href":"/solutions/builder/getting-started#step-1-enter-the-project-details","html":"\n<p>A modal will pop up, allowing you to enter details about your project. Provide a project name and, if you like, add an avatar for the project.</p>\n<p>Select the network(s) on which you would like to start deploying. This can always be changed later.</p>\n<p><img src=\"/img/builder/builder_enter_details_signup_project.png\" alt=\"Sequence builder enter details\"/></p>\n","isPage":false,"text":"\nA modal will pop up, allowing you to enter details about your project. Provide a project name and, if you like, add an avatar for the project.\nSelect the network(s) on which you would like to start deploying. This can always be changed later.\n\n","title":"Step 1: Enter the project details","titles":["Get Started","Create a Project"]},"145":{"href":"/solutions/builder/getting-started#step-2-create-the-project","html":"\n<p>Now hit the <code>Create new Project</code> button!</p>\n<p><img src=\"/img/builder/builder_project_created_signup_project.png\" alt=\"Sequence builder project created\"/></p>\n<p>Once you finish, you should now be viewing your project dashboard.</p>\n","isPage":false,"text":"\nNow hit the Create new Project button!\n\nOnce you finish, you should now be viewing your project dashboard.\n","title":"Step 2: Create the project!","titles":["Get Started","Create a Project"]},"146":{"href":"/solutions/builder/getting-started#build-things","html":"\n<p>Now that you have created a project, there is so much you can do from here! You can start exploring from your dashboard or feel free to follow along on one of these guides.</p>\n<p>TODO: Card list</p>","isPage":false,"text":"\nNow that you have created a project, there is so much you can do from here! You can start exploring from your dashboard or feel free to follow along on one of these guides.\nTODO: Card list","title":"Build things!","titles":["Get Started"]},"147":{"href":"/sdk/typescript/03-guides/01-connect-wallet#connect-wallet","html":"</header>\n<p>Sequence is a very flexible wallet which allow users multiple ways to connect / access their wallet. This includes:</p>\n<ol>\n<li>\n<p><strong>On-demand Ethereum web wallet for new users</strong> via <a href=\"https://www.npmjs.com/package/0xsequence\">0xsequence</a> npm package + <a href=\"https://sequence.app\">https://sequence.app</a> -- this option allows\ndevelopers to offer users an on-demand web3 wallet. No user install required -- any browser will <em>just work</em>, and users\ncan onboard with a familiar Web2 experience. Think of it like <em>Paypal / Stripe but for web3</em>.</p>\n</li>\n<li>\n<p><strong>Surf all of web3</strong> via <a href=\"https://chrome.google.com/webstore/detail/sequence-wallet/ocmccklecaalljlflmclidjeclpcpdim?hl=en\">Sequence Wallet Chrome Extension</a> -- users\nwho have the Sequence Wallet Chrome Extension installed are able to access any Ethereum-compatible Dapp on the Web :) Just like how MetaMask works,\nbut of course with a bunch of the benefits of Sequence.</p>\n</li>\n<li>\n<p><strong>Mobile phone access</strong> via <a href=\"https://walletconnect.com/\">WalletConnect</a> support within Sequence Wallet -- users are able to communicate with their wallets remotely\nvia the awesome Wallet Connect protocol. This is an excellent option if using Sequence Wallet from your mobile phone and want to connect\nyour wallet to a desktop dapp.</p>\n</li>\n</ol>\n<p>Sequence Wallet is built on Web Browser (W3C) and Ethereum web3 standards -- and is available everywhere that a modern browser is able to run.\nWe&#x27;ve carefully designed the wallet for simple onboarding, while maintaining security for users, and allowing users to progressively\nincrease the level of their security through additional keys and measures.</p>\n<p>This means, that if you&#x27;ve developed a dapp to work with MetaMask, then Sequence will work too without any changes. If you&#x27;re\nusing web3.js or ethers.js, Sequence will just work too. This is the beauty of interoperability on web3 :)</p>\n","isPage":true,"text":"\nSequence is a very flexible wallet which allow users multiple ways to connect / access their wallet. This includes:\n\n\nOn-demand Ethereum web wallet for new users via 0xsequence npm package + https://sequence.app -- this option allows\ndevelopers to offer users an on-demand web3 wallet. No user install required -- any browser will just work, and users\ncan onboard with a familiar Web2 experience. Think of it like Paypal / Stripe but for web3.\n\n\nSurf all of web3 via Sequence Wallet Chrome Extension -- users\nwho have the Sequence Wallet Chrome Extension installed are able to access any Ethereum-compatible Dapp on the Web :) Just like how MetaMask works,\nbut of course with a bunch of the benefits of Sequence.\n\n\nMobile phone access via WalletConnect support within Sequence Wallet -- users are able to communicate with their wallets remotely\nvia the awesome Wallet Connect protocol. This is an excellent option if using Sequence Wallet from your mobile phone and want to connect\nyour wallet to a desktop dapp.\n\n\nSequence Wallet is built on Web Browser (W3C) and Ethereum web3 standards -- and is available everywhere that a modern browser is able to run.\nWe&#x27;ve carefully designed the wallet for simple onboarding, while maintaining security for users, and allowing users to progressively\nincrease the level of their security through additional keys and measures.\nThis means, that if you&#x27;ve developed a dapp to work with MetaMask, then Sequence will work too without any changes. If you&#x27;re\nusing web3.js or ethers.js, Sequence will just work too. This is the beauty of interoperability on web3 :)\n","title":"Connect Wallet","titles":[]},"148":{"href":"/sdk/typescript/03-guides/01-connect-wallet#connecting-your-dapp-with-0xsequence","html":"\n<p>:::info A delightful wallet without requiring your users to install anything <div></div>\nBy integrating <code>0xsequence</code>, users may access your dapp without having to install any special extensions,\nand the wallet also works on mobile browsers!\n:::</p>\n<p>Your dapp can connect to your user&#x27;s wallet by first instantiating the Wallet provider:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> projectAccessKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&lt;access_key&gt;&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This assumes your dapp runs on Ethereum mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">initWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(projectAccessKey);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// If your dapp runs on a different EVM-compatible blockchain, you can specify its name</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// const wallet = sequence.initWallet(projectAccessKey, { defaultNetwork: &#x27;polygon&#x27; });</span></span></code></pre>\n<p>Note that is possible to retrieve the above instance by using the <code>getWallet()</code> method:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>Once you have the instance, you can connect to the wallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectDetails</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Your Dapp name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorize: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // And pass settings if you would like to customize further</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  settings: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    theme: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;light&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    bannerUrl: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://yoursite.com/banner-image.png&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 3:1 aspect ratio, 1200x400 works best</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    includedPaymentProviders: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;moonpay&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ramp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    defaultFundingCurrency: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;matic&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lockFundingCurrencyToDefault: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user accepted connect?&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, connectDetails.connected);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;users signed connect proof to valid their account address:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  connectDetails.proof</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>You can pick/limit the available sign in options with <code>signInOptions</code>. Will be ignored if user is already signed in.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Your Dapp name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  settings: { signInOptions: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;google&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>After you connect, you can use <code>wallet.openWallet()</code> to open the wallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">openWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>You can also optionally pass a path, and use <code>openWithOptions</code> intent to pass settings when you open the wallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> settings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Settings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  theme: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;dark&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bannerUrl: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://yoursite.com/banner-image.png&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 3:1 aspect ratio, 1200x400 works best</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  includedPaymentProviders: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;moonpay&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ramp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  defaultFundingCurrency: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;eth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  lockFundingCurrencyToDefault: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> intent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> OpenWalletIntent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;openWithOptions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  options: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    settings: settings,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> path</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;wallet/add-funds&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">openWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path, intent);</span></span></code></pre>\n<p>:::tip Check out some example Dapp source code\nFor a complete examples, see <a href=\"https://github.com/0xsequence/demo-dapp\">Demo-Dapp</a> and <a href=\"https://github.com/0xsequence/demo-dapp-web3modal\">Demo-Dapp-Web3Modal</a>.\n:::</p>\n<p>:::caution Avoid Browsers Blocking Sequence Popup\nMost browsers will block popups if they are called outside of user-triggered event handlers like <code>onclick</code>, or when it takes too long to process between the user action and the actual window</p>\n<p>Read more about browser popup-blocking <a href=\"https://javascript.info/popup-windows#popup-blocking\">here</a>.\n:::</p>\n<p><img src=\"/img/sign-in-fresh.png\" alt=\"Sequence on-demand sign in\"/></p>\n<p><img src=\"/img/sign-in-connect.png\" alt=\"Sequence on-demand sign in, connect\"/></p>\n","isPage":false,"text":"\n:::info A delightful wallet without requiring your users to install anything \nBy integrating 0xsequence, users may access your dapp without having to install any special extensions,\nand the wallet also works on mobile browsers!\n:::\nYour dapp can connect to your user&#x27;s wallet by first instantiating the Wallet provider:\nimport { sequence } from &quot;0xsequence&quot;;\n \nconst projectAccessKey = &#x27;&lt;access_key&gt;&#x27;\n \n// This assumes your dapp runs on Ethereum mainnet\nconst wallet = sequence.initWallet(projectAccessKey);\n \n// If your dapp runs on a different EVM-compatible blockchain, you can specify its name\n// const wallet = sequence.initWallet(projectAccessKey, { defaultNetwork: &#x27;polygon&#x27; });\nNote that is possible to retrieve the above instance by using the getWallet() method:\nimport { sequence } from &quot;0xsequence&quot;;\nconst wallet = sequence.getWallet();\nOnce you have the instance, you can connect to the wallet:\nconst connectDetails = await wallet.connect({\n  app: &quot;Your Dapp name&quot;,\n  authorize: true,\n  // And pass settings if you would like to customize further\n  settings: {\n    theme: &quot;light&quot;,\n    bannerUrl: &quot;https://yoursite.com/banner-image.png&quot;, // 3:1 aspect ratio, 1200x400 works best\n    includedPaymentProviders: [&quot;moonpay&quot;, &quot;ramp&quot;],\n    defaultFundingCurrency: &quot;matic&quot;,\n    lockFundingCurrencyToDefault: false,\n  },\n});\n \nconsole.log(&quot;user accepted connect?&quot;, connectDetails.connected);\nconsole.log(\n  &quot;users signed connect proof to valid their account address:&quot;,\n  connectDetails.proof\n);\nYou can pick/limit the available sign in options with signInOptions. Will be ignored if user is already signed in.\nconst wallet = sequence.getWallet();\n \nawait wallet.connect({\n  app: &quot;Your Dapp name&quot;,\n  settings: { signInOptions: [&quot;google&quot;] },\n});\nAfter you connect, you can use wallet.openWallet() to open the wallet:\nconst wallet = sequence.getWallet();\nwallet.openWallet();\nYou can also optionally pass a path, and use openWithOptions intent to pass settings when you open the wallet:\nconst settings: Settings = {\n  theme: &quot;dark&quot;,\n  bannerUrl: &quot;https://yoursite.com/banner-image.png&quot;, // 3:1 aspect ratio, 1200x400 works best\n  includedPaymentProviders: [&quot;moonpay&quot;, &quot;ramp&quot;],\n  defaultFundingCurrency: &quot;eth&quot;,\n  lockFundingCurrencyToDefault: false,\n};\n \nconst intent: OpenWalletIntent = {\n  type: &quot;openWithOptions&quot;,\n  options: {\n    settings: settings,\n  },\n};\n \nconst wallet = sequence.getWallet();\n \nconst path = &quot;wallet/add-funds&quot;;\nwallet.openWallet(path, intent);\n:::tip Check out some example Dapp source code\nFor a complete examples, see Demo-Dapp and Demo-Dapp-Web3Modal.\n:::\n:::caution Avoid Browsers Blocking Sequence Popup\nMost browsers will block popups if they are called outside of user-triggered event handlers like onclick, or when it takes too long to process between the user action and the actual window\nRead more about browser popup-blocking here.\n:::\n\n\n","title":"Connecting your dapp with 0xsequence","titles":["Connect Wallet"]},"149":{"href":"/sdk/typescript/03-guides/01-connect-wallet#wallet-login-and-connect-options","html":"\n<p>Dapps with direct sequence integration can specify a <code>ConnectOptions</code> object when running <code>wallet.connect()</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>const connectDetails = await wallet.connect(connectOptions)</span></span></code></pre>\n<p>The option parameters are described below.</p>\n","isPage":false,"text":"\nDapps with direct sequence integration can specify a ConnectOptions object when running wallet.connect().\nconst connectDetails = await wallet.connect(connectOptions)\nThe option parameters are described below.\n","title":"Wallet Login and Connect Options","titles":["Connect Wallet"]},"150":{"href":"/sdk/typescript/03-guides/01-connect-wallet#app","html":"\n<p>App name of the dapp which will be announced to user on connect screen.</p>\n<p>Example: <code>await wallet.connect({ app: &#x27;My defi app&#x27; })</code></p>\n","isPage":false,"text":"\nApp name of the dapp which will be announced to user on connect screen.\nExample: await wallet.connect({ app: &#x27;My defi app&#x27; })\n","title":"app","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"151":{"href":"/sdk/typescript/03-guides/01-connect-wallet#appprotocol","html":"\n<p>Custom protocol for auth redirect (unity/unreal).</p>\n","isPage":false,"text":"\nCustom protocol for auth redirect (unity/unreal).\n","title":"appProtocol","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"152":{"href":"/sdk/typescript/03-guides/01-connect-wallet#origin","html":"\n<p>Origin hint of the dapp&#x27;s host opening the wallet. This value will automatically be determined and verified for integrity, and can be omitted.</p>\n","isPage":false,"text":"\nOrigin hint of the dapp&#x27;s host opening the wallet. This value will automatically be determined and verified for integrity, and can be omitted.\n","title":"origin","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"153":{"href":"/sdk/typescript/03-guides/01-connect-wallet#expiry","html":"\n<p>Expiry number (in seconds) that is used for ETHAuth proof. Default is 1 week in seconds.</p>\n<p>Example: <code>await wallet.connect({ expiry: 36000 })</code></p>\n","isPage":false,"text":"\nExpiry number (in seconds) that is used for ETHAuth proof. Default is 1 week in seconds.\nExample: await wallet.connect({ expiry: 36000 })\n","title":"expiry","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"154":{"href":"/sdk/typescript/03-guides/01-connect-wallet#authorize","html":"\n<p><code>authorize</code> will perform an ETHAuth eip712 signing and return the proof to the dapp.</p>\n<p>Example: <code>await wallet.connect({ authorize: true })</code></p>\n","isPage":false,"text":"\nauthorize will perform an ETHAuth eip712 signing and return the proof to the dapp.\nExample: await wallet.connect({ authorize: true })\n","title":"authorize","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"155":{"href":"/sdk/typescript/03-guides/01-connect-wallet#authorizenonce","html":"\n<p><code>authorizeNonce</code> is an optional number to be passed as ETHAuth&#x27;s nonce claim for replay protection.</p>\n<p>Example: <code>await wallet.connect({ authorizeNonce: 123 })</code></p>\n","isPage":false,"text":"\nauthorizeNonce is an optional number to be passed as ETHAuth&#x27;s nonce claim for replay protection.\nExample: await wallet.connect({ authorizeNonce: 123 })\n","title":"authorizeNonce","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"156":{"href":"/sdk/typescript/03-guides/01-connect-wallet#refresh","html":"\n<p><code>refresh</code> flag will force a full re-connect (ie. disconnect then connect again).</p>\n<p>Example: <code>await wallet.connect({ refresh: true })</code></p>\n","isPage":false,"text":"\nrefresh flag will force a full re-connect (ie. disconnect then connect again).\nExample: await wallet.connect({ refresh: true })\n","title":"refresh","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"157":{"href":"/sdk/typescript/03-guides/01-connect-wallet#keepwalletopened","html":"\n<p><code>keepWalletOpened</code> will keep the wallet window open after connecting. The default is to automatically close the wallet after connecting.</p>\n<p>Example: <code>await wallet.connect({ keepWalletOpened: true })</code></p>\n","isPage":false,"text":"\nkeepWalletOpened will keep the wallet window open after connecting. The default is to automatically close the wallet after connecting.\nExample: await wallet.connect({ keepWalletOpened: true })\n","title":"keepWalletOpened","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"158":{"href":"/sdk/typescript/03-guides/01-connect-wallet#askforemail","html":"\n<p><code>askForEmail</code> will ask user whether they want to share the email they use to sign in to wallet while connecting, and will be returned in <code>connectDetails</code>.</p>\n<p>Example: <code>await wallet.connect({ askForEmail: true })</code></p>\n","isPage":false,"text":"\naskForEmail will ask user whether they want to share the email they use to sign in to wallet while connecting, and will be returned in connectDetails.\nExample: await wallet.connect({ askForEmail: true })\n","title":"askForEmail","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"159":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingstheme","html":"\n<p>Name of one of the available theme provided by sequence the sequence wallet will be rendered with.</p>\n<p>Example: <code>await wallet.connect({ settings: {theme: &quot;light&quot;}}</code></p>\n","isPage":false,"text":"\nName of one of the available theme provided by sequence the sequence wallet will be rendered with.\nExample: await wallet.connect({ settings: {theme: &quot;light&quot;}}\n","title":"settings.theme","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"160":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingsbannerurl","html":"\n<p>URL of a banner image users will see when connecting or logging into your dapp. The banner image should follow a 3:1 aspect ration where 1200x400 works best.</p>\n<p>Example: <code>await wallet.connect({ settings: {bannerUrl: &quot;https://yoursite.com/banner-image.png&quot;}}</code></p>\n","isPage":false,"text":"\nURL of a banner image users will see when connecting or logging into your dapp. The banner image should follow a 3:1 aspect ration where 1200x400 works best.\nExample: await wallet.connect({ settings: {bannerUrl: &quot;https://yoursite.com/banner-image.png&quot;}}\n","title":"settings.bannerUrl","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"161":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingssigninwith","html":"\n<p>Specify <code>signInWith</code> with a supported auth provider to automatically sign in the user with that provider only. Will be ignored if user is already signed in.</p>\n<p>Example: <code>await wallet.connect({ settings: {signInWith: &quot;google&quot;}}</code></p>\n<p>Supported Providers: &quot;google&quot;, &quot;discord&quot;, &quot;twitch&quot;, &quot;apple&quot;, &quot;facebook&quot;</p>\n","isPage":false,"text":"\nSpecify signInWith with a supported auth provider to automatically sign in the user with that provider only. Will be ignored if user is already signed in.\nExample: await wallet.connect({ settings: {signInWith: &quot;google&quot;}}\nSupported Providers: &quot;google&quot;, &quot;discord&quot;, &quot;twitch&quot;, &quot;apple&quot;, &quot;facebook&quot;\n","title":"settings.signInWith","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"162":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingssigninwithemail","html":"\n<p>Specify signInWithEmail with an email address to allow user automatically sign in with the email option. Will be ignored if user is already signed in.</p>\n<p>Example: <code>await wallet.connect({ settings: {signInWithEmail: &quot;user@email.com&quot;}}</code></p>\n","isPage":false,"text":"\nSpecify signInWithEmail with an email address to allow user automatically sign in with the email option. Will be ignored if user is already signed in.\nExample: await wallet.connect({ settings: {signInWithEmail: &quot;user@email.com&quot;}}\n","title":"settings.signInWithEmail","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"163":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingssigninoptions","html":"\n<p>Specify signInOptions to pick/limit the available sign in options. Will be ignored if user is already signed in.</p>\n<p>Example: <code>await wallet.connect({ settings: {signInOptions: [&quot;email&quot;, &quot;google&quot;, &quot;apple&quot;]}}</code></p>\n","isPage":false,"text":"\nSpecify signInOptions to pick/limit the available sign in options. Will be ignored if user is already signed in.\nExample: await wallet.connect({ settings: {signInOptions: [&quot;email&quot;, &quot;google&quot;, &quot;apple&quot;]}}\n","title":"settings.signInOptions","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"164":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingsincludedpaymentproviders","html":"\n<p>List of payment providers users will be able to access. By default, users can access all payment providers integrated in Sequence.</p>\n<p>Example: <code>await wallet.connect({ settings: {includedPaymentProviders: [&quot;moonpay&quot;, &quot;ramp&quot;]}}</code></p>\n","isPage":false,"text":"\nList of payment providers users will be able to access. By default, users can access all payment providers integrated in Sequence.\nExample: await wallet.connect({ settings: {includedPaymentProviders: [&quot;moonpay&quot;, &quot;ramp&quot;]}}\n","title":"settings.includedPaymentProviders","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"165":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingsdefaultfundingcurrency","html":"\n<p>The tag of the default currency to show when users open the payment provider page. The currency has to be supported by the payment providers integrated in sequence.</p>\n<p>Example: <code>await wallet.connect({ settings: {defaultFundingCurrency: &quot;usdc&quot;}}</code></p>\n","isPage":false,"text":"\nThe tag of the default currency to show when users open the payment provider page. The currency has to be supported by the payment providers integrated in sequence.\nExample: await wallet.connect({ settings: {defaultFundingCurrency: &quot;usdc&quot;}}\n","title":"settings.defaultFundingCurrency","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"166":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingsdefaultpurchaseamount","html":"\n<p>Use to specify a default purchase amount, as an integer, for prefilling the funding amount. If not specified, the default is 100.</p>\n<p>Example: <code>await wallet.connect({ settings: {defaultPurchaseAmount: 200}}</code></p>\n","isPage":false,"text":"\nUse to specify a default purchase amount, as an integer, for prefilling the funding amount. If not specified, the default is 100.\nExample: await wallet.connect({ settings: {defaultPurchaseAmount: 200}}\n","title":"settings.defaultPurchaseAmount","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"167":{"href":"/sdk/typescript/03-guides/01-connect-wallet#settingslockfundingcurrencytodefault","html":"\n<p>Whether to only allow users to purchase the default currency specified by the <code>defaultFundingCurrency</code> option. If set to false, users will also be able to purchase other tokens. locking the default funding currency can be useful to prevent users from purchasing the wrong currency or the currency on the wrong chain.</p>\n<p>Example: <code>await wallet.connect({ settings: {defaultFundingCurrency: true}}</code></p>\n","isPage":false,"text":"\nWhether to only allow users to purchase the default currency specified by the defaultFundingCurrency option. If set to false, users will also be able to purchase other tokens. locking the default funding currency can be useful to prevent users from purchasing the wrong currency or the currency on the wrong chain.\nExample: await wallet.connect({ settings: {defaultFundingCurrency: true}}\n","title":"settings.lockFundingCurrencyToDefault","titles":["Connect Wallet","Wallet Login and Connect Options",null]},"168":{"href":"/sdk/typescript/03-guides/01-connect-wallet#connecting-your-dapp-with-web3js-or-ethersjs","html":"\n<p>For a full example of a dapp which supports Sequence (on-demand + chrome extension), Metamask, and WalletConnect\nplease see the <a href=\"https://github.com/0xsequence/demo-dapp-web3modal\">Demo-Dapp-Web3Modal repo</a>.</p>\n<p><img src=\"/img/web3modal.png\" alt=\"Sequence Web3Modal Integration\"/></p>\n","isPage":false,"text":"\nFor a full example of a dapp which supports Sequence (on-demand + chrome extension), Metamask, and WalletConnect\nplease see the Demo-Dapp-Web3Modal repo.\n\n","title":"Connecting your dapp with web3.js or ethers.js","titles":["Connect Wallet"]},"169":{"href":"/sdk/typescript/03-guides/01-connect-wallet#connecting-to-any-ethereum-dapp-with-the-sequence-wallet-chrome-extension","html":"\n<p>Sequence Chrome Extension: <a href=\"https://chrome.google.com/webstore/detail/sequence-wallet/ocmccklecaalljlflmclidjeclpcpdim?hl=en\">Install</a></p>\n<p><img src=\"/img/build/seq-chrome-store.png\" alt=\"Sequence Chrome Extension\"/></p>\n","isPage":false,"text":"\nSequence Chrome Extension: Install\n\n","title":"Connecting to any Ethereum dapp with the Sequence Wallet Chrome Extension","titles":["Connect Wallet"]},"170":{"href":"/sdk/typescript/03-guides/01-connect-wallet#connecting-via-walletconnect","html":"\n<p>Sequence already supports connecting to dapps via <a href=\"https://walletconnect.com\">WalletConnect</a>.\nIf your dapp already supports WalletConnect, and you don&#x27;t need Sequence-specific functionality, nothing more needs to be done.\nFrom the user&#x27;s perspective, the WalletConnect flow behaves as follows.</p>\n<p>Taking <a href=\"https://app.uniswap.org\">Uniswap</a> as an example, the user is prompted to connect their wallet using one of multiple possible protocols.</p>\n<img src=\"/img/walletconnect/connect-wallet.png\"/>\n<p>The user selects the WalletConnect option.</p>\n<img src=\"/img/walletconnect/select-walletconnect.png\"/>\n<p>A QR code is displayed, which can be scanned by Sequence.\nAlternatively, the user can also choose to copy the connection details via their OS clipboard.</p>\n<img src=\"/img/walletconnect/qr-code.png\"/>\n<p>Back in the Sequence interface, the user chooses &quot;Scan&quot;.</p>\n<img src=\"/img/walletconnect/scan-qr-code.png\"/>\n<p>The QR code from the dapp is scanned.\nAlternatively, the code is pasted from the OS clipboard if the user chose that previously.</p>\n<img src=\"/img/walletconnect/scan.png\"/>\n<p>The user confirms the connection request.</p>\n<img src=\"/img/walletconnect/confirm.png\"/>\n<p>The connection succeeded, and the dapp is updated to reflect that.</p>\n<img src=\"/img/walletconnect/success.png\"/>\n<p>While connected, the dapp is able to make signing requests to Sequence.\nSequence will always prompt for confirmation from the user for any activity initiated by the dapp.</p>\n<img src=\"/img/walletconnect/activity.png\"/>\n<p>Once the user has finished using the dapp, they can disconnect the wallet via the session menu.</p>\n<img src=\"/img/walletconnect/disconnect.png\"/>","isPage":false,"text":"\nSequence already supports connecting to dapps via WalletConnect.\nIf your dapp already supports WalletConnect, and you don&#x27;t need Sequence-specific functionality, nothing more needs to be done.\nFrom the user&#x27;s perspective, the WalletConnect flow behaves as follows.\nTaking Uniswap as an example, the user is prompted to connect their wallet using one of multiple possible protocols.\n\nThe user selects the WalletConnect option.\n\nA QR code is displayed, which can be scanned by Sequence.\nAlternatively, the user can also choose to copy the connection details via their OS clipboard.\n\nBack in the Sequence interface, the user chooses &quot;Scan&quot;.\n\nThe QR code from the dapp is scanned.\nAlternatively, the code is pasted from the OS clipboard if the user chose that previously.\n\nThe user confirms the connection request.\n\nThe connection succeeded, and the dapp is updated to reflect that.\n\nWhile connected, the dapp is able to make signing requests to Sequence.\nSequence will always prompt for confirmation from the user for any activity initiated by the dapp.\n\nOnce the user has finished using the dapp, they can disconnect the wallet via the session menu.\n","title":"Connecting via WalletConnect","titles":["Connect Wallet"]},"171":{"href":"/sdk/typescript/03-guides/02-auth-address#authenticate-users-with-message-signature","html":"</header>\n","isPage":true,"text":"\n","title":"Authenticate Users with Message Signature","titles":[]},"172":{"href":"/sdk/typescript/03-guides/02-auth-address#ask-for-the-wallet-address","html":"\n<p>To get the user&#x27;s Sequence wallet address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\nTo get the user&#x27;s Sequence wallet address:\nconst wallet = sequence.getWallet()\nconst address = wallet.getAddress()\nconsole.log(address)\n","title":"Ask for the wallet address","titles":["Authenticate Users with Message Signature"]},"173":{"href":"/sdk/typescript/03-guides/02-auth-address#authenticate-wallet","html":"\n<p>In many cases, you&#x27;ll want your users to connect and then verify they do control this wallet address. Applications typically do this by asking the user\nto sign a message with their wallet, and then verify the signature from the user to ensure its integrity.</p>\n<p>As this is such a common workflow, Sequence can automatically authenticate the account address at the same time\nwhile the user is prompt to connect their wallet to your dapp. This allows the user experience to be simpler and\nmore seamless.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xsequence&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectDetails</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Your Dapp name&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorize: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // &lt;---&lt;&lt;&lt; this will automatically sign+verify a EIP712 message when user clicks &quot;Connect&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>It will look like this to your users:</p>\n<img alt=\"Sequence on-demand sign in, connect\" src=\"/img/authorize_connect.png\" width=\"400\"/>\n<p>In the above example, we pass <code>authorize: true</code> to the <code>connect()</code> function, which will automatically have the user\nsign a <strong>EIP712 signed message</strong> to prove their identity. This allows you to then easily authenticate the connected\nwallet address with absolute certainty.</p>\n<p>You can find the signed message proof returned in <code>connectDetails.proof</code>, which is an EIP712 signed object using\na simple convention from <a href=\"https://github.com/0xsequence/ethauth.js\">ethauth</a>. NOTE: EIP712 allows you to use an actual object for\nsigning instead of just a plain-text string.</p>\n","isPage":false,"text":"\nIn many cases, you&#x27;ll want your users to connect and then verify they do control this wallet address. Applications typically do this by asking the user\nto sign a message with their wallet, and then verify the signature from the user to ensure its integrity.\nAs this is such a common workflow, Sequence can automatically authenticate the account address at the same time\nwhile the user is prompt to connect their wallet to your dapp. This allows the user experience to be simpler and\nmore seamless.\nimport { sequence } from &#x27;0xsequence&#x27;\n \nconst wallet = sequence.getWallet()\n \nconst connectDetails = await wallet.connect({\n  app: &#x27;Your Dapp name&#x27;,\n  authorize: true // &lt;---&lt;&lt;&lt; this will automatically sign+verify a EIP712 message when user clicks &quot;Connect&quot;\n})\nIt will look like this to your users:\n\nIn the above example, we pass authorize: true to the connect() function, which will automatically have the user\nsign a EIP712 signed message to prove their identity. This allows you to then easily authenticate the connected\nwallet address with absolute certainty.\nYou can find the signed message proof returned in connectDetails.proof, which is an EIP712 signed object using\na simple convention from ethauth. NOTE: EIP712 allows you to use an actual object for\nsigning instead of just a plain-text string.\n","title":"Authenticate wallet","titles":["Authenticate Users with Message Signature"]},"174":{"href":"/sdk/typescript/03-guides/02-auth-address#authenticate-wallet-server-side","html":"\n<p>The above example demonstrates how to connect and verify the user&#x27;s identity in your dapp on the client-side,\nbut if you&#x27;d like to authenticate the Sequence authorization proof on your server, then you can do so with the following snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ValidateSequenceWalletProof } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { commons, v2 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/core&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ETHAuth } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/ethauth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { trackers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/sessions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> *</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://polygon-mainnet.infura.io/v3/&lt;your infura key here&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// create an EIP-6492-aware ETHAuth proof validator</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> validator</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ValidateSequenceWalletProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> commons.reader.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">OnChainReader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(provider),</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> trackers.remote.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RemoteConfigTracker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://sessions.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  v2.DeployedWalletContext</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ethauth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ETHAuth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validator)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethauth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">configJsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> proof</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethAuth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decodeProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(connectDetails.proof.proofString)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`proof for address ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">proof</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">address</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">} is valid`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (err) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`invalid proof -- do not trust address: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>See the <a href=\"https://github.com/0xsequence/go-sequence\">Go Sequence SDK</a> on using Sequence in your Go applications.</p>\n<p>If your server is written in a language other than Javascript/Typescript or Go, all you have to do is validate\nthe signature with <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">EIP1271, the standard method for validating signed messages for a smart wallet</a>.</p>\n<p>As always, if you have any questions or require help, reach out to us on <a href=\"https://discord.gg/sequence\">Discord</a>.</p>","isPage":false,"text":"\nThe above example demonstrates how to connect and verify the user&#x27;s identity in your dapp on the client-side,\nbut if you&#x27;d like to authenticate the Sequence authorization proof on your server, then you can do so with the following snippet:\nimport { ValidateSequenceWalletProof } from &#x27;@0xsequence/auth&#x27;\nimport { commons, v2 } from &#x27;@0xsequence/core&#x27;\nimport { ETHAuth } from &#x27;@0xsequence/ethauth&#x27;\nimport { trackers } from &#x27;@0xsequence/sessions&#x27;\nimport * as ethers from &#x27;ethers&#x27;\n \n// ...\n \nconst rpcUrl = &#x27;https://polygon-mainnet.infura.io/v3/&lt;your infura key here&gt;&#x27;\nconst provider = new ethers.providers.JsonRpcProvider(rpcUrl)\n \n// create an EIP-6492-aware ETHAuth proof validator\nconst validator = ValidateSequenceWalletProof(\n  () =&gt; new commons.reader.OnChainReader(provider),\n  new trackers.remote.RemoteConfigTracker(&#x27;https://sessions.sequence.app&#x27;),\n  v2.DeployedWalletContext\n)\nconst ethauth = new ETHAuth(validator)\nawait ethauth.configJsonRpcProvider(rpcUrl)\n \ntry {\n  const proof = await ethAuth.decodeProof(connectDetails.proof.proofString)\n  console.log(`proof for address ${proof.address} is valid`)\n} catch (err) {\n  console.log(`invalid proof -- do not trust address: ${err}`)\n}\nSee the Go Sequence SDK on using Sequence in your Go applications.\nIf your server is written in a language other than Javascript/Typescript or Go, all you have to do is validate\nthe signature with EIP1271, the standard method for validating signed messages for a smart wallet.\nAs always, if you have any questions or require help, reach out to us on Discord.","title":"Authenticate wallet server-side","titles":["Authenticate Users with Message Signature"]},"175":{"href":"/sdk/typescript/03-guides/03-sign-message#todo---replace-with-code-groups-from-vocs","html":"</header>","isPage":true,"text":"","title":"TODO - Replace with Code Groups from Vocs","titles":[]},"176":{"href":"/sdk/typescript/03-guides/04-session-keys#no-wallet-confirmation-signatures","html":"</header>\n<p>It is possible to build an application where users sign messages without requiring a confirmation in their Sequence wallet every time. This is possible using <em>session keys</em>, or ephemeral keys.</p>\n<header>","isPage":true,"text":"\nIt is possible to build an application where users sign messages without requiring a confirmation in their Sequence wallet every time. This is possible using session keys, or ephemeral keys.\n","title":"No-Wallet-Confirmation Signatures","titles":[]},"177":{"href":"/sdk/typescript/03-guides/04-session-keys#session-keys","html":"</header>\n<p>Session keys are ephemeral private keys that can be generated and stored client-side, typically in a user&#x27;s local storage. They provide a convenient and secure way for users to authorize specific actions in a decentralized application without requiring them to confirm each action through their primary wallet.</p>\n<p>By signing a message with their primary wallet (e.g., Sequence Wallet), users can authorize a session key to act on their behalf for a limited time or scope. Applications can then interpret signed messages from the session key as if they were coming directly from the user&#x27;s wallet, streamlining the user experience.</p>\n<p>Session keys are particularly useful for applications that require frequent user interactions, as they help reduce the number of wallet confirmations needed, while still maintaining a secure and verifiable authentication process.</p>\n<header>","isPage":false,"text":"\nSession keys are ephemeral private keys that can be generated and stored client-side, typically in a user&#x27;s local storage. They provide a convenient and secure way for users to authorize specific actions in a decentralized application without requiring them to confirm each action through their primary wallet.\nBy signing a message with their primary wallet (e.g., Sequence Wallet), users can authorize a session key to act on their behalf for a limited time or scope. Applications can then interpret signed messages from the session key as if they were coming directly from the user&#x27;s wallet, streamlining the user experience.\nSession keys are particularly useful for applications that require frequent user interactions, as they help reduce the number of wallet confirmations needed, while still maintaining a secure and verifiable authentication process.\n","title":"Session Keys","titles":[]},"178":{"href":"/sdk/typescript/03-guides/04-session-keys#using-session-keys-with-sequence","html":"</header>\n","isPage":false,"text":"\n","title":"Using Session keys with Sequence","titles":[]},"179":{"href":"/sdk/typescript/03-guides/04-session-keys#1-initialize-sequence-wallet-and-connect","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Wallet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/wallet&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> userAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nimport { Wallet } from &#x27;@0xsequence/wallet&#x27;\nimport { ethers } from &#x27;ethers&#x27;\n \nconst wallet = new Wallet()\nawait wallet.connect()\n \nconst signer = wallet.getSigner()\nconst userAddress = signer.getAddress()\n","title":"1. Initialize Sequence Wallet and Connect","titles":["Using Session keys with Sequence",null]},"180":{"href":"/sdk/typescript/03-guides/04-session-keys#2-generate-a-session-key","html":"\n<p>Create a new ephemeral private key, store it in local storage, and derive the associated address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionPrivateKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">randomBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">localStorage.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;sessionPrivateKey&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexlify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sessionPrivateKey))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sessionPrivateKey)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionWallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nCreate a new ephemeral private key, store it in local storage, and derive the associated address:\nconst sessionPrivateKey = ethers.utils.randomBytes(32)\nlocalStorage.setItem(&#x27;sessionPrivateKey&#x27;, ethers.utils.hexlify(sessionPrivateKey))\nconst sessionWallet = new ethers.Wallet(sessionPrivateKey)\nconst sessionAddress = await sessionWallet.getAddress()\n","title":"2. Generate a Session Key","titles":["Using Session keys with Sequence",null]},"181":{"href":"/sdk/typescript/03-guides/04-session-keys#3-sign-authorization-message","html":"\n<p>Sign a message with the user&#x27;s Sequence Wallet to authorize the session key:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> authorizationMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `Authorize this device to play this game.`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(authorizationMessage)</span></span></code></pre>\n","isPage":false,"text":"\nSign a message with the user&#x27;s Sequence Wallet to authorize the session key:\nconst authorizationMessage = `Authorize this device to play this game.`\nconst signature = await signer.signMessage(authorizationMessage)\n","title":"3. Sign Authorization Message","titles":["Using Session keys with Sequence",null]},"182":{"href":"/sdk/typescript/03-guides/04-session-keys#4-verify-authorization-signature","html":"\n<p>Verify the signature on the server or client side using Sequence utility functions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getChainId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> isValid</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValidMessageSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  userAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorizationMessage,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signature,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (isValid) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session key authorized&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session key not authorized&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nVerify the signature on the server or client side using Sequence utility functions:\nconst provider = wallet.getProvider()\nconst chainId = await wallet.getChainId()\n \nconst isValid = await wallet.utils.isValidMessageSignature(\n  userAddress,\n  authorizationMessage,\n  signature,\n  chainId\n)\n \nif (isValid) {\n  console.log(&#x27;Session key authorized&#x27;)\n} else {\n  console.log(&#x27;Session key not authorized&#x27;)\n}\n","title":"4. Verify Authorization Signature","titles":["Using Session keys with Sequence",null]},"183":{"href":"/sdk/typescript/03-guides/04-session-keys#5-sign-message-with-session-key","html":"\n<p>Use the session key to sign a message client-side without user interaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> message</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Perform action without wallet confirmation&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionSignature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionWallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message)</span></span></code></pre>\n","isPage":false,"text":"\nUse the session key to sign a message client-side without user interaction:\nconst message = &#x27;Perform action without wallet confirmation&#x27;\nconst sessionSignature = await sessionWallet.signMessage(message)\n","title":"5. Sign Message with Session Key","titles":["Using Session keys with Sequence",null]},"184":{"href":"/sdk/typescript/03-guides/04-session-keys#6-verify-session-signature","html":"\n<p>Verify the session signature on the server or client side:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> recoveredSessionAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">verifyMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message, sessionSignature)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (recoveredSessionAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionAddress) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session signature valid&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session signature invalid&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><strong>Note</strong>: You should retrieve the session key stored in local storage upon loading the application and only create a new session key if none can be found.</p>","isPage":false,"text":"\nVerify the session signature on the server or client side:\nconst recoveredSessionAddress = ethers.utils.verifyMessage(message, sessionSignature)\nif (recoveredSessionAddress === sessionAddress) {\n  console.log(&#x27;Session signature valid&#x27;)\n} else {\n  console.log(&#x27;Session signature invalid&#x27;)\n}\nNote: You should retrieve the session key stored in local storage upon loading the application and only create a new session key if none can be found.","title":"6. Verify Session Signature","titles":["Using Session keys with Sequence",null]},"185":{"href":"/sdk/typescript/03-guides/05-send-transaction#sending-transactions","html":"</header>\n<p>Signing a transaction will only retrieve the signed payload.\nIf you want the wallet to actually dispatch the transaction to the network as well, that requires only a small modification to the previous example (note the change from <code>signTransactions</code> to <code>sendTransaction</code>):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipientAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSigning a transaction will only retrieve the signed payload.\nIf you want the wallet to actually dispatch the transaction to the network as well, that requires only a small modification to the previous example (note the change from signTransactions to sendTransaction):\nconst transaction = {\n  to: recipientAddress,\n  value: 1000000000000000000\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n ","title":"Sending Transactions","titles":[]},"186":{"href":"/sdk/typescript/03-guides/06-send-erc20#sending-erc-20-tokens","html":"</header>\n<p>You can ask the wallet to send a single ERC-20 token transfer:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode an ERC-20 token transfer to recipient of the specified amount</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipientAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-20 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nYou can ask the wallet to send a single ERC-20 token transfer:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode an ERC-20 token transfer to recipient of the specified amount\nconst data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipientAddress, amount]\n)\n \nconst transaction = {\n  to: daiContractAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode two different ERC-20 token transfers\nconst data1 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient1Address, amount1]\n)\nconst data2 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: daiContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: daiContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-20 Tokens","titles":[]},"187":{"href":"/sdk/typescript/03-guides/07-send-erc721#sending-erc-721-nft-tokens","html":"</header>\n<p>Sending an ERC-721 NFT is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the transfer of the NFT tokenId to recipient</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipientAddress, tokenId]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-721 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransactionBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSending an ERC-721 NFT is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \n// Encode the transfer of the NFT tokenId to recipient\nconst address = await wallet.getAddress()\nconst data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipientAddress, tokenId]\n)\n \nconst transaction = {\n  to: erc721TokenAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \n// Encode two different ERC-721 token transfers\nconst data1 = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient1Address, amount1]\n)\nconst data2 = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: erc721ContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: erc721ContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-721 (NFT) Tokens","titles":[]},"188":{"href":"/sdk/typescript/03-guides/08-send-erc1155#sending-erc-1155-collectible-tokens","html":"</header>\n<p>Sending an ERC-1155 collectible is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the transfer of the collectible to recipient</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipientAddress, tokenId, amount, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-1155 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient1Address, token1Id, amount1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient2Address, token2Id, amount2, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransactionBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSending an ERC-1155 collectible is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \n// Encode the transfer of the collectible to recipient\nconst address = await wallet.getAddress()\nconst data = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipientAddress, tokenId, amount, &#x27;0x&#x27;]\n)\n \nconst transaction = {\n  to: erc1155TokenAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \n// Encode two different ERC-1155 token transfers\nconst data1 = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient1Address, token1Id, amount1, &#x27;0x&#x27;]\n)\nconst data2 = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient2Address, token2Id, amount2, &#x27;0x&#x27;]\n)\n \nconst transaction1 = {\n  to: erc1155ContractAddress,\n  data: data1\n}\nconst transaction2 = {\n  to: erc1155ContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-1155 (Collectible) Tokens","titles":[]},"189":{"href":"/sdk/typescript/03-guides/09-send-batch-transactions#sending-a-batch-of-transactions","html":"</header>\n<p>Likewise, bundling multiple transactions to be sent in a single native transaction is equally as easy:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient1Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient2Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response)</span></span></code></pre>\n<p>The transactions don&#x27;t have to be the same token or even token standard either.\nYou can mix and match:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient3Address, amount3]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient4Address, token4Id, amount4, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: recipient1Address, value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: daiContractAddress, data: erc20Data },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: erc721ContractAddress, data: erc721Data },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: erc1155ContractAddress, data: erc1155Data }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transactions)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response)</span></span></code></pre>","isPage":true,"text":"\nLikewise, bundling multiple transactions to be sent in a single native transaction is equally as easy:\nconst transaction1 = {\n  to: recipient1Address,\n  value: 1000000000000000000\n}\n \nconst transaction2 = {\n  to: recipient2Address,\n  value: 1000000000000000000\n}\n \nconst signer = wallet.getSigner()\nconst response = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(response)\nThe transactions don&#x27;t have to be the same token or even token standard either.\nYou can mix and match:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \nconst erc20Data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\nconst erc721Data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient3Address, amount3]\n)\nconst erc1155Data = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient4Address, token4Id, amount4, &#x27;0x&#x27;]\n)\n \nconst transactions = [\n  { to: recipient1Address, value: &#x27;1000000000000000000&#x27; },\n  { to: daiContractAddress, data: erc20Data },\n  { to: erc721ContractAddress, data: erc721Data },\n  { to: erc1155ContractAddress, data: erc1155Data }\n]\n \nconst signer = wallet.getSigner()\nconst response = await signer.sendTransaction(transactions)\nconsole.log(response)","title":"Sending a Batch of Transactions","titles":[]},"190":{"href":"/sdk/typescript/03-guides/10-building-backends#building-backends-with-sequence","html":"</header>\n","isPage":true,"text":"\n","title":"Building Backends with Sequence","titles":[]},"191":{"href":"/sdk/typescript/03-guides/10-building-backends#nodejs","html":"\n<p>The <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a> package which is available for browser / client use, also works perfectly on nodejs backends\nwritten in Javascript or Typescript.</p>\n","isPage":false,"text":"\nThe 0xsequence package which is available for browser / client use, also works perfectly on nodejs backends\nwritten in Javascript or Typescript.\n","title":"nodejs","titles":["Building Backends with Sequence",null]},"192":{"href":"/sdk/typescript/03-guides/10-building-backends#go","html":"\n<p>A complete Sequence SDK is also available in Go: <a href=\"https://github.com/0xsequence/go-sequence\">https://github.com/0xsequence/go-sequence</a>.</p>\n<p><a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a> is the equivalent of <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a>\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with <a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a>.</p>\n","isPage":false,"text":"\nA complete Sequence SDK is also available in Go: https://github.com/0xsequence/go-sequence.\ngo-sequence is the equivalent of 0xsequence\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with go-sequence.\n","title":"Go","titles":["Building Backends with Sequence",null]},"193":{"href":"/sdk/typescript/03-guides/10-building-backends#ethkit","html":"\n<p>As part of the Sequence open source tools, our team has also built <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a>, which\nis an Ethereum dev toolkit for Go backends. <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a> supports EOA wallets,\nand you can think of it like <code>ethers.js</code> but for Go.</p>\n","isPage":false,"text":"\nAs part of the Sequence open source tools, our team has also built ethkit, which\nis an Ethereum dev toolkit for Go backends. ethkit supports EOA wallets,\nand you can think of it like ethers.js but for Go.\n","title":"ethkit","titles":["Building Backends with Sequence",null]},"194":{"href":"/sdk/typescript/03-guides/10-building-backends#support-for-other-backend-languages","html":"\n<p>If your backend services are written in a language other than JS or Go, you can still easily integrate Sequence,\nas Sequence is really just a standard Ethereum client library with some extra features. In many cases, the extra\nfeatures are best utilized on the client-side / dapp.</p>\n<p>If your situation for example is a Python or Java backend where you&#x27;d like to verify signatures from a Sequence Wallet,\nwell then, you can call the standard <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">EIP1271</a> function for the account address\nfrom your backend.</p>\n<p>If you&#x27;d like to use the Sequence&#x27;s Meta-Transaction capabilities, see <a href=\"/guides/templates/02-building-relaying-server\">Building Relaying Server with Sequence</a>.</p>","isPage":false,"text":"\nIf your backend services are written in a language other than JS or Go, you can still easily integrate Sequence,\nas Sequence is really just a standard Ethereum client library with some extra features. In many cases, the extra\nfeatures are best utilized on the client-side / dapp.\nIf your situation for example is a Python or Java backend where you&#x27;d like to verify signatures from a Sequence Wallet,\nwell then, you can call the standard EIP1271 function for the account address\nfrom your backend.\nIf you&#x27;d like to use the Sequence&#x27;s Meta-Transaction capabilities, see Building Relaying Server with Sequence.","title":"Support for other backend languages","titles":["Building Backends with Sequence",null]},"195":{"href":"/sdk/typescript/connectors/01-overview#wallet-connectors","html":"</header>\n<p>Sequence is compatible with all standard Ethereum libraries and connectors. If you&#x27;ve\ndeveloped your dapp to with work Metamask, it will also automatically work with Sequence.</p>\n<p>Our SDKs offer all the functionality you&#x27;d need to build a web3 dapp, but you can also\ncombine other libraries, tools, and wallet connectors :) Please see our open sourced <a href=\"https://github.com/0xsequence/demo-dapp\">Demo Dapp</a>\nproject for an example use of Sequence, or see below on usage with additional connectors.</p>\n<p>For your dapps, you may also want to support many different kinds of wallets in addition\nto the Sequence Wallet. You may do this by using sequence.js or using one of the connectors below:</p>\n<ul>\n<li><a href=\"02-kit/01-overview.mdx\">Sequence Kit</a></li>\n<li><a href=\"/sdk/typescript/connectors/03-wagmi\">Wagmi</a></li>\n<li><a href=\"/sdk/typescript/connectors/07-web3modal\">Web3Modal</a></li>\n<li><a href=\"/sdk/typescript/connectors/04-rainbow-kit\">RainbowKit</a></li>\n<li><a href=\"/sdk/typescript/connectors/05-web3-onboard\">web3-onboard</a></li>\n<li><a href=\"/sdk/typescript/connectors/06-web3-react-v6\">web3-react</a></li>\n</ul>\n<p>Additionally, if you are building a mobile app or video game, please see the docs for\nthe respective SDK. Feel free to reach out to our team for help/questions too.</p>","isPage":true,"text":"\nSequence is compatible with all standard Ethereum libraries and connectors. If you&#x27;ve\ndeveloped your dapp to with work Metamask, it will also automatically work with Sequence.\nOur SDKs offer all the functionality you&#x27;d need to build a web3 dapp, but you can also\ncombine other libraries, tools, and wallet connectors :) Please see our open sourced Demo Dapp\nproject for an example use of Sequence, or see below on usage with additional connectors.\nFor your dapps, you may also want to support many different kinds of wallets in addition\nto the Sequence Wallet. You may do this by using sequence.js or using one of the connectors below:\n\nSequence Kit\nWagmi\nWeb3Modal\nRainbowKit\nweb3-onboard\nweb3-react\n\nAdditionally, if you are building a mobile app or video game, please see the docs for\nthe respective SDK. Feel free to reach out to our team for help/questions too.","title":"Wallet Connectors","titles":[]},"196":{"href":"/sdk/typescript/connectors/02-sequence-kit#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications","html":"</header>\n<p>Sequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular <a href=\"https://wagmi.sh/\">wagmi</a> library, unlock a realm of possibilities in the world of web3.</p>\n","isPage":true,"text":"\nSequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular wagmi library, unlock a realm of possibilities in the world of web3.\n","title":"Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications","titles":[]},"197":{"href":"/sdk/typescript/connectors/02-sequence-kit#key-features","html":"\n<ul>\n<li>\n<p><strong>Universal Connections</strong>: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪</p>\n</li>\n<li>\n<p><strong>Web3 Wallet Integration</strong>: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️</p>\n</li>\n<li>\n<p><strong>Embedded Wallet Experience</strong>: Provide your users with a comprehensive embedded wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙</p>\n</li>\n</ul>\n<p>Explore the potential of Sequence Kit by trying out our <a href=\"https://0xsequence.github.io/kit\">demo</a>!</p>\n<header>","isPage":false,"text":"\n\n\nUniversal Connections: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪\n\n\nWeb3 Wallet Integration: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️\n\n\nEmbedded Wallet Experience: Provide your users with a comprehensive embedded wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙\n\n\nExplore the potential of Sequence Kit by trying out our demo!\n","title":"Key Features","titles":["Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications"]},"198":{"href":"/sdk/typescript/connectors/02-sequence-kit#next-steps","html":"</header>\n<p>Ready to integrate Sequence Kit into your application? Check out our <a href=\"#TODO\">Getting Started guide</a>. If you&#x27;re already familiar with Sequence Kit dive into the available <a href=\"#TODO\">configuration options</a> or take a look at the <a href=\"#TODO\">checkout</a>.</p>","isPage":false,"text":"\nReady to integrate Sequence Kit into your application? Check out our Getting Started guide. If you&#x27;re already familiar with Sequence Kit dive into the available configuration options or take a look at the checkout.","title":"Next Steps","titles":[]},"199":{"href":"/sdk/typescript/connectors/03-wagmi#using-wagmi","html":"</header>\n<p>The Sequence wallet used with Wagmi through the connector.</p>\n<p>:::tip Try it live :)\nTry <a href=\"https://0xsequence.github.io/demo-dapp-wagmi/\">a live Dapp example</a> using Sequence + Metamask + Wallet Connect with wagmi.</p>\n<p>Source code is available too: <a href=\"https://github.com/0xsequence/demo-dapp-wagmi\">https://github.com/0xsequence/demo-dapp-wagmi</a>\n:::</p>\n","isPage":true,"text":"\nThe Sequence wallet used with Wagmi through the connector.\n:::tip Try it live :)\nTry a live Dapp example using Sequence + Metamask + Wallet Connect with wagmi.\nSource code is available too: https://github.com/0xsequence/demo-dapp-wagmi\n:::\n","title":"Using Wagmi","titles":[]},"200":{"href":"/sdk/typescript/connectors/03-wagmi#installation","html":"\n<p>The connector is installed via the npm package <code>@0xsequence/wagmi-connector</code>. If you are using the latest version of wagmi (&gt;= 1.0.0) the latest version of the wagmi-connector package can be installed with the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/wagmi-connector </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add @0xsequence/wagmi-connector </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n","isPage":false,"text":"\nThe connector is installed via the npm package @0xsequence/wagmi-connector. If you are using the latest version of wagmi (&gt;= 1.0.0) the latest version of the wagmi-connector package can be installed with the following command:\nnpm install @0xsequence/wagmi-connector 0xsequence ethers\nor\nyarn add @0xsequence/wagmi-connector 0xsequence ethers\n","title":"Installation","titles":["Using Wagmi"]},"201":{"href":"/sdk/typescript/connectors/03-wagmi#usage","html":"\n<p>The connector is then imported and added to the list of connectors alongside the other wagmi connectors.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceConnector } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/wagmi-connector&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      chains,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      options: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        defaultNetwork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;polygon&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        connect: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Demo-app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">otherConnectors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wagmiConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    autoConnect: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connectors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    publicClient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    webSocketPublicClient</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span></code></pre>\n","isPage":false,"text":"\nThe connector is then imported and added to the list of connectors alongside the other wagmi connectors.\nimport { SequenceConnector } from &#x27;@0xsequence/wagmi-connector&#x27;\n \n  const connectors = [\n    new SequenceConnector({\n      chains,\n      options: {\n        defaultNetwork: &#x27;polygon&#x27;,\n        connect: {\n          app: &#x27;Demo-app&#x27;,\n        }\n      }\n    }),\n    ...otherConnectors\n  ]\n  \n  const wagmiConfig = createConfig({\n    autoConnect: true,\n    connectors,\n    publicClient,\n    webSocketPublicClient\n  })\n","title":"Usage","titles":["Using Wagmi"]},"202":{"href":"/sdk/typescript/connectors/03-wagmi#parameters","html":"\n","isPage":false,"text":"\n","title":"Parameters","titles":["Using Wagmi"]},"203":{"href":"/sdk/typescript/connectors/03-wagmi#chains","html":"\n<p>Chains supported by app. This is the same parameter as would be passed to other RainbowKit wallets.</p>\n","isPage":false,"text":"\nChains supported by app. This is the same parameter as would be passed to other RainbowKit wallets.\n","title":"chains","titles":["Using Wagmi","Parameters"]},"204":{"href":"/sdk/typescript/connectors/03-wagmi#optionsconnect-optional","html":"\n<p>Connection details that will be passed to Sequence upon connection, including app name, network id, etc...\nA more in depth description of the connect options is available <a href=\"/solutions/wallets/universal-wallet/03-guides/01-connect-wallet#wallet-login-and-connect-options\">here</a>.</p>\n","isPage":false,"text":"\nConnection details that will be passed to Sequence upon connection, including app name, network id, etc...\nA more in depth description of the connect options is available here.\n","title":"options.connect (optional)","titles":["Using Wagmi","Parameters"]},"205":{"href":"/sdk/typescript/connectors/03-wagmi#optionsdefaultnetwork-optional","html":"\n<p>The default network to connect to. Sequence will default all operations to this network. It can also be defined using a number (e.g. 1 for Mainnet, 5 for Goerli, etc...).</p>\n","isPage":false,"text":"\nThe default network to connect to. Sequence will default all operations to this network. It can also be defined using a number (e.g. 1 for Mainnet, 5 for Goerli, etc...).\n","title":"options.defaultNetwork (optional)","titles":["Using Wagmi","Parameters"]},"206":{"href":"/sdk/typescript/connectors/03-wagmi#using-older-versions-of-wagmi--012x","html":"\n<p>If you are using an older version of Wagmi (&lt;= 0.12.x), which is based on ethers instead of viem, use the following command to install the appropriate version of the wagmi connector:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/wagmi-connector@1.0 </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add @0xsequence/wagmi-connector@1.0 </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n","isPage":false,"text":"\nIf you are using an older version of Wagmi (&lt;= 0.12.x), which is based on ethers instead of viem, use the following command to install the appropriate version of the wagmi connector:\nnpm install @0xsequence/wagmi-connector@1.0 0xsequence ethers\nor\nyarn add @0xsequence/wagmi-connector@1.0 0xsequence ethers\n","title":"Using older versions of Wagmi (&lt;= 0.12.x)","titles":["Using Wagmi"]},"207":{"href":"/sdk/typescript/connectors/03-wagmi#using-nextjs","html":"\n<p>There are special considerations to take into account when using Wagmi with NextJs such that it functions harmoniously with the server-side rendering of NextJs.\nThe correct technique to use differs depending on whether the application uses the older <code>pages</code> router or the more recent <code>app</code> router.</p>\n<p>See <a href=\"https://docs.sequence.xyz/wallet/connectors/FAQ/#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only\">this section</a> for an explanation on using the Wagmi connector with <code>app</code> router.<br/>\nSee <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/use-client-method\">the example app</a> which uses the <code>app</code> router structure.</p>\n<p>See <a href=\"https://docs.sequence.xyz/wallet/connectors/FAQ/#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-pages-directory-all-versions-of-nextjs\">this section</a> for an explanation on using the Wagmi connector with <code>pages</code> router.<br/>\nSee <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/mount-hook\">the example app</a> which uses the <code>pages</code> router structure.</p>\n","isPage":false,"text":"\nThere are special considerations to take into account when using Wagmi with NextJs such that it functions harmoniously with the server-side rendering of NextJs.\nThe correct technique to use differs depending on whether the application uses the older pages router or the more recent app router.\nSee this section for an explanation on using the Wagmi connector with app router.\nSee the example app which uses the app router structure.\nSee this section for an explanation on using the Wagmi connector with pages router.\nSee the example app which uses the pages router structure.\n","title":"Using NextJs","titles":["Using Wagmi"]},"208":{"href":"/sdk/typescript/connectors/03-wagmi#examples","html":"\n<p>Below are example dapps using various versions of wagmi and libraries.</p>\n<p>A demo app for the lastest version of Wagmi is available <a href=\"https://github.com/0xsequence/demo-dapp-wagmi/tree/wagmi-1-0-0\">here</a>.<br/>\nA demo app is available for older version of Wagmi(&lt;=0.12.x) is available <a href=\"https://github.com/0xsequence/demo-dapp-wagmi/tree/wagmi-0-12-x\">here</a>.</p>\n<p>A demo app for Wagmi + NextJs with the <code>app</code> router structure <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/use-client-method\">here</a>.<br/>\nA demo app for Wagmi + NextJs with the older <code>pages</code> router structure <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/mount-hook\">here</a>.</p>","isPage":false,"text":"\nBelow are example dapps using various versions of wagmi and libraries.\nA demo app for the lastest version of Wagmi is available here.\nA demo app is available for older version of Wagmi(&lt;=0.12.x) is available here.\nA demo app for Wagmi + NextJs with the app router structure here.\nA demo app for Wagmi + NextJs with the older pages router structure here.","title":"Examples","titles":["Using Wagmi"]},"209":{"href":"/sdk/typescript/connectors/04-rainbow-kit#using-rainbowkit","html":"</header>\n<p>The Sequence wallet can be added to RainbowKit through the connector.</p>\n<p>:::tip Try it live :)\nTry <a href=\"https://0xsequence.github.io/demo-dapp-rainbowkit/\">a live Dapp example</a> using Sequence + Metamask + Rainbow + Wallet Connect with RainbowKit.</p>\n<p>Source code is available too: <a href=\"https://github.com/0xsequence/demo-dapp-rainbowkit\">https://github.com/0xsequence/demo-dapp-rainbowkit</a>\n:::</p>\n","isPage":true,"text":"\nThe Sequence wallet can be added to RainbowKit through the connector.\n:::tip Try it live :)\nTry a live Dapp example using Sequence + Metamask + Rainbow + Wallet Connect with RainbowKit.\nSource code is available too: https://github.com/0xsequence/demo-dapp-rainbowkit\n:::\n","title":"Using RainbowKit","titles":[]},"210":{"href":"/sdk/typescript/connectors/04-rainbow-kit#installation","html":"\n<p>The connector is installed via the npm package <code>@0xsequence/rainbowkit-plugin</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/rainbowkit-plugin </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add @0xsequence/rainbowkit-plugin </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n","isPage":false,"text":"\nThe connector is installed via the npm package @0xsequence/rainbowkit-plugin.\nnpm install @0xsequence/rainbowkit-plugin 0xsequence ethers\nor\nyarn add @0xsequence/rainbowkit-plugin 0xsequence ethers\n","title":"Installation","titles":["Using RainbowKit"]},"211":{"href":"/sdk/typescript/connectors/04-rainbow-kit#usage","html":"\n<p>The connector is then imported and added to the list of connectors alongside the other RainbowKit wallets.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequenceWallet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/rainbowkit-plugin&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { connectorsForWallets } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@rainbow-me/rainbowkit&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> connectorsForWallets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    groupName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Recommended&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wallets: [</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      sequenceWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        chains,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        defaultNetwork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;polygon&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        connect: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Demo-app&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }),</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">otherRainbowKitWallets</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n","isPage":false,"text":"\nThe connector is then imported and added to the list of connectors alongside the other RainbowKit wallets.\nimport { sequenceWallet } from &#x27;@0xsequence/rainbowkit-plugin&#x27;\nimport { connectorsForWallets } from &#x27;@rainbow-me/rainbowkit&#x27;;\n \nconst connectors = connectorsForWallets([\n  {\n    groupName: &#x27;Recommended&#x27;,\n    wallets: [\n      sequenceWallet({\n        chains,\n        defaultNetwork: &#x27;polygon&#x27;,\n        connect: {\n          app: &#x27;Demo-app&#x27;\n        }\n      }),\n      ...otherRainbowKitWallets\n    ]\n  }\n \n","title":"Usage","titles":["Using RainbowKit"]},"212":{"href":"/sdk/typescript/connectors/04-rainbow-kit#parameters","html":"\n","isPage":false,"text":"\n","title":"Parameters","titles":["Using RainbowKit"]},"213":{"href":"/sdk/typescript/connectors/04-rainbow-kit#chains","html":"\n<p>Chains supported by app. This is the same parameter as would be passed to other RainbowKit wallets.</p>\n","isPage":false,"text":"\nChains supported by app. This is the same parameter as would be passed to other RainbowKit wallets.\n","title":"chains","titles":["Using RainbowKit","Parameters"]},"214":{"href":"/sdk/typescript/connectors/04-rainbow-kit#connect-optional","html":"\n<p>Connect options for Sequence, including the name of the app and the default network id the wallet will attempt connection to.\nA more in depth description of the connect options is available <a href=\"/solutions/wallets/universal-wallet/03-guides/01-connect-wallet#wallet-login-and-connect-options\">here</a>.</p>\n","isPage":false,"text":"\nConnect options for Sequence, including the name of the app and the default network id the wallet will attempt connection to.\nA more in depth description of the connect options is available here.\n","title":"connect (optional)","titles":["Using RainbowKit","Parameters"]},"215":{"href":"/sdk/typescript/connectors/04-rainbow-kit#defaultnetwork-optional","html":"\n<p>The default network to connect to. Sequence will default all operations to this network. It can also be defined using a number (e.g. 1 for Mainnet, 5 for Goerli, etc...).</p>\n","isPage":false,"text":"\nThe default network to connect to. Sequence will default all operations to this network. It can also be defined using a number (e.g. 1 for Mainnet, 5 for Goerli, etc...).\n","title":"defaultNetwork (optional)","titles":["Using RainbowKit","Parameters"]},"216":{"href":"/sdk/typescript/connectors/04-rainbow-kit#using-nextjs","html":"\n<p>There are special considerations to take into account when using NextJs with Wagmi-based libraries like RainbowKit, such that it functions harmoniously with the server-side rendering of NextJs.\nThe correct technique to use differs depending on whether the application uses the older <code>pages</code> router or the more recent <code>app</code> router.</p>\n<p>See <a href=\"/sdk/typescript/connectors/08-FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only\">this section</a> for an explanation on using Wagmi or Wagmi-based libraries with <code>app</code> router.<br/>\nSee <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/use-client-method\">the example app</a> which uses the <code>app</code> router structure.</p>\n<p>See <a href=\"/sdk/typescript/connectors/08-FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only\">this section</a> for an explanation on using Wagmi or Wagmi-based libraries with <code>pages</code> router.<br/>\nSee <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/mount-hook\">the example app</a> which uses the <code>pages</code> router structure.</p>\n","isPage":false,"text":"\nThere are special considerations to take into account when using NextJs with Wagmi-based libraries like RainbowKit, such that it functions harmoniously with the server-side rendering of NextJs.\nThe correct technique to use differs depending on whether the application uses the older pages router or the more recent app router.\nSee this section for an explanation on using Wagmi or Wagmi-based libraries with app router.\nSee the example app which uses the app router structure.\nSee this section for an explanation on using Wagmi or Wagmi-based libraries with pages router.\nSee the example app which uses the pages router structure.\n","title":"Using NextJs","titles":["Using RainbowKit"]},"217":{"href":"/sdk/typescript/connectors/04-rainbow-kit#using-older-versions-of-wagmi--012x","html":"\n<p>If you are using an older version of Wagmi (&lt;= 0.12.x), which is based on ethers instead of viem, use the following command to install the appropriate version of the wagmi connector:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/wagmi-connector@1.0 </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add @0xsequence/wagmi-connector@1.0 </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n","isPage":false,"text":"\nIf you are using an older version of Wagmi (&lt;= 0.12.x), which is based on ethers instead of viem, use the following command to install the appropriate version of the wagmi connector:\nnpm install @0xsequence/wagmi-connector@1.0 0xsequence ethers\nor\nyarn add @0xsequence/wagmi-connector@1.0 0xsequence ethers\n","title":"Using older versions of Wagmi (&lt;= 0.12.x)","titles":["Using RainbowKit"]},"218":{"href":"/sdk/typescript/connectors/04-rainbow-kit#examples","html":"\n<p>A demo app for RainbowKit is available <a href=\"https://github.com/0xsequence/demo-dapp-rainbowkit\">here</a></p>\n<p>A demo app for NextJs + Wagmi (which is applicable for wagmi-based libraries) with the <code>app</code> router structure <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/use-client-method\">here</a>.<br/>\nA demo app for NextJs + Wagmi (which is applicable for wagmi-based libraries) with the older <code>pages</code> router structure <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/mount-hook\">here</a>.</p>","isPage":false,"text":"\nA demo app for RainbowKit is available here\nA demo app for NextJs + Wagmi (which is applicable for wagmi-based libraries) with the app router structure here.\nA demo app for NextJs + Wagmi (which is applicable for wagmi-based libraries) with the older pages router structure here.","title":"Examples","titles":["Using RainbowKit"]},"219":{"href":"/sdk/typescript/connectors/05-web3-onboard#using-web3-onboard","html":"</header>\n<p>The Sequence wallet can be added through the Blocknative web3-onboard package.</p>\n<p>:::tip Try it live :)\nTry <a href=\"https://0xsequence.github.io/demo-dapp-web3-onboard/\">a live Dapp example</a> using Sequence + Metamask + Wallet Connect with Web3-Onboard.</p>\n<p>Source code is available too: <a href=\"https://github.com/0xsequence/demo-dapp-web3-onboard\">https://github.com/0xsequence/demo-dapp-web3-onboard</a>\n:::</p>\n","isPage":true,"text":"\nThe Sequence wallet can be added through the Blocknative web3-onboard package.\n:::tip Try it live :)\nTry a live Dapp example using Sequence + Metamask + Wallet Connect with Web3-Onboard.\nSource code is available too: https://github.com/0xsequence/demo-dapp-web3-onboard\n:::\n","title":"Using Web3-Onboard","titles":[]},"220":{"href":"/sdk/typescript/connectors/05-web3-onboard#installation","html":"\n<p>The Sequence module is available through npm:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @web3-onboard/sequence </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add @web3-onboard/sequence </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n","isPage":false,"text":"\nThe Sequence module is available through npm:\nnpm install @web3-onboard/sequence 0xsequence ethers\nor\nyarn add @web3-onboard/sequence 0xsequence ethers\n","title":"Installation","titles":["Using Web3-Onboard"]},"221":{"href":"/sdk/typescript/connectors/05-web3-onboard#usage","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequenceModule </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@web3-onboard/sequence&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequenceOptions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  appName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;My app&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequenceOnboard</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sequenceModule</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> onboard</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Onboard</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  wallets: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sequenceOnboard,</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">restWallets</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">restofOnboardParams</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n","isPage":false,"text":"\nimport sequenceModule from &#x27;@web3-onboard/sequence&#x27;\n \nconst sequenceOptions = {\n  network: 137,\n  appName: &#x27;My app&#x27;\n}\n \nconst sequenceOnboard = sequenceModule({})\n \nconst onboard = Onboard({\n  wallets: [\n    sequenceOnboard,\n    ...restWallets\n  ],\n  ...restofOnboardParams\n})\n \n","title":"Usage","titles":["Using Web3-Onboard"]},"222":{"href":"/sdk/typescript/connectors/05-web3-onboard#parameters","html":"\n","isPage":false,"text":"\n","title":"Parameters","titles":["Using Web3-Onboard"]},"223":{"href":"/sdk/typescript/connectors/05-web3-onboard#network-optional","html":"\n<p>The default network that the Sequence wallet will attempt to connect to.</p>\n","isPage":false,"text":"\nThe default network that the Sequence wallet will attempt to connect to.\n","title":"network (optional)","titles":["Using Web3-Onboard","Parameters"]},"224":{"href":"/sdk/typescript/connectors/05-web3-onboard#appname-optional","html":"\n<p>The name of the app which will show up in Sequence&#x27;s prompt upon an attempt to connect.</p>\n","isPage":false,"text":"\nThe name of the app which will show up in Sequence&#x27;s prompt upon an attempt to connect.\n","title":"appName (optional)","titles":["Using Web3-Onboard","Parameters"]},"225":{"href":"/sdk/typescript/connectors/05-web3-onboard#example","html":"\n<p>An example demo of an integration of Sequence + Web3 Onboard is available <a href=\"https://github.com/0xsequence/demo-dapp-web3-onboard\">here</a></p>","isPage":false,"text":"\nAn example demo of an integration of Sequence + Web3 Onboard is available here","title":"Example","titles":["Using Web3-Onboard"]},"226":{"href":"/sdk/typescript/connectors/06-web3-react-v6#using-web3-react-v6","html":"</header>\n<p>The connector is available for web3-react V6. Please note that later versions of web3-react cannot be used with the Web3-React V6 connector due to breaking changes.</p>\n","isPage":true,"text":"\nThe connector is available for web3-react V6. Please note that later versions of web3-react cannot be used with the Web3-React V6 connector due to breaking changes.\n","title":"Using Web3-React V6","titles":[]},"227":{"href":"/sdk/typescript/connectors/06-web3-react-v6#installation","html":"\n<p>The connector may be installed via the npm package:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> npm install @0xsequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">web3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">react</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">v6</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">connector 0xsequence ethers</span></span></code></pre>\n","isPage":false,"text":"\nThe connector may be installed via the npm package:\n npm install @0xsequence/web3-react-v6-connector 0xsequence ethers\n","title":"Installation","titles":["Using Web3-React V6"]},"228":{"href":"/sdk/typescript/connectors/06-web3-react-v6#usage","html":"\n","isPage":false,"text":"\n","title":"Usage","titles":["Using Web3-React V6"]},"229":{"href":"/sdk/typescript/connectors/06-web3-react-v6#initialization","html":"\n<p>The connector must be initialized similarly to other connectors.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceConnector } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/web3-react-v6-connector&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  appName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Web3 React Demo app&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequence</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceConnector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, appName: options.appName  })</span></span></code></pre>\n","isPage":false,"text":"\nThe connector must be initialized similarly to other connectors.\nimport { SequenceConnector } from &#x27;@0xsequence/web3-react-v6-connector&#x27;\n \nconst options = {\n  appName: &#x27;Web3 React Demo app&#x27;\n}\n \nexport const sequence = new SequenceConnector({ chainId: 137, appName: options.appName  })\n","title":"Initialization","titles":["Using Web3-React V6","Usage"]},"230":{"href":"/sdk/typescript/connectors/06-web3-react-v6#activationdeactivation","html":"\n<p>The connection can be activated and deactivated from the initialized connector similarly to other connectors.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useWeb3React } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@web3-react/core&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequenceConnector } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./connectors/sequence&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">activate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useWeb3React</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> connectWeb3React</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  activate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sequenceConnector);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> disconnectWeb3React</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  sequenceConnector.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deactivate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe connection can be activated and deactivated from the initialized connector similarly to other connectors.\nimport { useWeb3React } from &#x27;@web3-react/core&#x27;\nimport { sequence as sequenceConnector } from &#x27;./connectors/sequence&#x27;\n \nconst { activate } = useWeb3React()\n \nconst connectWeb3React = async () =&gt; {\n  activate(sequenceConnector);\n}\n \nconst disconnectWeb3React = async () =&gt; {\n  sequenceConnector.deactivate();\n}\n","title":"Activation/Deactivation","titles":["Using Web3-React V6","Usage"]},"231":{"href":"/sdk/typescript/connectors/06-web3-react-v6#options","html":"\n","isPage":false,"text":"\n","title":"Options","titles":["Using Web3-React V6"]},"232":{"href":"/sdk/typescript/connectors/06-web3-react-v6#chainid","html":"\n<p>The default chain id as number that the Sequence wallet will attempt to connect to.</p>\n","isPage":false,"text":"\nThe default chain id as number that the Sequence wallet will attempt to connect to.\n","title":"chainId","titles":["Using Web3-React V6","Options"]},"233":{"href":"/sdk/typescript/connectors/06-web3-react-v6#appname-optional","html":"\n<p>The value of appName will be displayed by the Sequence wallet when initiating a connection.</p>\n","isPage":false,"text":"\nThe value of appName will be displayed by the Sequence wallet when initiating a connection.\n","title":"appName (optional)","titles":["Using Web3-React V6","Options"]},"234":{"href":"/sdk/typescript/connectors/06-web3-react-v6#example","html":"\n<p>A demo app for Web3-React v6 is available <a href=\"https://github.com/0xsequence/demo-dapp-web3-react/tree/v6\">here</a></p>","isPage":false,"text":"\nA demo app for Web3-React v6 is available here","title":"Example","titles":["Using Web3-React V6"]},"235":{"href":"/sdk/typescript/connectors/07-web3modal#using-web3modal","html":"</header>\n<p>The Sequence wallet can easily be used with Web3Modal.</p>\n<p>:::tip Try it live :)\nTry <a href=\"https://0xsequence.github.io/demo-dapp-web3modal/\">a live Dapp example</a> using Sequence + Wallet Connect with Web3Modal.</p>\n<p>Source code is available too: <a href=\"https://github.com/0xsequence/demo-dapp-web3modal\">https://github.com/0xsequence/demo-dapp-web3modal</a>\n:::</p>\n","isPage":true,"text":"\nThe Sequence wallet can easily be used with Web3Modal.\n:::tip Try it live :)\nTry a live Dapp example using Sequence + Wallet Connect with Web3Modal.\nSource code is available too: https://github.com/0xsequence/demo-dapp-web3modal\n:::\n","title":"Using Web3Modal","titles":[]},"236":{"href":"/sdk/typescript/connectors/07-web3modal#usage","html":"\n<p>The sequence wallet is compatible with wallet connect V2 and is therefore fully compatible with web3modal by default.\nUsers can use the Scan button in the sequence wallet to connect.</p>\n<img src=\"/img/walletconnect/wallet-connect-scan.png\"/>\n","isPage":false,"text":"\nThe sequence wallet is compatible with wallet connect V2 and is therefore fully compatible with web3modal by default.\nUsers can use the Scan button in the sequence wallet to connect.\n\n","title":"Usage","titles":["Using Web3Modal"]},"237":{"href":"/sdk/typescript/connectors/07-web3modal#example","html":"\n<p>An example demo for the sequence Wallet + web3modal is available [here] (<a href=\"https://github.com/0xsequence/demo-dapp-web3modal\">https://github.com/0xsequence/demo-dapp-web3modal</a>)</p>","isPage":false,"text":"\nAn example demo for the sequence Wallet + web3modal is available [here] (https://github.com/0xsequence/demo-dapp-web3modal)","title":"Example","titles":["Using Web3Modal"]},"238":{"href":"/sdk/typescript/connectors/08-FAQ#nextjs","html":"\n","isPage":true,"text":"\n","title":"NextJs","titles":[null]},"239":{"href":"/sdk/typescript/connectors/08-FAQ#why-does-my-wallet-integration-produce-an-error-when-used-with-nextjs","html":"\n<p>Wallet libraries and connectors must be rendered in the browser. This is particularly true for Wagmi and Wagmi-based libraries. Attempts to render the page elsewhere, such as on backend server, can produce errors in some situations. Rendering on the server is therefore highly discouraged.</p>\n<p>The method for fixing this issue will depend on the folder structure. The <code>pages</code> folder structure is available for all versions of NextJs, while the <code>app</code> folder structure is only available for NextJs version 13 and above and may require being turned on through an experimental setting.</p>\n<p>See using wallet libraries with <a href=\"/sdk/typescript/connectors/08-FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-pages-directory-all-versions-of-nextjs\">next.js pages directory</a></p>\n<p>See using wallet libraries with <a href=\"/sdk/typescript/connectors/08-FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only\">next.js app directory(NextJs 13+ feature)</a></p>\n","isPage":false,"text":"\nWallet libraries and connectors must be rendered in the browser. This is particularly true for Wagmi and Wagmi-based libraries. Attempts to render the page elsewhere, such as on backend server, can produce errors in some situations. Rendering on the server is therefore highly discouraged.\nThe method for fixing this issue will depend on the folder structure. The pages folder structure is available for all versions of NextJs, while the app folder structure is only available for NextJs version 13 and above and may require being turned on through an experimental setting.\nSee using wallet libraries with next.js pages directory\nSee using wallet libraries with next.js app directory(NextJs 13+ feature)\n","title":"Why does my wallet integration produce an error when used with next.js?","titles":[null,"NextJs"]},"240":{"href":"/sdk/typescript/connectors/08-FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-pages-directory-all-versions-of-nextjs","html":"\n<p>The content of the application which depends on Wagmi hooks must be mounted only once the application is rendered in the client. This is a limitation due to wagmi when used with NextJs, and all wagmi-based libraries will inherit this limitation. To do so we can use a <code>useEffect</code> hook to wait before rendering the application.</p>\n<p>In the example below, we wait until the app is mounted in the client before rendering the rest of the application:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useIsMounted } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;../hooks&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Home </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;../components/Home&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Page</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> isMounted</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useIsMounted</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">isMounted) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">Home</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Page</span></span></code></pre>\n<p>A full code example of this setup working with the Wagmi library can be found <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/mount-hook\">on github</a>.\nThe method described above is the one recommended by Wagmi and is demonstrated in their <a href=\"https://github.com/wagmi-dev/wagmi/blob/0.12.x/examples/_dev/src/pages/index.tsx\">official example</a>.</p>\n","isPage":false,"text":"\nThe content of the application which depends on Wagmi hooks must be mounted only once the application is rendered in the client. This is a limitation due to wagmi when used with NextJs, and all wagmi-based libraries will inherit this limitation. To do so we can use a useEffect hook to wait before rendering the application.\nIn the example below, we wait until the app is mounted in the client before rendering the rest of the application:\nimport { useIsMounted } from &#x27;../hooks&#x27;\nimport Home from &#x27;../components/Home&#x27;\n \nconst Page = () =&gt; {\n  const isMounted = useIsMounted()\n \n  if (!isMounted) return null\n  return (\n    &lt;&gt;\n      &lt;Home /&gt;\n    &lt;/&gt;\n  )\n}\n \nexport default Page\nA full code example of this setup working with the Wagmi library can be found on github.\nThe method described above is the one recommended by Wagmi and is demonstrated in their official example.\n","title":"How do I use a wallet library and connector with next.js using the pages directory (all versions of NextJs)?","titles":[null,"NextJs"]},"241":{"href":"/sdk/typescript/connectors/08-FAQ#how-do-i-use-a-wallet-library-and-connector-with-nextjs-using-the-app-directory-version-13-and-above-only","html":"\n<p>NextJs 13 and above allows using a new folder structure in which the content is placed in an <code>app</code> directory. Enabling this feature may require explicitly indicating it with an experimental setting.\nWhen using such a folder structure, NextJs allows the declaration of Client Components which are components that will be rendered in the browser.\nA wrapper component containing the wallet library initialized with all the connectors must be declared with the <code>&quot;use client&quot;</code> directive. The <code>&quot;use client&quot;</code> directive is what will turn the wrapper component into a Client Component to be rendered in the browser.</p>\n<p>In addition, there is a bug with wagmi and nextJs when using the autoConnect feature which causes</p>\n<p>In the example below, we declare a wrapper component with the <code>&quot;use client&quot;</code> directive:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;use client&quot;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // this directive informs next.js that the component is a Client Component to be rendered in the browser</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WagmiWrapper</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">children</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wagmiClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    autoConnect: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connectors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    provider,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    webSocketProvider,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wagmiClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">      {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">children</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WagmiWrapper</span></span></code></pre>\n<p>This wrapper component can then be imported normally and wrap the rest of the application. The child components can be a combination of Client and Server components.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// We import a custom wrapper component that initializes the wallet library and all its connectors</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// An example of the content of this wrapper component can be found here: https://github.com/0xsequence/demo-dapp-wagmi-next/blob/master/components/WagmiProvider.tsx</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WagmiWrapper </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./WagmiWrapper&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// We can then wrap our entire app with this browser&#x27;s rendered component</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyApp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">Component</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">pageProps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AppProps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiWrapper</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">Component</span><span style=\"color:#24292E;--shiki-dark:#F47067\"> {</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pageProps</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">WagmiWrapper</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>A full code example using Nextjs and the <code>app</code> directory can be found <a href=\"https://github.com/0xsequence/demo-dapp-wagmi-next/tree/use-client-method\">on github</a>.\nThe method described above is the one recommended by Wagmi through their NextJs example which can be consulted by running the command <code>npx create-wagmi</code> and selecting the nextJs option.</p>\n<p>Click <a href=\"https://beta.nextjs.org/docs/rendering/server-and-client-components#client-components\">here</a> for more information about Client Components.</p>","isPage":false,"text":"\nNextJs 13 and above allows using a new folder structure in which the content is placed in an app directory. Enabling this feature may require explicitly indicating it with an experimental setting.\nWhen using such a folder structure, NextJs allows the declaration of Client Components which are components that will be rendered in the browser.\nA wrapper component containing the wallet library initialized with all the connectors must be declared with the &quot;use client&quot; directive. The &quot;use client&quot; directive is what will turn the wrapper component into a Client Component to be rendered in the browser.\nIn addition, there is a bug with wagmi and nextJs when using the autoConnect feature which causes\nIn the example below, we declare a wrapper component with the &quot;use client&quot; directive:\n&quot;use client&quot; // this directive informs next.js that the component is a Client Component to be rendered in the browser\n \nconst WagmiWrapper = ({ children }) =&gt; {\n  const wagmiClient = createClient({\n    autoConnect: true,\n    connectors,\n    provider,\n    webSocketProvider,\n  });\n \n \n  return (\n    &lt;WagmiConfig client={wagmiClient}&gt;\n      {children}\n    &lt;/WagmiConfig&gt;\n  );\n}\n \nexport default WagmiWrapper\nThis wrapper component can then be imported normally and wrap the rest of the application. The child components can be a combination of Client and Server components.\n// We import a custom wrapper component that initializes the wallet library and all its connectors\n// An example of the content of this wrapper component can be found here: https://github.com/0xsequence/demo-dapp-wagmi-next/blob/master/components/WagmiProvider.tsx\nimport WagmiWrapper from &#x27;./WagmiWrapper&#x27;\n \n// We can then wrap our entire app with this browser&#x27;s rendered component\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    &lt;WagmiWrapper&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/WagmiWrapper&gt;\n  );\n}\nA full code example using Nextjs and the app directory can be found on github.\nThe method described above is the one recommended by Wagmi through their NextJs example which can be consulted by running the command npx create-wagmi and selecting the nextJs option.\nClick here for more information about Client Components.","title":"How do I use a wallet library and connector with next.js using the app directory (version 13 and above only)?","titles":[null,"NextJs"]},"242":{"href":"/sdk/unity/Advanced/01-introduction#advanced---introduction","html":"</header>\n<p>For advanced users with experience developing applications on EVM-based blockchains, we&#x27;ve provided our own lightweight, custom-made for Unity, Ethereum library: <a href=\"https://github.com/0xsequence/sequence-unity/tree/master/Assets/SequenceSDK/Ethereum\">SequenceEthereum</a>.\nSequenceEthereum should provide everything you need to build your Unity app on the EVM, without all the extra bells and whistles that the popular <a href=\"https://github.com/Nethereum/Nethereum\">Nethereum</a> library provides.</p>\n<p>While SequenceEthereum is heavily tested, in general, when working with asynchronous methods in the library, you should consider them to be &quot;unsafe&quot;, in that they <i>may</i> throw Exceptions when used improperly.\nIn general, wrapping async calls that can potentially throw Exceptions in try catch blocks is a best practice; particularly in Unity, where <code>Tasks</code> can fail silently when throwing exceptions - making debugging difficult when not wrapping calls in try catch blocks.</p>\n","isPage":true,"text":"\nFor advanced users with experience developing applications on EVM-based blockchains, we&#x27;ve provided our own lightweight, custom-made for Unity, Ethereum library: SequenceEthereum.\nSequenceEthereum should provide everything you need to build your Unity app on the EVM, without all the extra bells and whistles that the popular Nethereum library provides.\nWhile SequenceEthereum is heavily tested, in general, when working with asynchronous methods in the library, you should consider them to be &quot;unsafe&quot;, in that they may throw Exceptions when used improperly.\nIn general, wrapping async calls that can potentially throw Exceptions in try catch blocks is a best practice; particularly in Unity, where Tasks can fail silently when throwing exceptions - making debugging difficult when not wrapping calls in try catch blocks.\n","title":"Advanced - Introduction","titles":[]},"243":{"href":"/sdk/unity/Advanced/01-introduction#important-components","html":"\n<p>When working with the SequenceEthereum library it can be helpful to understand some of the main &quot;components&quot; and how they logically fit together.</p>\n","isPage":false,"text":"\nWhen working with the SequenceEthereum library it can be helpful to understand some of the main &quot;components&quot; and how they logically fit together.\n","title":"Important Components","titles":["Advanced - Introduction"]},"244":{"href":"/sdk/unity/Advanced/02-wallets#wallets","html":"</header>\n<p>In the context of SequenceEthereum, a <code>Wallet</code> is defined by the <code>IWallet</code> interface. There are currently 2 implementations of the <code>IWallet</code> interface in this SDK.</p>\n","isPage":true,"text":"\nIn the context of SequenceEthereum, a Wallet is defined by the IWallet interface. There are currently 2 implementations of the IWallet interface in this SDK.\n","title":"Wallets","titles":[]},"245":{"href":"/sdk/unity/Advanced/02-wallets#1-ethwallet","html":"\n<p><code>EthWallet</code> is a standard <a href=\"https://ethereum.stackexchange.com/questions/5828/what-is-an-eoa-account\">EOA wallet</a> for EVM chains.</p>\n<p>An EthWallet is easily created:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IWallet eoaWallet = new EthWallet(); // This will generate a cryptographically random private key</span></span>\n<span class=\"line\"><span>IWallet eoaWallet = new EthWallet(privateKeyString); // Create a wallet using a previously generated private key</span></span></code></pre>\n","isPage":false,"text":"\nEthWallet is a standard EOA wallet for EVM chains.\nAn EthWallet is easily created:\nIWallet eoaWallet = new EthWallet(); // This will generate a cryptographically random private key\nIWallet eoaWallet = new EthWallet(privateKeyString); // Create a wallet using a previously generated private key\n","title":"1.","titles":["Wallets"]},"246":{"href":"/sdk/unity/Advanced/02-wallets#2-waastowalletadapter","html":"\n<p><code>WaaSToWalletAdapter</code> is an adapter that allows you to use a <code>WaaSWallet</code> with the same <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Wallet/IWallet.cs\"><code>IWallet</code> interface</a> as an <code>EthWallet</code> so that it may be used interchangeably with EOA wallets throughout the rest of the SequenceEthereum library.</p>\n<p>A WaaSToWalletAdapter is easily created once you have a WaaSWallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IWallet waasAdapter = new WaaSToWalletAdapter(waasWallet);</span></span></code></pre>\n","isPage":false,"text":"\nWaaSToWalletAdapter is an adapter that allows you to use a WaaSWallet with the same IWallet interface as an EthWallet so that it may be used interchangeably with EOA wallets throughout the rest of the SequenceEthereum library.\nA WaaSToWalletAdapter is easily created once you have a WaaSWallet:\nIWallet waasAdapter = new WaaSToWalletAdapter(waasWallet);\n","title":"2.","titles":["Wallets"]},"247":{"href":"/sdk/unity/Advanced/02-wallets#methods","html":"\n<p>The <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Wallet/IWallet.cs\"><code>IWallet</code> interface</a> provides a number of methods for you. The most important of which are:</p>\n","isPage":false,"text":"\nThe IWallet interface provides a number of methods for you. The most important of which are:\n","title":"Methods","titles":["Wallets"]},"248":{"href":"/sdk/unity/Advanced/02-wallets#getaddress","html":"\n<p>Returns the <code>Address</code> for the wallet</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Address address = wallet.GetAddress();</span></span></code></pre>\n","isPage":false,"text":"\nReturns the Address for the wallet\nAddress address = wallet.GetAddress();\n","title":"GetAddress","titles":["Wallets","Methods"]},"249":{"href":"/sdk/unity/Advanced/02-wallets#sendtransaction","html":"\n<p>Signs the given <code>EthTransaction</code> and submits it via the given client</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string transactionHash = await wallet.SendTransaction(client, transaction);</span></span></code></pre>\n","isPage":false,"text":"\nSigns the given EthTransaction and submits it via the given client\nstring transactionHash = await wallet.SendTransaction(client, transaction);\n","title":"SendTransaction","titles":["Wallets","Methods"]},"250":{"href":"/sdk/unity/Advanced/02-wallets#sendtransactionandwaitforreceipt","html":"\n<p>Signs the given <code>EthTransaction</code> and submits it via the given client then waits for the <code>TransactionReceipt</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);</span></span></code></pre>\n","isPage":false,"text":"\nSigns the given EthTransaction and submits it via the given client then waits for the TransactionReceipt\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n","title":"SendTransactionAndWaitForReceipt","titles":["Wallets","Methods"]},"251":{"href":"/sdk/unity/Advanced/02-wallets#sendtransactionbatch","html":"\n<p>Signs the given <code>EthTransaction[]</code> and submits them via the given client.\nIf wallet is an <code>EthWallet</code>, the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a <code>WaaSToWalletAdapter</code>, the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an <code>EthWallet</code> the <code>string[]</code> (transaction hashes) you receive will be equal in length to the <code>EthTransaction[]</code> you submitted. While, if the wallet is a <code>WaaSToWalletAdapter</code>, you will only receive one transaction hash (<code>string[]</code> of length 1)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string[] transactionHashes = await wallet.SendTransactionBatch(client, transactions);</span></span></code></pre>\n","isPage":false,"text":"\nSigns the given EthTransaction[] and submits them via the given client.\nIf wallet is an EthWallet, the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a WaaSToWalletAdapter, the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an EthWallet the string[] (transaction hashes) you receive will be equal in length to the EthTransaction[] you submitted. While, if the wallet is a WaaSToWalletAdapter, you will only receive one transaction hash (string[] of length 1)\nstring[] transactionHashes = await wallet.SendTransactionBatch(client, transactions);\n","title":"SendTransactionBatch","titles":["Wallets","Methods"]},"252":{"href":"/sdk/unity/Advanced/02-wallets#sendtransactionbatchandwaitforreceipts","html":"\n<p>Signs the given <code>EthTransaction[]</code> and submits them via the given client then waits for the <code>TransactionReceipt[]</code>.\nIf wallet is an <code>EthWallet</code>, the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a <code>WaaSToWalletAdapter</code>, the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an <code>EthWallet</code> the <code>TransactionReceipt[]</code> you receive will be equal in length to the <code>EthTransaction[]</code> you submitted. While, if the wallet is a <code>WaaSToWalletAdapter</code>, you will only receive one transaction receipt (<code>TransactionReceipt[]</code> of length 1)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>TransactionReceipt[] receipts = await wallet.SendTransactionAndWaitForReceipt(client, transactions);</span></span></code></pre>\n","isPage":false,"text":"\nSigns the given EthTransaction[] and submits them via the given client then waits for the TransactionReceipt[].\nIf wallet is an EthWallet, the transactions will be submitted sequentially, each of which may pass or fail. If the wallet is a WaaSToWalletAdapter, the transactions will be batched together into a single transaction that is submitted all at once and either passes or fails as a whole.\nSimilarly, if a wallet is an EthWallet the TransactionReceipt[] you receive will be equal in length to the EthTransaction[] you submitted. While, if the wallet is a WaaSToWalletAdapter, you will only receive one transaction receipt (TransactionReceipt[] of length 1)\nTransactionReceipt[] receipts = await wallet.SendTransactionAndWaitForReceipt(client, transactions);\n","title":"SendTransactionBatchAndWaitForReceipts","titles":["Wallets","Methods"]},"253":{"href":"/sdk/unity/Advanced/02-wallets#signmessage","html":"\n<p>Given a message and an optional chain id, sign the message using the wallet. Omit the chain id from the signature if not provided</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string signedMessage = await wallet.SignMessage(message, chainId)</span></span></code></pre>\n<p>Note: the chainId is expected to be in hexadecimal format. If you are working with a <code>Chain</code> object (recommended), you can use the <code>AsString</code> method to get the hexadecimal format of the chain id</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string signedMessage = await wallet.SignMessage(message, Chain.Polygon.AsString());</span></span></code></pre>","isPage":false,"text":"\nGiven a message and an optional chain id, sign the message using the wallet. Omit the chain id from the signature if not provided\nstring signedMessage = await wallet.SignMessage(message, chainId)\nNote: the chainId is expected to be in hexadecimal format. If you are working with a Chain object (recommended), you can use the AsString method to get the hexadecimal format of the chain id\nstring signedMessage = await wallet.SignMessage(message, Chain.Polygon.AsString());","title":"SignMessage","titles":["Wallets","Methods"]},"254":{"href":"/sdk/unity/Advanced/03-clients#clients","html":"</header>\n<p>In the context of SequenceEthereum, a <code>Client</code> is defined by the <a href=\"https://github.com/0xsequence/sequence-unity/blob/master/Assets/SequenceSDK/Ethereum/Provider/IEthClient.cs\"><code>IEthClient</code> interface</a>.</p>\n<p>Creating a client requires a <code>Chain</code>. This will use our highly available and responsive Node Gateway service for your RPC requests; accessed using the API key from the Builder you&#x27;ve provided in your <code>SequenceConfig</code> scriptable object. If you prefer to use your own RPC URL, you can create a <code>SequenceEthClient</code> using a URL string as a parameter instead.</p>\n<p>You can create a client using this snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>IEthClient client = new SequenceEthClient(Chain.Polygon);</span></span></code></pre>\n","isPage":true,"text":"\nIn the context of SequenceEthereum, a Client is defined by the IEthClient interface.\nCreating a client requires a Chain. This will use our highly available and responsive Node Gateway service for your RPC requests; accessed using the API key from the Builder you&#x27;ve provided in your SequenceConfig scriptable object. If you prefer to use your own RPC URL, you can create a SequenceEthClient using a URL string as a parameter instead.\nYou can create a client using this snippet:\nIEthClient client = new SequenceEthClient(Chain.Polygon);\n","title":"Clients","titles":[]},"255":{"href":"/sdk/unity/Advanced/03-clients#methods","html":"\n<p>As your connection point to Ethereum nodes, there are a number of methods that can be performed by a client, these can be found in the <code>IEthClient</code> interface and are implemented by <code>SequenceEthClient</code>.</p>\n<p>Note: with the exception of BalanceAt (potentially), most users will not need to make use of these methods, but we have included them in our documentation for completeness.</p>\n","isPage":false,"text":"\nAs your connection point to Ethereum nodes, there are a number of methods that can be performed by a client, these can be found in the IEthClient interface and are implemented by SequenceEthClient.\nNote: with the exception of BalanceAt (potentially), most users will not need to make use of these methods, but we have included them in our documentation for completeness.\n","title":"Methods","titles":["Clients"]},"256":{"href":"/sdk/unity/Advanced/03-clients#balanceat","html":"\n<p>Used to get the gas currency balance of a given wallet at a given blockNumber (in hexadecimal format provided as a string)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar balance = await client.BalanceAt(wallet.GetAddress()); // By default, if no blockNumber string is provided, check the latest block</span></span>\n<span class=\"line\"><span>BigIntegar balance = await client.BalanceAt(wallet.GetAddress(), blockNumber);</span></span></code></pre>\n<p>Note: there are two special values for blockNumber. &quot;earliest&quot; will get the balance at the earliest block on the chain. &quot;latest&quot; will get the balance at the latest block on the chain and is the default parameter when none is provided. Otherwise, you&#x27;ll want to provide the blockNumber string in hexadecimal format.</p>\n<b><u>Unless you <i>really</i> want to get into the weeds with how things work, it is HIGHLY recommended to move on to the next page of the documentation at this point</u></b>\n","isPage":false,"text":"\nUsed to get the gas currency balance of a given wallet at a given blockNumber (in hexadecimal format provided as a string)\nBigIntegar balance = await client.BalanceAt(wallet.GetAddress()); // By default, if no blockNumber string is provided, check the latest block\nBigIntegar balance = await client.BalanceAt(wallet.GetAddress(), blockNumber);\nNote: there are two special values for blockNumber. &quot;earliest&quot; will get the balance at the earliest block on the chain. &quot;latest&quot; will get the balance at the latest block on the chain and is the default parameter when none is provided. Otherwise, you&#x27;ll want to provide the blockNumber string in hexadecimal format.\nUnless you really want to get into the weeds with how things work, it is HIGHLY recommended to move on to the next page of the documentation at this point\n","title":"BalanceAt","titles":["Clients","Methods"]},"257":{"href":"/sdk/unity/Advanced/03-clients#blockbynumber","html":"\n<p>Used to get the <code>Block</code> with a specific block number.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Block block = await client.BlockByNumber(blockNumber);</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nUsed to get the Block with a specific block number.\nBlock block = await client.BlockByNumber(blockNumber);\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"BlockByNumber","titles":["Clients","Methods"]},"258":{"href":"/sdk/unity/Advanced/03-clients#blockbyhash","html":"\n<p>Used to get the <code>Block</code> by a specified block hash (string)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Block block = await client.BlockByHash(blockHash);</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the Block by a specified block hash (string)\nBlock block = await client.BlockByHash(blockHash);\n","title":"BlockByHash","titles":["Clients","Methods"]},"259":{"href":"/sdk/unity/Advanced/03-clients#blocknumber","html":"\n<p>Used to get the most recent block number in hexadecimal format</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string blockNumber = await client.BlockNumber();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the most recent block number in hexadecimal format\nstring blockNumber = await client.BlockNumber();\n","title":"BlockNumber","titles":["Clients","Methods"]},"260":{"href":"/sdk/unity/Advanced/03-clients#blockrange","html":"\n<p>Used to get a <code>List&lt;Block&gt;</code> from the blocks in a range specified by blockNumbers</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>List&lt;Block&gt; blockRange = await client.BlockRange(startingBlockNumber, endingBlockNumber);</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nUsed to get a List&lt;Block&gt; from the blocks in a range specified by blockNumbers\nList&lt;Block&gt; blockRange = await client.BlockRange(startingBlockNumber, endingBlockNumber);\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"BlockRange","titles":["Clients","Methods"]},"261":{"href":"/sdk/unity/Advanced/03-clients#chainid","html":"\n<p>Used to get the chain id in hexadecimal format for the chain the client is connected to</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string chainId = await client.ChainID();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the chain id in hexadecimal format for the chain the client is connected to\nstring chainId = await client.ChainID();\n","title":"ChainID","titles":["Clients","Methods"]},"262":{"href":"/sdk/unity/Advanced/03-clients#codeat","html":"\n<p>Used to get the bytecode for a smart contract at a given address in hexadecimal format at a specified blockNumber</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string code = await client.CodeAt(contractAddress, blockNumber);</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nUsed to get the bytecode for a smart contract at a given address in hexadecimal format at a specified blockNumber\nstring code = await client.CodeAt(contractAddress, blockNumber);\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"CodeAt","titles":["Clients","Methods"]},"263":{"href":"/sdk/unity/Advanced/03-clients#estimategas","html":"\n<p>Given a <code>TransactionCall</code> estimate the amount of gas required for the transaction</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar gas = await client.EstimateGas(transactionCall);</span></span></code></pre>\n","isPage":false,"text":"\nGiven a TransactionCall estimate the amount of gas required for the transaction\nBigIntegar gas = await client.EstimateGas(transactionCall);\n","title":"EstimateGas","titles":["Clients","Methods"]},"264":{"href":"/sdk/unity/Advanced/03-clients#feehistory","html":"\n<p>Get a <code>FeeHistoryResult</code> for gas fees paid blockCount blocks since newestBlock (blockNumber)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>FeeHistoryResult feeHistory = await client.FeeHistory(blockCount, newestBlock, new int[] { });</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nGet a FeeHistoryResult for gas fees paid blockCount blocks since newestBlock (blockNumber)\nFeeHistoryResult feeHistory = await client.FeeHistory(blockCount, newestBlock, new int[] { });\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"FeeHistory","titles":["Clients","Methods"]},"265":{"href":"/sdk/unity/Advanced/03-clients#networkid","html":"\n<p>Used to get the chain id in integer format (as string) for the chain the client is connected to</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string networkId = await client.NetworkId();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the chain id in integer format (as string) for the chain the client is connected to\nstring networkId = await client.NetworkId();\n","title":"NetworkId","titles":["Clients","Methods"]},"266":{"href":"/sdk/unity/Advanced/03-clients#nonceat","html":"\n<p>Used to get the recommended nonce for a given <code>Address</code> at a given blockNumber (defaults to &quot;latest&quot;)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigInteger nonce = await client.NonceAt(wallet.GetAddress()); // Nonce at latest</span></span>\n<span class=\"line\"><span>BigIntegar nonce = await client.NonceAt(wallet.GetAddress(), blockNumber);</span></span></code></pre>\n<p>Note: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;</p>\n","isPage":false,"text":"\nUsed to get the recommended nonce for a given Address at a given blockNumber (defaults to &quot;latest&quot;)\nBigInteger nonce = await client.NonceAt(wallet.GetAddress()); // Nonce at latest\nBigIntegar nonce = await client.NonceAt(wallet.GetAddress(), blockNumber);\nNote: as above, blockNumber should be in hexadecimal format or special values &quot;ealiest&quot; and &quot;latest&quot;\n","title":"NonceAt","titles":["Clients","Methods"]},"267":{"href":"/sdk/unity/Advanced/03-clients#sendrawtransaction","html":"\n<p>Given a signed transaction string, submit the transaction to the network and return a transaction hash</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string transactionHash = await client.SendRawTransaction(signedTransactionString);</span></span></code></pre>\n","isPage":false,"text":"\nGiven a signed transaction string, submit the transaction to the network and return a transaction hash\nstring transactionHash = await client.SendRawTransaction(signedTransactionString);\n","title":"SendRawTransaction","titles":["Clients","Methods"]},"268":{"href":"/sdk/unity/Advanced/03-clients#suggestgasprice","html":"\n<p>Used to get a suggested gas price</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar gasPrice = await client.SuggestGasPrice();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get a suggested gas price\nBigIntegar gasPrice = await client.SuggestGasPrice();\n","title":"SuggestGasPrice","titles":["Clients","Methods"]},"269":{"href":"/sdk/unity/Advanced/03-clients#suggestgastipcap","html":"\n<p>Used to get the max suggested priority fee for gas</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar gasTipCap = await client.SuggestGasTipCap();</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the max suggested priority fee for gas\nBigIntegar gasTipCap = await client.SuggestGasTipCap();\n","title":"SuggestGasTipCap","titles":["Clients","Methods"]},"270":{"href":"/sdk/unity/Advanced/03-clients#transactionbyhash","html":"\n<p>Used to get a <code>Transaction</code> by transaction hash</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Transaction transaction = await client.TransactionByHash(transactionHash);</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get a Transaction by transaction hash\nTransaction transaction = await client.TransactionByHash(transactionHash);\n","title":"TransactionByHash","titles":["Clients","Methods"]},"271":{"href":"/sdk/unity/Advanced/03-clients#transactioncount","html":"\n<p>Used to get the number of transactions in a block by block hash</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>BigIntegar transactionCount = await client.TransactionCount(blockHash);</span></span></code></pre>\n","isPage":false,"text":"\nUsed to get the number of transactions in a block by block hash\nBigIntegar transactionCount = await client.TransactionCount(blockHash);\n","title":"TransactionCount","titles":["Clients","Methods"]},"272":{"href":"/sdk/unity/Advanced/03-clients#waitfortransactionreceipt","html":"\n<p>Provide a transaction hash in order to wait for and return the <code>TransactionReceipt</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>TransactionReceipt receipt = await client.WaitForTransactionReceipt(transactionHash);</span></span></code></pre>","isPage":false,"text":"\nProvide a transaction hash in order to wait for and return the TransactionReceipt\nTransactionReceipt receipt = await client.WaitForTransactionReceipt(transactionHash);","title":"WaitForTransactionReceipt","titles":["Clients","Methods"]},"273":{"href":"/sdk/unity/Advanced/04-transfers#transfers","html":"</header>\n<p>In order to transfer ETH (or the gas currency for your network), it is recommended to use <code>TranferEth.CreateTransaction</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>EthTransaction transferTransaction = await TransferEth.CreateTransaction(client, wallet, recipientAddress, DecimalNormalizer.Normalize(1));</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transferTransaction);</span></span></code></pre>\n<p>Behind the scenes, this will create a <code>GasLimitEstimator</code> which will construct the transaction for you - including determining the appropriate gasPrice, gasLimit, and nonce.</p>","isPage":true,"text":"\nIn order to transfer ETH (or the gas currency for your network), it is recommended to use TranferEth.CreateTransaction\nEthTransaction transferTransaction = await TransferEth.CreateTransaction(client, wallet, recipientAddress, DecimalNormalizer.Normalize(1));\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transferTransaction);\nBehind the scenes, this will create a GasLimitEstimator which will construct the transaction for you - including determining the appropriate gasPrice, gasLimit, and nonce.","title":"Transfers","titles":[]},"274":{"href":"/sdk/unity/Advanced/05-contracts#contracts","html":"</header>\n<p>Creating a <code>Contract</code> object for an already deployed contract is rather straightforward.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract contract = new Contract(contractAddress, abi);</span></span></code></pre>\n<p>While it is not strictly required, it is <i>highly</i> recommended to provide the contract ABI as a string when creating a contract object. Failure to do so will make it so that you cannot fully take advantage of our ABI encoding and decoding.\nIf you do chose to go down this route, you will need to provide the entire function signature (function name + parameter types in brackets - e.g. transfer(address,uint256) for the ERC20 transfer method) when calling a function or querying the contract and you will only ever receive a string as a response to queries.</p>\n","isPage":true,"text":"\nCreating a Contract object for an already deployed contract is rather straightforward.\nContract contract = new Contract(contractAddress, abi);\nWhile it is not strictly required, it is highly recommended to provide the contract ABI as a string when creating a contract object. Failure to do so will make it so that you cannot fully take advantage of our ABI encoding and decoding.\nIf you do chose to go down this route, you will need to provide the entire function signature (function name + parameter types in brackets - e.g. transfer(address,uint256) for the ERC20 transfer method) when calling a function or querying the contract and you will only ever receive a string as a response to queries.\n","title":"Contracts","titles":[]},"275":{"href":"/sdk/unity/Advanced/05-contracts#calling-smart-contract-functions","html":"\n<p>To call a smart contract, you&#x27;ll use the <code>CallFunction</code> method to create a <code>CallContractFunction</code> object which will determine the appropriate gasPrice, gasLimit, nonce, and data to include in a newly assembled <code>EthTransaction</code> when provided with a client and a <code>ContractCall</code> object to the <code>Create</code> async Task</p>\n<p>An example of calling a smart contract would look like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger).SendTransactionMethodAndWaitForReceipt(wallet, client);</span></span></code></pre>\n<p>Note: if you don&#x27;t want to wait for the receipt, you can use <code>SendTransactionMethod</code> instead.</p>\n<p>Alternatively, if you want to simply create the <code>EthTransaction</code> and send it at a later time, you can use the <code>CallContractFunction</code> object from <code>CallFunction</code> directly.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case</span></span>\n<span class=\"line\"><span>EthTransaction transaction = await erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger).Create(client, new ContractCall(wallet.GetAddress()));</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// or </span></span>\n<span class=\"line\"><span>CallContractFunction transactionCreator = erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger);</span></span>\n<span class=\"line\"><span>EthTransaction transaction = await transactionCreator.Create(client, new ContractCall(wallet.GetAddress()));</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// or </span></span>\n<span class=\"line\"><span>CallContractFunction transactionCreator = erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger);</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await transactionCreator.SendTransactionMethodAndWaitForReceipt(wallet, client);</span></span></code></pre>\n<p>You&#x27;ll notice that the <code>CallFunction</code> method accepts an arbitrary number of arguments. You&#x27;ll want to provide the arguments in the order they are provided in the ABI/function signature.</p>\n","isPage":false,"text":"\nTo call a smart contract, you&#x27;ll use the CallFunction method to create a CallContractFunction object which will determine the appropriate gasPrice, gasLimit, nonce, and data to include in a newly assembled EthTransaction when provided with a client and a ContractCall object to the Create async Task\nAn example of calling a smart contract would look like:\nContract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case\nTransactionReceipt receipt = await erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger).SendTransactionMethodAndWaitForReceipt(wallet, client);\nNote: if you don&#x27;t want to wait for the receipt, you can use SendTransactionMethod instead.\nAlternatively, if you want to simply create the EthTransaction and send it at a later time, you can use the CallContractFunction object from CallFunction directly.\nContract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case\nEthTransaction transaction = await erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger).Create(client, new ContractCall(wallet.GetAddress()));\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n\n// or \nCallContractFunction transactionCreator = erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger);\nEthTransaction transaction = await transactionCreator.Create(client, new ContractCall(wallet.GetAddress()));\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n\n// or \nCallContractFunction transactionCreator = erc20Contract.CallFunction(&quot;transfer&quot;, toAddress, amountAsBigInteger);\nTransactionReceipt receipt = await transactionCreator.SendTransactionMethodAndWaitForReceipt(wallet, client);\nYou&#x27;ll notice that the CallFunction method accepts an arbitrary number of arguments. You&#x27;ll want to provide the arguments in the order they are provided in the ABI/function signature.\n","title":"Calling Smart Contract Functions","titles":["Contracts"]},"276":{"href":"/sdk/unity/Advanced/05-contracts#understanding-data-type-mappings","html":"\n<p>When interacting with smart contracts, it is important to understand how EVM datatypes are mapped to C# datatypes in the SequenceEthereum library.</p>\n<p>bool -&gt; bool</p>\n<p>Integers (int, uint, int256, uint8, ...) -&gt; BigInteger</p>\n<p>address -&gt; Address or string</p>\n<p>string -&gt; string</p>\n<p>Fixed bytes (bytesN for any N value) -&gt; FixedByte</p>\n<p>bytes -&gt; byte[]</p>\n<p>If you were to, for example, provide a string where the ABI expects an Integer, you will receive an exception, even if that string could be converted into an integer.</p>\n","isPage":false,"text":"\nWhen interacting with smart contracts, it is important to understand how EVM datatypes are mapped to C# datatypes in the SequenceEthereum library.\nbool -&gt; bool\nIntegers (int, uint, int256, uint8, ...) -&gt; BigInteger\naddress -&gt; Address or string\nstring -&gt; string\nFixed bytes (bytesN for any N value) -&gt; FixedByte\nbytes -&gt; byte[]\nIf you were to, for example, provide a string where the ABI expects an Integer, you will receive an exception, even if that string could be converted into an integer.\n","title":"Understanding data type mappings","titles":["Contracts"]},"277":{"href":"/sdk/unity/Advanced/05-contracts#querying-contracts","html":"\n<p>To query a smart contract (read data from it), you&#x27;ll use the <code>SendQuery&lt;T&gt;</code> method to query the contract and return the result as type T (if possible).\nAn example of querying a smart contract would look like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case</span></span>\n<span class=\"line\"><span>BigIntegar balance = await erc20Contract.SendQuery&lt;BigIntegar&gt;(client, &quot;balanceOf&quot;, address);</span></span></code></pre>\n<p>Alternatively, if you wish to simply construct the query and send it at a later time, you can use <code>QueryContract&lt;T&gt;</code> to create a delegate.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Contract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case</span></span>\n<span class=\"line\"><span>QueryContractMessageSender&lt;BigIntegar&gt; balanceQuery = erc20Contract.QueryContract&lt;BigIntegar&gt;(&quot;balanceOf&quot;, address);</span></span>\n<span class=\"line\"><span>BigIntegar balance = await balanceQuery(client);</span></span>\n<span class=\"line\"><span>// or</span></span>\n<span class=\"line\"><span>BigIntegar balance = await balanceQuery.SendQuery(client);</span></span></code></pre>\n","isPage":false,"text":"\nTo query a smart contract (read data from it), you&#x27;ll use the SendQuery&lt;T&gt; method to query the contract and return the result as type T (if possible).\nAn example of querying a smart contract would look like:\nContract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case\nBigIntegar balance = await erc20Contract.SendQuery&lt;BigIntegar&gt;(client, &quot;balanceOf&quot;, address);\nAlternatively, if you wish to simply construct the query and send it at a later time, you can use QueryContract&lt;T&gt; to create a delegate.\nContract erc20Contract = new Contract(contractAddress, contractAbi); // We&#x27;ll use the well-known ERC20 contract as our example case\nQueryContractMessageSender&lt;BigIntegar&gt; balanceQuery = erc20Contract.QueryContract&lt;BigIntegar&gt;(&quot;balanceOf&quot;, address);\nBigIntegar balance = await balanceQuery(client);\n// or\nBigIntegar balance = await balanceQuery.SendQuery(client);\n","title":"Querying Contracts","titles":["Contracts"]},"278":{"href":"/sdk/unity/Advanced/05-contracts#deploying-contracts","html":"\n<p>If you want to deploy a contract, you can use the <code>ContractDeployer</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ContractDeploymentResult deploymentResult = await ContractDeployer.Deploy(client, wallet, contractBytecodeAsString);</span></span>\n<span class=\"line\"><span>string newlyDeployedContractAddress = deploymentResult.Receipt.contractAddress;</span></span></code></pre>","isPage":false,"text":"\nIf you want to deploy a contract, you can use the ContractDeployer\nContractDeploymentResult deploymentResult = await ContractDeployer.Deploy(client, wallet, contractBytecodeAsString);\nstring newlyDeployedContractAddress = deploymentResult.Receipt.contractAddress;","title":"Deploying Contracts","titles":["Contracts"]},"279":{"href":"/sdk/unity/Advanced/06-tokens#tokens","html":"</header>\n<p>Since their use is so ubiquitous, we&#x27;ve provided <code>ERC20</code>, <code>ERC721</code>, and <code>ERC1155</code> wrappers of the <code>Contract</code> class with pre-defined ABIs for your convenience. When interacting with tokens, it is recommended to use these.</p>\n<p>Any of these contract wrappers can be created via a standard constructor requiring only the contract address. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>ERC20 erc20 = new ERC20(contractAddress);</span></span></code></pre>\n<p>You may also provide your own ABI should you need to rewrite our default; however, doing so may require you to modify or rewrite the contract wrappers.</p>\n<p>An example of querying:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>string symbol = await erc20.Symbol(client);</span></span>\n<span class=\"line\"><span>BigIntegar balance = await erc20.BalanceOf(client, address);</span></span></code></pre>\n<p>An example of sending a transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>TransactionReceipt receipt = await erc20.Mint(toAddress, DecimalNormalizer.NormalizeAsBigInteger(1)).SendTransactionMethodAndWaitForReceipt(wallet, client);</span></span></code></pre>\n<p>As a wrapper of <code>Contract</code>, you also have the option to not create the <code>EthTransaction</code> and send later on.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>CallContractFunction transactionCreator = erc20.Transfer(toAddress, DecimalNormalizer.NormalizeAsBigInteger(1));</span></span>\n<span class=\"line\"><span>EthTransaction transaction = await transactionCreator.Create(client, new ContractCall(wallet.GetAddress()));</span></span>\n<span class=\"line\"><span>TransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);</span></span></code></pre>\n<header>","isPage":true,"text":"\nSince their use is so ubiquitous, we&#x27;ve provided ERC20, ERC721, and ERC1155 wrappers of the Contract class with pre-defined ABIs for your convenience. When interacting with tokens, it is recommended to use these.\nAny of these contract wrappers can be created via a standard constructor requiring only the contract address. For example:\nERC20 erc20 = new ERC20(contractAddress);\nYou may also provide your own ABI should you need to rewrite our default; however, doing so may require you to modify or rewrite the contract wrappers.\nAn example of querying:\nstring symbol = await erc20.Symbol(client);\nBigIntegar balance = await erc20.BalanceOf(client, address);\nAn example of sending a transaction:\nTransactionReceipt receipt = await erc20.Mint(toAddress, DecimalNormalizer.NormalizeAsBigInteger(1)).SendTransactionMethodAndWaitForReceipt(wallet, client);\nAs a wrapper of Contract, you also have the option to not create the EthTransaction and send later on.\nCallContractFunction transactionCreator = erc20.Transfer(toAddress, DecimalNormalizer.NormalizeAsBigInteger(1));\nEthTransaction transaction = await transactionCreator.Create(client, new ContractCall(wallet.GetAddress()));\nTransactionReceipt receipt = await wallet.SendTransactionAndWaitForReceipt(client, transaction);\n","title":"Tokens","titles":[]},"280":{"href":"/sdk/unity/Advanced/06-tokens#bonus-ownable","html":"</header>\n<p>Similar to with tokens, we have also provided an <code>Ownable</code> wrapper for your convenience as well which has a pre-defined ABI for methods implementing the <a href=\"https://docs.openzeppelin.com/contracts/2.x/access-control#ownership-and-ownable\">Ownable</a> interface.\n<code>ERC20</code>, <code>ERC721</code>, and <code>ERC1155</code> all inherit from this, but we encourage you to use <code>Ownable</code> whenever you wish to interact with the Ownable methods on any arbitrary contract for convenience and safety.</p>","isPage":false,"text":"\nSimilar to with tokens, we have also provided an Ownable wrapper for your convenience as well which has a pre-defined ABI for methods implementing the Ownable interface.\nERC20, ERC721, and ERC1155 all inherit from this, but we encourage you to use Ownable whenever you wish to interact with the Ownable methods on any arbitrary contract for convenience and safety.","title":"Bonus: Ownable","titles":[]},"281":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#how-to-deploy-an-item-collection-contract","html":"</header>\n<p>This guide walks through how to setup and deploy a contract on Builder. If you haven&#x27;t yet done so, make sure you have <a href=\"/solutions/builder/project-management\">signed up for Builder and created a Project</a>.</p>\n","isPage":true,"text":"\nThis guide walks through how to setup and deploy a contract on Builder. If you haven&#x27;t yet done so, make sure you have signed up for Builder and created a Project.\n","title":"How to Deploy an Item Collection Contract","titles":[]},"282":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#step-1-go-to-the-contracts-section","html":"\n<p>In the project dashboard, find the <code>Contracts</code> tab on the left side.</p>\n","isPage":false,"text":"\nIn the project dashboard, find the Contracts tab on the left side.\n","title":"Step 1: Go to the Contracts section","titles":["How to Deploy an Item Collection Contract"]},"283":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#add-a-new-contract","html":"\n<p>Once you have that open, click the <code>+ New contract</code> button</p>\n<p><img src=\"/img/builder/builder_create_new_contract_for_contract_deploy.png\" alt=\"Sequence builder new contract\"/></p>\n","isPage":false,"text":"\nOnce you have that open, click the + New contract button\n\n","title":"Add a new contract","titles":["How to Deploy an Item Collection Contract","Step 1: Go to the Contracts section",null]},"284":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#step-2-choose-a-contract-for-your-item-collection","html":"\n","isPage":false,"text":"\n","title":"Step 2: Choose a contract for your item collection","titles":["How to Deploy an Item Collection Contract"]},"285":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#select-a-contract","html":"\n<p>You have a couple of different options to load your item collection with.</p>\n<p>We provide a few standard contracts to choose from, including an ERC1155, an ERC721, and an ERC20.</p>\n<p>If you plan to use one of our standard contracts, skip ahead to <strong>Step 3: Deploy your smart contract</strong></p>\n<p><img src=\"/img/builder/builder_select_contract_for_contract_deploy.png\" alt=\"Sequence builder select contract\"/></p>\n","isPage":false,"text":"\nYou have a couple of different options to load your item collection with.\nWe provide a few standard contracts to choose from, including an ERC1155, an ERC721, and an ERC20.\nIf you plan to use one of our standard contracts, skip ahead to Step 3: Deploy your smart contract\n\n","title":"Select a contract","titles":["How to Deploy an Item Collection Contract","Step 2: Choose a contract for your item collection",null]},"286":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#bring-your-own-smart-contract","html":"\n<p>You can also click the <code>+ View more contracts</code> button, which will open up a modal showing more standard contracts.</p>\n<p>At the bottom of this modal, click the <code>+ Upload Source</code> button to deploy your own contract.</p>\n<p><img src=\"/img/builder/builder_more_contracts_for_contract_deploy.png\" alt=\"Sequence builder more contracts\"/></p>\n","isPage":false,"text":"\nYou can also click the + View more contracts button, which will open up a modal showing more standard contracts.\nAt the bottom of this modal, click the + Upload Source button to deploy your own contract.\n\n","title":"Bring your own smart contract","titles":["How to Deploy an Item Collection Contract","Step 2: Choose a contract for your item collection",null]},"287":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#step-3-deploy-your-smart-contract","html":"\n","isPage":false,"text":"\n","title":"Step 3: Deploy your smart contract","titles":["How to Deploy an Item Collection Contract"]},"288":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#selectconfirm-the-network","html":"\n<p>You may have already selected the network you want to deploy this contract too, so confirm that this is the right network.</p>\n","isPage":false,"text":"\nYou may have already selected the network you want to deploy this contract too, so confirm that this is the right network.\n","title":"Select/confirm the network","titles":["How to Deploy an Item Collection Contract","Step 3: Deploy your smart contract",null]},"289":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#provide-a-contract-name-and-symbol","html":"\n<p>Give your smart contract a name. If your contract is an ERC20 or ERC721, then you will need to give it a token symbol as well.</p>\n<aside data-callout=\"note\"><p>Providing a token symbol at deployment is not necessary for ERC1155 as there will be several different tokens associated with this contract - token symbols are determined when a new token is created at minting.</p></aside>\n","isPage":false,"text":"\nGive your smart contract a name. If your contract is an ERC20 or ERC721, then you will need to give it a token symbol as well.\nProviding a token symbol at deployment is not necessary for ERC1155 as there will be several different tokens associated with this contract - token symbols are determined when a new token is created at minting.\n","title":"Provide a contract name and symbol","titles":["How to Deploy an Item Collection Contract","Step 3: Deploy your smart contract",null]},"290":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#determine-a-contract-owner","html":"\n<p>Provide a wallet address for the contract owner. (This will likely be yourself)</p>\n<p><img src=\"/img/builder/builder_provide_contract_details_for_contract_deploy.png\" alt=\"Sequence builder contract details\"/></p>\n","isPage":false,"text":"\nProvide a wallet address for the contract owner. (This will likely be yourself)\n\n","title":"Determine a contract owner","titles":["How to Deploy an Item Collection Contract","Step 3: Deploy your smart contract",null]},"291":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#step-4-sign-the-transaction","html":"\n<p>In order to complete the deployment of a smart contract, the contract deploy (that&#x27;s you) will need to sign a transaction on the network that its being deployed to.</p>\n<p>You will use your Sequence wallet to sign the transaction.</p>\n","isPage":false,"text":"\nIn order to complete the deployment of a smart contract, the contract deploy (that&#x27;s you) will need to sign a transaction on the network that its being deployed to.\nYou will use your Sequence wallet to sign the transaction.\n","title":"Step 4: Sign the transaction","titles":["How to Deploy an Item Collection Contract"]},"292":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#sequence-wallet","html":"\n<p>A Sequence wallet should have been created when you signed up for builder. You can confirm this by looking in the top right corner of then window anytime when you are in builder.</p>\n<p>If you do not see this, then you need to signup and create a wallet.</p>\n<p><img src=\"/img/builder/builder_see_wallet_for_contract_deploy.png\" alt=\"Sequence builder see wallet\"/></p>\n","isPage":false,"text":"\nA Sequence wallet should have been created when you signed up for builder. You can confirm this by looking in the top right corner of then window anytime when you are in builder.\nIf you do not see this, then you need to signup and create a wallet.\n\n","title":"Sequence wallet","titles":["How to Deploy an Item Collection Contract","Step 4: Sign the transaction",null]},"293":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#signature-modal","html":"\n<p>After you click the <code>Deploy Contract</code> button, a modal will pop up - which is your sequence wallet. In your wallet you will see a request to sign a transaction. It will include transaction details along with network fee estimations.</p>\n<aside data-callout=\"warning\"><p>It costs a fee (called gas) to deploy on a network. Make sure you have some of the native network tokens in your wallet ahead of time to cover it.</p></aside>\n<p>Once you&#x27;ve read the transaction details, execute the transaction by hitting <code>confirm</code> on the signature.</p>\n<p><img src=\"/img/builder/builder_sign_transaction_for_contract_deploy.png\" alt=\"Sequence builder sign transaction\"/></p>\n","isPage":false,"text":"\nAfter you click the Deploy Contract button, a modal will pop up - which is your sequence wallet. In your wallet you will see a request to sign a transaction. It will include transaction details along with network fee estimations.\nIt costs a fee (called gas) to deploy on a network. Make sure you have some of the native network tokens in your wallet ahead of time to cover it.\nOnce you&#x27;ve read the transaction details, execute the transaction by hitting confirm on the signature.\n\n","title":"Signature modal","titles":["How to Deploy an Item Collection Contract","Step 4: Sign the transaction",null]},"294":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#step-5-collectible-contract-deployed","html":"\n<p>After you sign the transaction, the network will take a few seconds (maybe minutes depending on the network and other factors) to confirm your transaction.</p>\n<p>When the transaction is complete, the contract will be deployed.</p>\n","isPage":false,"text":"\nAfter you sign the transaction, the network will take a few seconds (maybe minutes depending on the network and other factors) to confirm your transaction.\nWhen the transaction is complete, the contract will be deployed.\n","title":"Step 5: Collectible contract deployed","titles":["How to Deploy an Item Collection Contract"]},"295":{"href":"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract#linked-contract-in-dashboard","html":"\n<p>Now that your smart contract is deployed, return to the <code>Contracts</code> section of Builder. There you should see your newly deployed contract. You should also be able to see what kind of contract it is, along with any roles you have - like <code>owner</code> for example.</p>\n<p><img src=\"/img/builder/builder_confirm_deployment_for_contract_deploy.png\" alt=\"Sequence builder confirm deployment\"/></p>","isPage":false,"text":"\nNow that your smart contract is deployed, return to the Contracts section of Builder. There you should see your newly deployed contract. You should also be able to see what kind of contract it is, along with any roles you have - like owner for example.\n","title":"Linked contract in dashboard","titles":["How to Deploy an Item Collection Contract","Step 5: Collectible contract deployed",null]},"296":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#how-to-mint-in-game-items-and-achievements-in-builder","html":"</header>\n","isPage":true,"text":"\n","title":"How to Mint In-Game Items and Achievements in Builder","titles":[]},"297":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#introduction","html":"\n<p>In this guide, we&#x27;re going to walk through the process of creating your own in-game assets by minting from an ERC-1155 contract. These assets are commonly used for items and achievements, but could be used for just about any game object.</p>\n","isPage":false,"text":"\nIn this guide, we&#x27;re going to walk through the process of creating your own in-game assets by minting from an ERC-1155 contract. These assets are commonly used for items and achievements, but could be used for just about any game object.\n","title":"Introduction","titles":["How to Mint In-Game Items and Achievements in Builder"]},"298":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#what-is-an-erc-1155","html":"\n<p>ERC-1155 is simply <a href=\"https://eips.ethereum.org/EIPS/eip-1155\">a multi-token standard</a> that allows the creation of fungible, non-fungible, and semi-fungible tokens all in one contract. For games, this means that you can manage all of your in-game tokens with a single contract.</p>\n","isPage":false,"text":"\nERC-1155 is simply a multi-token standard that allows the creation of fungible, non-fungible, and semi-fungible tokens all in one contract. For games, this means that you can manage all of your in-game tokens with a single contract.\n","title":"What is an ERC-1155?","titles":["How to Mint In-Game Items and Achievements in Builder","Introduction",null]},"299":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#what-can-you-do-with-it","html":"\n<p>Your imagination is the limit. We mentioned achievements before, you could mint each as an NFT and grant it to the player. Or let&#x27;s say your game generates unique items every time a boss is killed. Those items could be minted as tokens with all attributes baked in, and held in the player&#x27;s own wallet.</p>\n<p>Lets dive in!</p>\n","isPage":false,"text":"\nYour imagination is the limit. We mentioned achievements before, you could mint each as an NFT and grant it to the player. Or let&#x27;s say your game generates unique items every time a boss is killed. Those items could be minted as tokens with all attributes baked in, and held in the player&#x27;s own wallet.\nLets dive in!\n","title":"What can you do with it?","titles":["How to Mint In-Game Items and Achievements in Builder","Introduction",null]},"300":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#prerequisite-create-a-project-and-deploy-a-smart-contract","html":"\n<p>This guide assumes that you have already <a href=\"/solutions/builder/getting-started\">signed up for Builder and created a Project</a>.</p>\n<p>Before you get started creating (minting) collectibles, you will need to first deploy the smart contract you wish to mint from. If you have not done so already, go back and do <a href=\"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract\">how to load an item collection through deploying a smart contract</a>.</p>\n","isPage":false,"text":"\nThis guide assumes that you have already signed up for Builder and created a Project.\nBefore you get started creating (minting) collectibles, you will need to first deploy the smart contract you wish to mint from. If you have not done so already, go back and do how to load an item collection through deploying a smart contract.\n","title":"Prerequisite: Create a Project and deploy a Smart Contract","titles":["How to Mint In-Game Items and Achievements in Builder","Introduction"]},"301":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#step-1-select-the-collection-for-your-item","html":"\n<p>Start by selecting the contract you would like to create an item from. In this example, we are covering ERC-1155, so select you the ERC-1155 contract that you have deployed.</p>\n<p>Once in the project dashboard, you should see the Collection - select it.</p>\n<p><img src=\"/img/builder/builder_select_contract_mint_achievements.png\" alt=\"Sequence builder select contract\"/></p>\n","isPage":false,"text":"\nStart by selecting the contract you would like to create an item from. In this example, we are covering ERC-1155, so select you the ERC-1155 contract that you have deployed.\nOnce in the project dashboard, you should see the Collection - select it.\n\n","title":"Step 1: Select the Collection for your item","titles":["How to Mint In-Game Items and Achievements in Builder"]},"302":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#step-2-navigate-to-write-contract","html":"\n<p>When you open your contract, you will see several options. Everything from details like your contract address, type, the network its deployed on - to options for adding gas or help setting up an indexer. Below those details, you have more options to view contract details and interact with it.</p>\n<p>Within that subset of options, select <code>Write Contract</code>.</p>\n<p><img src=\"/img/builder/builder_navigate_write_contract_mint_achievements.png\" alt=\"Sequence builder write contract\"/></p>\n<p>This will drop down several methods that you can call to the smart contract. You do this by sending a transaction to the smart contract with the included call data.</p>\n<p>We&#x27;re here to mint some items, so we&#x27;ll select the <code>mint</code> method.</p>\n<p><img src=\"/img/builder/builder_select_mint_method_mint_achievements.png\" alt=\"Sequence builder select mint\"/></p>\n","isPage":false,"text":"\nWhen you open your contract, you will see several options. Everything from details like your contract address, type, the network its deployed on - to options for adding gas or help setting up an indexer. Below those details, you have more options to view contract details and interact with it.\nWithin that subset of options, select Write Contract.\n\nThis will drop down several methods that you can call to the smart contract. You do this by sending a transaction to the smart contract with the included call data.\nWe&#x27;re here to mint some items, so we&#x27;ll select the mint method.\n\n","title":"Step 2: Navigate to Write Contract","titles":["How to Mint In-Game Items and Achievements in Builder"]},"303":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#step-3-provide-details-for-the-mint-method","html":"\n<p>Selecting <code>mint</code> will expand it to give you a couple of fields to fill out. Fill each of these fields out first:</p>\n<ul>\n<li><code>to (address)</code> - the address you want these to be minted to, for this example put your own address in.</li>\n<li><code>tokenId (uint256)</code> - give the collection of items an id, for a first collection enter 0 or 1 here.</li>\n<li><code>amount (uint256)</code> - enter the amount of items you want to mint in this collection.</li>\n<li><code>data (bytes)</code> - for this one, enter 0x</li>\n</ul>\n<aside data-callout=\"note\"><p>This type of contract, ERC-1155, can have several different groups of tokens on it - each requiring its own id.</p></aside>\n<p>Once you have filled out all of the fields, hit <code>write</code> to send a transaction to mint.</p>\n<p><img src=\"/img/builder/builder_fill_mint_details_mint_achievements.png\" alt=\"Sequence builder fill mint details\"/></p>\n","isPage":false,"text":"\nSelecting mint will expand it to give you a couple of fields to fill out. Fill each of these fields out first:\n\nto (address) - the address you want these to be minted to, for this example put your own address in.\ntokenId (uint256) - give the collection of items an id, for a first collection enter 0 or 1 here.\namount (uint256) - enter the amount of items you want to mint in this collection.\ndata (bytes) - for this one, enter 0x\n\nThis type of contract, ERC-1155, can have several different groups of tokens on it - each requiring its own id.\nOnce you have filled out all of the fields, hit write to send a transaction to mint.\n\n","title":"Step 3: Provide details for the Mint method","titles":["How to Mint In-Game Items and Achievements in Builder"]},"304":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#step-4-mint-and-sign-your-transaction","html":"\n<p>After you hit <code>write</code>, a modal with your wallet will pop-up. In order to create (mint) these items, you will need to send a transaction.</p>\n<p>Read the transaction details, then execute the transaction by hitting <code>confirm</code> on the signature.</p>\n<p><img src=\"/img/builder/builder_sign_transaction_mint_achievements.png\" alt=\"Sequence builder sign transactions\"/></p>\n<p>After you sign the transaction, the network will take a few seconds (maybe minutes depending on the network and other factors) to confirm your transaction.</p>\n","isPage":false,"text":"\nAfter you hit write, a modal with your wallet will pop-up. In order to create (mint) these items, you will need to send a transaction.\nRead the transaction details, then execute the transaction by hitting confirm on the signature.\n\nAfter you sign the transaction, the network will take a few seconds (maybe minutes depending on the network and other factors) to confirm your transaction.\n","title":"Step 4: Mint and sign your transaction","titles":["How to Mint In-Game Items and Achievements in Builder"]},"305":{"href":"/solutions/collectibles/contracts/900-mint-items-from-ERC1155#step-5-confirm-your-minted-items","html":"\n<p>When the transaction is complete, you will have created your items by minting them from the smart contract!</p>\n<p>If you click <code>Balances</code>, you should be able to see the total number of items you minted from your collection.</p>\n<p><img src=\"/img/builder/builder_confirm_mint_items_mint_achievements.png\" alt=\"Sequence builder confirm mint\"/></p>\n<p>In the example, you can see the 5 items I created just now, along with 4k items that I created in a seperate minting earlier.</p>\n<p>You can also click <code>Tokens</code> to see the both of the collections that we created and minted from.</p>\n<p><img src=\"/img/builder/builder_confirm_nft_mint_achievements.png\" alt=\"Sequence builder confirm nft\"/></p>","isPage":false,"text":"\nWhen the transaction is complete, you will have created your items by minting them from the smart contract!\nIf you click Balances, you should be able to see the total number of items you minted from your collection.\n\nIn the example, you can see the 5 items I created just now, along with 4k items that I created in a seperate minting earlier.\nYou can also click Tokens to see the both of the collections that we created and minted from.\n","title":"Step 5: Confirm your minted items","titles":["How to Mint In-Game Items and Achievements in Builder"]},"306":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#how-to-mint-digital-collectibles-in-builder","html":"</header>\n","isPage":true,"text":"\n","title":"How to Mint Digital Collectibles in Builder","titles":[]},"307":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#introduction","html":"\n<p>This guide walks you through creating in-game assets by minting from an ERC-721 contract, commonly known as NFTs (Non-Fungible Tokens), often used for collectibles.</p>\n<p>For more on creating in-game items from collections, <a href=\"/solutions/collectibles/contracts/900-mint-items-from-ERC1155\">check our guide on using ERC-1155</a>.</p>\n","isPage":false,"text":"\nThis guide walks you through creating in-game assets by minting from an ERC-721 contract, commonly known as NFTs (Non-Fungible Tokens), often used for collectibles.\nFor more on creating in-game items from collections, check our guide on using ERC-1155.\n","title":"Introduction","titles":["How to Mint Digital Collectibles in Builder"]},"308":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#erc-721-vs-erc-1155","html":"\n<p>Both contracts mint NFTs, but ERC-721, being the earlier standard, has gained widespread adoption, particularly in digital collectibles. Known for its simplicity and ease to audit for security, ERC-721 tokens are distinct, contributing to their recognition in various NFT marketplaces.</p>\n<p>In contrast, ERC-1155 offers versatility with efficient batch operations for both fungible and non-fungible tokens in a single contract, reducing gas costs. However, this flexibility introduces complexity, necessitating careful security attention.</p>\n","isPage":false,"text":"\nBoth contracts mint NFTs, but ERC-721, being the earlier standard, has gained widespread adoption, particularly in digital collectibles. Known for its simplicity and ease to audit for security, ERC-721 tokens are distinct, contributing to their recognition in various NFT marketplaces.\nIn contrast, ERC-1155 offers versatility with efficient batch operations for both fungible and non-fungible tokens in a single contract, reducing gas costs. However, this flexibility introduces complexity, necessitating careful security attention.\n","title":"ERC-721 vs. ERC-1155","titles":["How to Mint Digital Collectibles in Builder","Introduction",null]},"309":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#choosing-for-gaming","html":"\n<p>The choice depends on your needs. ERC-1155 is efficient for creating various unique in-game items. However, If you aim to provide tradable digital collectibles recognized across marketplaces, ERC-721 may be better suited.</p>\n<p>Which leads us to the point of this walkthrough - digital collectibles. As such, we will focus on using ERC-721 to create in-game digital collectibles to use in your game.</p>\n<p>Let&#x27;s get started!</p>\n","isPage":false,"text":"\nThe choice depends on your needs. ERC-1155 is efficient for creating various unique in-game items. However, If you aim to provide tradable digital collectibles recognized across marketplaces, ERC-721 may be better suited.\nWhich leads us to the point of this walkthrough - digital collectibles. As such, we will focus on using ERC-721 to create in-game digital collectibles to use in your game.\nLet&#x27;s get started!\n","title":"Choosing for Gaming","titles":["How to Mint Digital Collectibles in Builder","Introduction",null]},"310":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#prerequisite-create-a-project-and-deploy-a-smart-contract","html":"\n<p>This guide assumes that you have already <a href=\"/solutions/builder/getting-started\">signed up for Builder and created a Project</a>.</p>\n<p>Before you get started creating (minting) collectibles, you will need to first deploy the smart contract you wish to mint from. If you have not done so already, go back and do <a href=\"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract\">how to load an item collection through deploying a smart contract</a>.</p>\n","isPage":false,"text":"\nThis guide assumes that you have already signed up for Builder and created a Project.\nBefore you get started creating (minting) collectibles, you will need to first deploy the smart contract you wish to mint from. If you have not done so already, go back and do how to load an item collection through deploying a smart contract.\n","title":"Prerequisite: Create a Project and deploy a Smart Contract","titles":["How to Mint Digital Collectibles in Builder","Introduction"]},"311":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#step-1-select-the-contract-for-your-digital-collectibles","html":"\n<p>Start by selecting the contract you would like to create a collectible from.</p>\n<p>Once in the contract dashboard, you should see the ERC-721 contract that you have deployed - select it.</p>\n<p><img src=\"/img/builder/builder_choose_contract_mint_collectibles.png\" alt=\"Sequence builder choose contract\"/></p>\n","isPage":false,"text":"\nStart by selecting the contract you would like to create a collectible from.\nOnce in the contract dashboard, you should see the ERC-721 contract that you have deployed - select it.\n\n","title":"Step 1: Select the contract for your digital collectibles","titles":["How to Mint Digital Collectibles in Builder"]},"312":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#step-2-navigate-to-write-contract","html":"\n<p>When opening the contract, you will see several options. Everything from details like your contract address, type, the network its deployed on - to options for adding gas or help setting up an indexer. Below those details, you have more options to view contract details and interact with it.</p>\n<p>Within that subset of options, select <code>Write Contract</code>.</p>\n<p><img src=\"/img/builder/builder_select_write_contract_mint_collectibles.png\" alt=\"Sequence builder write contract\"/></p>\n<p>Selecting this will reveal a variety of methods on the smart contract.</p>\n<p>Select the <code>mint</code> method.</p>\n<p><img src=\"/img/builder/builder_select_mint_method_mint_collectibles.png\" alt=\"Sequence builder mint method\"/></p>\n","isPage":false,"text":"\nWhen opening the contract, you will see several options. Everything from details like your contract address, type, the network its deployed on - to options for adding gas or help setting up an indexer. Below those details, you have more options to view contract details and interact with it.\nWithin that subset of options, select Write Contract.\n\nSelecting this will reveal a variety of methods on the smart contract.\nSelect the mint method.\n\n","title":"Step 2: Navigate to Write Contract","titles":["How to Mint Digital Collectibles in Builder"]},"313":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#step-3-provide-details-for-the-mint-method","html":"\n<p>Selecting <code>mint</code> will expand the method, providing inputs.</p>\n<p>Enter the address you want these collectibles to be minted to, for this example put your own address in.</p>\n<p>Enter the amount of collectibles you want to create.</p>\n<p>Then hit <code>write</code> to send a transaction to mint.</p>\n<p><img src=\"/img/builder/builder_fill_mint_details_mint_collectibles.png\" alt=\"Sequence builder mint details\"/></p>\n","isPage":false,"text":"\nSelecting mint will expand the method, providing inputs.\nEnter the address you want these collectibles to be minted to, for this example put your own address in.\nEnter the amount of collectibles you want to create.\nThen hit write to send a transaction to mint.\n\n","title":"Step 3: Provide details for the Mint method","titles":["How to Mint Digital Collectibles in Builder"]},"314":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#step-4-mint-and-sign-your-transaction","html":"\n<p>Once you hit <code>write</code>, a modal with your wallet will pop-up. In order to create (mint) these collectibles, you will need to send a transaction.</p>\n<p>Read the transaction details and execute the transaction by hitting <code>confirm</code> on the signature.</p>\n<p><img src=\"/img/builder/builder_sign_transaction_mint_collectibles.png\" alt=\"Sequence builder sign transaction\"/></p>\n<p>After you sign the transaction, the network will take a few seconds (maybe minutes depending on the network and other factors) to confirm your transaction.</p>\n<p>When the transaction is complete, you will have created your digital collectibles by minting them from the smart contract!</p>\n","isPage":false,"text":"\nOnce you hit write, a modal with your wallet will pop-up. In order to create (mint) these collectibles, you will need to send a transaction.\nRead the transaction details and execute the transaction by hitting confirm on the signature.\n\nAfter you sign the transaction, the network will take a few seconds (maybe minutes depending on the network and other factors) to confirm your transaction.\nWhen the transaction is complete, you will have created your digital collectibles by minting them from the smart contract!\n","title":"Step 4: Mint and sign your transaction","titles":["How to Mint Digital Collectibles in Builder"]},"315":{"href":"/solutions/collectibles/contracts/902-mint-collectibles-from-ERC721#step-5-confirm-your-minted-collectibles","html":"\n<p>Click the <code>Tokens</code> subsection to see the both of the collections that we created and minted from.</p>\n<p><img src=\"/img/builder/builder_confirm_mint_collectibles.png\" alt=\"Sequence builder confirm mint\"/></p>\n<p>In the example, you can see the 5 collectibles that we created.</p>","isPage":false,"text":"\nClick the Tokens subsection to see the both of the collections that we created and minted from.\n\nIn the example, you can see the 5 collectibles that we created.","title":"Step 5: Confirm your minted collectibles","titles":["How to Mint Digital Collectibles in Builder"]},"316":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#how-to-mint-in-game-currency-in-builder","html":"</header>\n","isPage":true,"text":"\n","title":"How to Mint in-game Currency in Builder","titles":[]},"317":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#introduction","html":"\n<p>In this guide, we’re going to walk through the process of creating your own in-game currency through minting from an ERC-20 contract.</p>\n<p>Currency tokens add new and interesting dimensions to in-game economies, transactions, and player interactions.</p>\n","isPage":false,"text":"\nIn this guide, we’re going to walk through the process of creating your own in-game currency through minting from an ERC-20 contract.\nCurrency tokens add new and interesting dimensions to in-game economies, transactions, and player interactions.\n","title":"Introduction","titles":["How to Mint in-game Currency in Builder"]},"318":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#what-is-an-erc-20-token","html":"\n<p>An ERC-20 token is a digital coin - what makes it special is that it follows a <a href=\"https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\">set of rules called ERC-20</a>, making it easy to use in different places on the internet. These tokens often represent value or be used for specific purposes. Unlike the other common token - NFT&#x27;s, these tokens are fungible.</p>\n","isPage":false,"text":"\nAn ERC-20 token is a digital coin - what makes it special is that it follows a set of rules called ERC-20, making it easy to use in different places on the internet. These tokens often represent value or be used for specific purposes. Unlike the other common token - NFT&#x27;s, these tokens are fungible.\n","title":"What is an ERC-20 token?","titles":["How to Mint in-game Currency in Builder","Introduction",null]},"319":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#fungability-vs-non-fungibility","html":"\n<p>This is the key distinction to understand.</p>\n<p>Fungible tokens (like ERC-20 tokens) are interchangeable, and each unit is the same as every other unit, just like dollars or euros. They can easily be split or combined into different quantities.</p>\n<p>Non-fungible tokens (like ERC-721 tokens) represent unique items with individual properties, such as digital art or collectibles. Each token is distinct and not directly exchangeable with another on a like-for-like basis.</p>\n","isPage":false,"text":"\nThis is the key distinction to understand.\nFungible tokens (like ERC-20 tokens) are interchangeable, and each unit is the same as every other unit, just like dollars or euros. They can easily be split or combined into different quantities.\nNon-fungible tokens (like ERC-721 tokens) represent unique items with individual properties, such as digital art or collectibles. Each token is distinct and not directly exchangeable with another on a like-for-like basis.\n","title":"Fungability vs Non-Fungibility","titles":["How to Mint in-game Currency in Builder","Introduction",null]},"320":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#prerequisite-create-a-project-and-deploy-a-smart-contract","html":"\n<p>This guide assumes that you have already <a href=\"/solutions/builder/getting-started\">signed up for Builder and created a Project</a>.</p>\n<p>Before you get started creating (minting) currency, you will need to first deploy the smart contract you wish to mint from. If you have not done so already, go back and do <a href=\"/solutions/collectibles/contracts/200-deploy-an-item-collection-contract\">how to load an item collection through deploying a smart contract</a>.</p>\n","isPage":false,"text":"\nThis guide assumes that you have already signed up for Builder and created a Project.\nBefore you get started creating (minting) currency, you will need to first deploy the smart contract you wish to mint from. If you have not done so already, go back and do how to load an item collection through deploying a smart contract.\n","title":"Prerequisite: Create a Project and deploy a Smart Contract","titles":["How to Mint in-game Currency in Builder","Introduction"]},"321":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#step-1-select-the-contract-for-your-currency","html":"\n<p>Start by selecting the contract you would like to create currency from.</p>\n<p>Once in the contract dashboard, you should see the ERC-20 contract that you have deployed - select it.</p>\n<p><img src=\"/img/builder/builder_choose_contract_mint_currency.png\" alt=\"Sequence builder choose contract\"/></p>\n","isPage":false,"text":"\nStart by selecting the contract you would like to create currency from.\nOnce in the contract dashboard, you should see the ERC-20 contract that you have deployed - select it.\n\n","title":"Step 1: Select the contract for your currency","titles":["How to Mint in-game Currency in Builder"]},"322":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#step-2-navigate-to-write-contract","html":"\n<p>When opening the contract, you will see several options. Everything from details like your contract address, type, the network its deployed on - to options for adding gas or help setting up an indexer. Below those details, you have more options to view contract details and interact with it.</p>\n<p>Within that subset of options, select <code>Write Contract</code>.</p>\n<p><img src=\"/img/builder/builder_select_write_contract_mint_currency.png\" alt=\"Sequence builder choose contract\"/></p>\n<p>Selecting this will reveal a variety of methods on the smart contract.</p>\n<p>Select the <code>mint</code> method.</p>\n<p><img src=\"/img/builder/builder_select_mint_method_mint_currency.png\" alt=\"Sequence builder choose contract\"/></p>\n","isPage":false,"text":"\nWhen opening the contract, you will see several options. Everything from details like your contract address, type, the network its deployed on - to options for adding gas or help setting up an indexer. Below those details, you have more options to view contract details and interact with it.\nWithin that subset of options, select Write Contract.\n\nSelecting this will reveal a variety of methods on the smart contract.\nSelect the mint method.\n\n","title":"Step 2: Navigate to Write Contract","titles":["How to Mint in-game Currency in Builder"]},"323":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#step-3-provide-details-for-the-mint-method","html":"\n<p>Selecting <code>mint</code> will expand the method, providing inputs.</p>\n<p>Enter the address you want your currency to be minted to, for this example put your own address in.</p>\n<p>Enter the amount of currency you want to create.</p>\n<p>Then hit <code>write</code> to send a transaction to mint.</p>\n<p><img src=\"/img/builder/builder_fill_mint_details_mint_currency.png\" alt=\"Sequence builder choose contract\"/></p>\n","isPage":false,"text":"\nSelecting mint will expand the method, providing inputs.\nEnter the address you want your currency to be minted to, for this example put your own address in.\nEnter the amount of currency you want to create.\nThen hit write to send a transaction to mint.\n\n","title":"Step 3: Provide details for the Mint method","titles":["How to Mint in-game Currency in Builder"]},"324":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#step-4-mint-and-sign-your-transaction","html":"\n<p>Once you hit <code>write</code>, a modal with your wallet will pop-up. In order to create (mint) your currency, you will need to send a transaction.</p>\n<p>Read the transaction details and execute the transaction by hitting <code>confirm</code> on the signature.</p>\n<p><img src=\"/img/builder/builder_sign_transaction_mint_currency.png\" alt=\"Sequence builder choose contract\"/></p>\n<p>After you sign the transaction, the network will take a few seconds (maybe minutes depending on the network and other factors) to confirm your transaction.</p>\n<p>When the transaction is complete, you will have created your own currency by minting them from the smart contract!</p>\n","isPage":false,"text":"\nOnce you hit write, a modal with your wallet will pop-up. In order to create (mint) your currency, you will need to send a transaction.\nRead the transaction details and execute the transaction by hitting confirm on the signature.\n\nAfter you sign the transaction, the network will take a few seconds (maybe minutes depending on the network and other factors) to confirm your transaction.\nWhen the transaction is complete, you will have created your own currency by minting them from the smart contract!\n","title":"Step 4: Mint and sign your transaction","titles":["How to Mint in-game Currency in Builder"]},"325":{"href":"/solutions/collectibles/contracts/903-mint-currency-from-ERC20#step-5-confirm-your-minted-currency","html":"\n<p>Click the <code>Balances</code> subsection to see the currency that we created and minted.</p>\n<p><img src=\"/img/builder/builder_confirm_mint_currency.png\" alt=\"Sequence builder choose contract\"/></p>","isPage":false,"text":"\nClick the Balances subsection to see the currency that we created and minted.\n","title":"Step 5: Confirm your minted currency","titles":["How to Mint in-game Currency in Builder"]},"326":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#how-to-manage-item-metadata-in-sequence-builder","html":"</header>\n","isPage":true,"text":"\n","title":"How to Manage Item Metadata in Sequence Builder","titles":[]},"327":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#introduction","html":"\n<p>Following this guide, you can easily manage token metadata for your contract items in Sequence Builder, with a little help from <a href=\"https://www.pinata.cloud/\">Pinata</a> for IPFS hosting.</p>\n","isPage":false,"text":"\nFollowing this guide, you can easily manage token metadata for your contract items in Sequence Builder, with a little help from Pinata for IPFS hosting.\n","title":"Introduction","titles":["How to Manage Item Metadata in Sequence Builder"]},"328":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-1-prepare-your-token-images-and-metadata","html":"\n<p>First things first, gather all your token images. For each token, you&#x27;ll need a metadata file named <code>id.json</code> (like <code>1.json</code>, <code>2.json</code>, etc.). These files should look something like this at a minimum:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Token Name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Token Description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;image&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ipfs://&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>As you can guess, you can build from these basics. You could have your unique item attributes embedded in this token and generated on the fly.</p>\n","isPage":false,"text":"\nFirst things first, gather all your token images. For each token, you&#x27;ll need a metadata file named id.json (like 1.json, 2.json, etc.). These files should look something like this at a minimum:\n{\n    &quot;name&quot;: &quot;Token Name&quot;,\n    &quot;description&quot;: &quot;Token Description&quot;,\n    &quot;image&quot;: &quot;ipfs://&quot;\n}\nAs you can guess, you can build from these basics. You could have your unique item attributes embedded in this token and generated on the fly.\n","title":"Step 1: Prepare Your Token Images and Metadata","titles":["How to Manage Item Metadata in Sequence Builder"]},"329":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-2-set-up-on-pinatacloud","html":"\n<p>Head over to <a href=\"https://www.pinata.cloud/\">Pinata.cloud</a> and create an account. Upload each of your token images as separate files. Next, update the metadata JSON files with the <code>ipfs</code> address for each token. To do this, simply copy the CID (Content Identifier) for each file from Pinata and paste it after <code>ipfs://</code> in your JSON files. It should look like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Token Name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Token Description&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;image&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ipfs://QmdJzQExj2wnNY7pNNn4KauzckjH4vA5xhoxmmis919Ev3&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/1.jpeg\" alt=\"Configure Pinata\"/></p>\n","isPage":false,"text":"\nHead over to Pinata.cloud and create an account. Upload each of your token images as separate files. Next, update the metadata JSON files with the ipfs address for each token. To do this, simply copy the CID (Content Identifier) for each file from Pinata and paste it after ipfs:// in your JSON files. It should look like this:\n{\n    &quot;name&quot;: &quot;Token Name&quot;,\n    &quot;description&quot;: &quot;Token Description&quot;,\n    &quot;image&quot;: &quot;ipfs://QmdJzQExj2wnNY7pNNn4KauzckjH4vA5xhoxmmis919Ev3&quot;\n}\n\n","title":"Step 2: Set Up on Pinata.cloud","titles":["How to Manage Item Metadata in Sequence Builder"]},"330":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-3-upload-your-metadata-files","html":"\n<p>Now, gather all your JSON metadata files into a single folder on your computer. Use Pinata&#x27;s &#x27;Upload &gt; Folder&#x27; feature to upload this folder. Then, copy the CID for the entire folder.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/2.jpeg\" alt=\"Upload Metadata\"/></p>\n","isPage":false,"text":"\nNow, gather all your JSON metadata files into a single folder on your computer. Use Pinata&#x27;s &#x27;Upload &gt; Folder&#x27; feature to upload this folder. Then, copy the CID for the entire folder.\n\n","title":"Step 3: Upload Your Metadata Files","titles":["How to Manage Item Metadata in Sequence Builder"]},"331":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-4-get-the-folder-url","html":"\n<p>Click on name of the folder you created on Pinata. This will open a new tab showing all your uploaded JSON files. Copy the URL of this folder.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/3.jpeg\" alt=\"Get Folder URL from Pinata\"/></p>\n","isPage":false,"text":"\nClick on name of the folder you created on Pinata. This will open a new tab showing all your uploaded JSON files. Copy the URL of this folder.\n\n","title":"Step 4: Get the Folder URL","titles":["How to Manage Item Metadata in Sequence Builder"]},"332":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-5-set-up-on-sequence-builder","html":"\n<p>Navigate to <a href=\"https://sequence.build/\">Sequence Builder</a>, set up your account, and create your project on the network of your choice. In the Contracts section, click on &quot;Deploy New Contract&quot;.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/4.jpeg\" alt=\"Configure Contract on Builder\"/></p>\n","isPage":false,"text":"\nNavigate to Sequence Builder, set up your account, and create your project on the network of your choice. In the Contracts section, click on &quot;Deploy New Contract&quot;.\n\n","title":"Step 5: Set Up on Sequence Builder","titles":["How to Manage Item Metadata in Sequence Builder"]},"333":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-6-deploy-your-contract","html":"\n<p>Select &quot;Web3 Game Item Collection (ERC-1155)&quot; and name your contract. Sequence Builder will automatically deploy your contract on-chain.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/5.jpeg\" alt=\"Deploy Contract\"/></p>\n","isPage":false,"text":"\nSelect &quot;Web3 Game Item Collection (ERC-1155)&quot; and name your contract. Sequence Builder will automatically deploy your contract on-chain.\n\n","title":"Step 6: Deploy Your Contract","titles":["How to Manage Item Metadata in Sequence Builder"]},"334":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-7-move-to-contract-details","html":"\n<p>Once you sign the transaction, your contract is ready! Click on it to view the details screen.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/6.jpeg\" alt=\"Contract Details\"/></p>\n","isPage":false,"text":"\nOnce you sign the transaction, your contract is ready! Click on it to view the details screen.\n\n","title":"Step 7: Move to Contract Details","titles":["How to Manage Item Metadata in Sequence Builder"]},"335":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-8-update-contract-attributes","html":"\n<p>Navigate to the “Write Contract” section. This is where you can modify attributes of your freshly deployed ERC-1155 contract. Two methods are what you should focus on for now:</p>\n<ul>\n<li><code>setBaseMetadataURI</code> allows the creator to set the base metadata URL for this contract. You want this to point to the JSON files you’ve created, depending on NFT ID.</li>\n<li><code>mint</code> mints one of your tokens and sends it to an address of your choosing.</li>\n</ul>\n","isPage":false,"text":"\nNavigate to the “Write Contract” section. This is where you can modify attributes of your freshly deployed ERC-1155 contract. Two methods are what you should focus on for now:\n\nsetBaseMetadataURI allows the creator to set the base metadata URL for this contract. You want this to point to the JSON files you’ve created, depending on NFT ID.\nmint mints one of your tokens and sends it to an address of your choosing.\n\n","title":"Step 8: Update Contract Attributes","titles":["How to Manage Item Metadata in Sequence Builder"]},"336":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-9-set-the-base-metadata-uri","html":"\n<p>Scroll to <code>setBaseMetadataURI</code>, expand it, and under <code>tokenBaseURI</code> paste the URL for the JSON folder preview you got from Pinata earlier. It should look something like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>https://azure-wooden-lemur-911.mypinata.cloud/ipfs/QmW5gvYGWb98GsN8VjTRWu4pLn6jryEXNxZKNWpPhVwtDm/</span></span></code></pre>\n<p>Click “Write” and you will be prompted to sign again. This will modify the contract on chain to set the metadata base. Essentially any token ID you provide will be appended to this URL, along with the <code>.json</code> suffix. So if you mint token ID 123, it will look for <code>tokenBaseURI + 123.json</code>.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/7.jpeg\" alt=\"Base Metadata Setup\"/></p>\n","isPage":false,"text":"\nScroll to setBaseMetadataURI, expand it, and under tokenBaseURI paste the URL for the JSON folder preview you got from Pinata earlier. It should look something like this:\nhttps://azure-wooden-lemur-911.mypinata.cloud/ipfs/QmW5gvYGWb98GsN8VjTRWu4pLn6jryEXNxZKNWpPhVwtDm/\nClick “Write” and you will be prompted to sign again. This will modify the contract on chain to set the metadata base. Essentially any token ID you provide will be appended to this URL, along with the .json suffix. So if you mint token ID 123, it will look for tokenBaseURI + 123.json.\n\n","title":"Step 9: Set the Base Metadata URI","titles":["How to Manage Item Metadata in Sequence Builder"]},"337":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-10-minting-time","html":"\n<p>Finally, it&#x27;s time to mint! Scroll up to <code>mint</code>, expand it, and fill in the details:</p>\n<ul>\n<li><code>to (address)</code>: This is the address that the token will be sent to. Use your Sequence wallet address or any other valid address.</li>\n<li><code>tokenId (uint256)</code>: This is your token ID. As long as you have a <code>tokenId.json</code> file already uploaded to pinata.cloud under the folder, it will work.</li>\n<li><code>amount (uint256)</code>: The number of tokens to mint (usually 1).</li>\n<li><code>data (bytes)</code>: Enter <code>0x00</code> for this simple process.</li>\n</ul>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/8.jpeg\" alt=\"Mint test\"/></p>\n","isPage":false,"text":"\nFinally, it&#x27;s time to mint! Scroll up to mint, expand it, and fill in the details:\n\nto (address): This is the address that the token will be sent to. Use your Sequence wallet address or any other valid address.\ntokenId (uint256): This is your token ID. As long as you have a tokenId.json file already uploaded to pinata.cloud under the folder, it will work.\namount (uint256): The number of tokens to mint (usually 1).\ndata (bytes): Enter 0x00 for this simple process.\n\n\n","title":"Step 10: Minting Time","titles":["How to Manage Item Metadata in Sequence Builder"]},"338":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-11-finalize-and-admire","html":"\n<p>Click &quot;Write&quot; and sign the transaction. Congratulations, you&#x27;ve just minted a token! Head over to the &quot;Tokens&quot; section to see your minted tokens with their names and images.</p>\n<p><img src=\"/img/guides/manage-contract-metadata-builder/9.jpeg\" alt=\"Finalize Minting\"/></p>\n","isPage":false,"text":"\nClick &quot;Write&quot; and sign the transaction. Congratulations, you&#x27;ve just minted a token! Head over to the &quot;Tokens&quot; section to see your minted tokens with their names and images.\n\n","title":"Step 11: Finalize and Admire","titles":["How to Manage Item Metadata in Sequence Builder"]},"339":{"href":"/solutions/collectibles/metadata/800-manage-metadata-builder#step-12-updating-metadata","html":"\n<p>If you make mistakes with the token metadata, you can always update it and then call the Sequence Metadata refresh endpoint to reload the specific tokens:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>curl -X GET &quot;https://metadata.sequence.app/tokens/mumbai/0xb392c99d9f8e3e0b248e5c283818be5bf5cecca7/1/refresh&quot;</span></span></code></pre>\n<p>This is in the format: <code>https://metadata.sequence.app/tokens/&lt;chain-name&gt;/&lt;contract-address&gt;/&lt;token-id&gt;/refresh</code></p>\n<p>Now that you are ready to mint, you might want to read about <a href=\"/guides/templates/03-mint-collectibles-serverless\">how you can launch your own serverless endpoint for securely minting tokens</a>.</p>","isPage":false,"text":"\nIf you make mistakes with the token metadata, you can always update it and then call the Sequence Metadata refresh endpoint to reload the specific tokens:\ncurl -X GET &quot;https://metadata.sequence.app/tokens/mumbai/0xb392c99d9f8e3e0b248e5c283818be5bf5cecca7/1/refresh&quot;\nThis is in the format: https://metadata.sequence.app/tokens/&lt;chain-name&gt;/&lt;contract-address&gt;/&lt;token-id&gt;/refresh\nNow that you are ready to mint, you might want to read about how you can launch your own serverless endpoint for securely minting tokens.","title":"Step 12: Updating Metadata","titles":["How to Manage Item Metadata in Sequence Builder"]},"340":{"href":"/solutions/marketplaces/orderbook/01-overview#overview","html":"</header>\n<p>The Sequence Marketplace API service offers a simple and fast way to interact with sequence marketplace protocols to build a custom marketplace while accelerating your development time. The API is designed to be easy to use and to have all the features you need to build a fully functional marketplace.</p>","isPage":true,"text":"\nThe Sequence Marketplace API service offers a simple and fast way to interact with sequence marketplace protocols to build a custom marketplace while accelerating your development time. The API is designed to be easy to use and to have all the features you need to build a fully functional marketplace.","title":"Overview","titles":[]},"341":{"href":"/solutions/marketplaces/orderbook/02-quickstart#quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Quickstart","titles":[]},"342":{"href":"/solutions/marketplaces/orderbook/02-quickstart#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Check out our <a href=\"https://lucky-pond-0796.on.fleek.co/\">demo</a> to see a custom marketplace in action.</p></aside>\n","isPage":false,"text":"\nCheck out our demo to see a custom marketplace in action.\n","title":"Try a Demo","titles":["Quickstart"]},"343":{"href":"/solutions/marketplaces/orderbook/02-quickstart#template","html":"\n<aside data-callout=\"info\"><p>Get started quickly with a <a href=\"https://github.com/moskalyk/aviator-custom-marketplace\">template</a> leveraging our Orderbook API.</p></aside>\n","isPage":false,"text":"\nGet started quickly with a template leveraging our Orderbook API.\n","title":"Template","titles":["Quickstart"]},"344":{"href":"/solutions/marketplaces/orderbook/02-quickstart#getting-started","html":"\n<p>Check out the <a href=\"https://test.com\">Orderbook API TODO: INSERT LINK</a> for an overview of the API endpoints to create your own custom marketplace</p>","isPage":false,"text":"\nCheck out the Orderbook API TODO: INSERT LINK for an overview of the API endpoints to create your own custom marketplace","title":"Getting Started","titles":["Quickstart"]},"345":{"href":"/solutions/payments/onramps/01-fiat-on-ramps#fiat-on-ramps","html":"</header>\n<p>Sequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;</p>\n<ul>\n<li><a href=\"https://www.moonpay.com/\">Moonpay</a></li>\n<li><a href=\"https://ramp.network/\">Ramp</a></li>\n<li><a href=\"https://onmeta.in/\">UPI via Onmeta</a></li>\n<li><a href=\"https://www.sardine.ai/\">Sardine</a></li>\n<li><a href=\"https://paytrie.com/\">PayTrie</a></li>\n</ul>\n<p>Only providers that support the region the users are in will be displayed.</p>\n<p><img src=\"/img/fiat-providers.png\" alt=\"Sequence on-demand sign in\"/></p>\n<p>As a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.</p>\n<p>To learn more on how to configure the on-ramp options, see <a href=\"/solutions/wallets/universal-wallet/03-guides/01-connect-wallet#wallet-login-and-connect-options\">Sequence Connect Options</a>.</p>","isPage":true,"text":"\nSequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;\n\nMoonpay\nRamp\nUPI via Onmeta\nSardine\nPayTrie\n\nOnly providers that support the region the users are in will be displayed.\n\nAs a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.\nTo learn more on how to configure the on-ramp options, see Sequence Connect Options.","title":"Fiat On-Ramps","titles":[]},"346":{"href":"/solutions/technical-references/wallet-contracts/01-why#why-smart-contracts-wallets","html":"</header>\n<p>Ethereum wallets may take two different forms, Externally owned accounts (EOAs) or Smart Contract Wallets.\nThe Sequence wallet is implemented as a smart contract, which allows the system to provide additional security and functionality.</p>\n","isPage":true,"text":"\nEthereum wallets may take two different forms, Externally owned accounts (EOAs) or Smart Contract Wallets.\nThe Sequence wallet is implemented as a smart contract, which allows the system to provide additional security and functionality.\n","title":"Why smart contracts wallets?","titles":[]},"347":{"href":"/solutions/technical-references/wallet-contracts/01-why#externally-owned-accounts","html":"\n<p>Externally owned accounts are the most primitive form of wallet on Ethereum; EOAs are accounts composed of a single ECDSA key pair.</p>\n","isPage":false,"text":"\nExternally owned accounts are the most primitive form of wallet on Ethereum; EOAs are accounts composed of a single ECDSA key pair.\n","title":"Externally owned accounts","titles":["Why smart contracts wallets?"]},"348":{"href":"/solutions/technical-references/wallet-contracts/01-why#pros","html":"\n<ul>\n<li>Simple to implement</li>\n<li>Cheap to use (in some scenarios)</li>\n<li>Easy to backup</li>\n</ul>\n","isPage":false,"text":"\n\nSimple to implement\nCheap to use (in some scenarios)\nEasy to backup\n\n","title":"Pros","titles":["Why smart contracts wallets?","Externally owned accounts"]},"349":{"href":"/solutions/technical-references/wallet-contracts/01-why#popular-examples","html":"\n<ul>\n<li><a href=\"https://metamask.io/\">MetaMask</a></li>\n<li><a href=\"https://rainbow.me/\">Rainbow</a></li>\n<li><a href=\"https://www.myetherwallet.com/\">MyEtherWallet</a></li>\n<li><a href=\"https://trustwallet.com/\">Trust</a></li>\n</ul>\n","isPage":false,"text":"\n\nMetaMask\nRainbow\nMyEtherWallet\nTrust\n\n","title":"Popular examples","titles":["Why smart contracts wallets?","Externally owned accounts"]},"350":{"href":"/solutions/technical-references/wallet-contracts/01-why#smart-contract-wallets","html":"\n<p>Smart contract wallets are wallets that are implemented as smart contracts; it allows the wallets to implement arbitrary logic within the bounds of what&#x27;s supported by the underlying virtual machine.\nBecause of this, these contracts can implement functionality that&#x27;s not available for EOAs, and can also be upgraded if they are prepared to do so.</p>\n","isPage":false,"text":"\nSmart contract wallets are wallets that are implemented as smart contracts; it allows the wallets to implement arbitrary logic within the bounds of what&#x27;s supported by the underlying virtual machine.\nBecause of this, these contracts can implement functionality that&#x27;s not available for EOAs, and can also be upgraded if they are prepared to do so.\n","title":"Smart contract wallets","titles":["Why smart contracts wallets?"]},"351":{"href":"/solutions/technical-references/wallet-contracts/01-why#pros-1","html":"\n<ul>\n<li>Multiple keys</li>\n<li>Key rotation</li>\n<li>Pay fees using ERC20 tokens (e.g. USDC)</li>\n<li>Upgradeability</li>\n<li>Social recovery support</li>\n<li>Meta-transactions</li>\n<li>More flexible design space</li>\n</ul>\n","isPage":false,"text":"\n\nMultiple keys\nKey rotation\nPay fees using ERC20 tokens (e.g. USDC)\nUpgradeability\nSocial recovery support\nMeta-transactions\nMore flexible design space\n\n","title":"Pros","titles":["Why smart contracts wallets?","Smart contract wallets"]},"352":{"href":"/solutions/technical-references/wallet-contracts/01-why#examples","html":"\n<ul>\n<li><a href=\"https://sequence.app/\">Sequence</a></li>\n<li><a href=\"https://safe.global/\">Gnosis Safe</a></li>\n<li><a href=\"https://www.argent.xyz/\">Argent</a></li>\n</ul>","isPage":false,"text":"\n\nSequence\nGnosis Safe\nArgent\n","title":"Examples","titles":["Why smart contracts wallets?"]},"353":{"href":"/solutions/technical-references/wallet-contracts/02-universal-deployer#universal-deployer","html":"</header>\n<p>The Sequence contract wallets use <a href=\"https://weka.medium.com/how-to-send-ether-to-11-440-people-187e332566b7\">Nick&#x27;s method</a> to deploy the contracts that compose the smart contract wallet.\nThis method has been chosen because it allows each wallet to take the same address on multiple chains, making it easier to use and less prone to mistakes.</p>\n<p>:::danger Limitations\nSequence wallets <strong>may not</strong> receive the same address on all EVM compatible chains.</p>\n<p>Networks that implement only a subset of the EVM opcodes, or alternative virtual machines, will result in a different address for each chain.</p>\n<p><strong>Double-check your addresses</strong> before sending any assets to them.\n:::</p>\n<p>:::info Notice\nA complete script for deployment can be found in the <a href=\"https://github.com/0xsequence/live-contracts\">Sequence Live Contracts repository</a>.\n:::</p>\n","isPage":true,"text":"\nThe Sequence contract wallets use Nick&#x27;s method to deploy the contracts that compose the smart contract wallet.\nThis method has been chosen because it allows each wallet to take the same address on multiple chains, making it easier to use and less prone to mistakes.\n:::danger Limitations\nSequence wallets may not receive the same address on all EVM compatible chains.\nNetworks that implement only a subset of the EVM opcodes, or alternative virtual machines, will result in a different address for each chain.\nDouble-check your addresses before sending any assets to them.\n:::\n:::info Notice\nA complete script for deployment can be found in the Sequence Live Contracts repository.\n:::\n","title":"Universal Deployer","titles":[]},"354":{"href":"/solutions/technical-references/wallet-contracts/02-universal-deployer#deploy-process-v2","html":"\n<p>The following steps are required to deploy the <a href=\"/solutions/technical-references/wallet-contracts/02-universal-deployer#3---deploy-wallet-context\">Sequence Wallet Context</a> on a new network.</p>\n<p>:::info Notice\nFor most popular networks this process <strong>is not</strong> required; due to the wallet contracts being already deployed.</p>\n<p>To see if a configuration already exists for a given chain go to <a href=\"solutions/technical-references/chain-support\">Networks</a>.\n:::</p>\n","isPage":false,"text":"\nThe following steps are required to deploy the Sequence Wallet Context on a new network.\n:::info Notice\nFor most popular networks this process is not required; due to the wallet contracts being already deployed.\nTo see if a configuration already exists for a given chain go to Networks.\n:::\n","title":"Deploy Process V2","titles":["Universal Deployer"]},"355":{"href":"/solutions/technical-references/wallet-contracts/02-universal-deployer#1---deploy-singleton-factory","html":"\n<p>The Singleton Factory is a contract that allows the deployment of a single contract instance per address. Unlike the\n<a href=\"#universal-deployer\">Universal Deployer</a>, the Singleton Factory requires a salt to manage deployment instances. More information about the\nSingleton Factory can be found in the <a href=\"https://eips.ethereum.org/EIPS/eip-2470\">EIP-2470 specification</a>.</p>\n<p>The Pre-fund the Singleton Factory&#x27;s deployer with the required funds to deploy the contract.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Address: 0xBb6e024b9cFFACB947A71991E386681B1Cd1477D</span></span>\n<span class=\"line\"><span>Funds: 0.0247</span></span></code></pre>\n<strong>Do not send additional funds to the address, as funds can&#x27;t be refunded.</strong>\n<p>Once the address is funded, you can deploy the Singleton Factory by executing the following pre-signed transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>0xf9016c8085174876e8008303c4d88080b90154608060405234801561001057600080fd5b50610134806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80634af63f0214602d575b600080fd5b60cf60048036036040811015604157600080fd5b810190602081018135640100000000811115605b57600080fd5b820183602082011115606c57600080fd5b80359060200191846001830284011164010000000083111715608d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925060eb915050565b604080516001600160a01b039092168252519081900360200190f35b6000818351602085016000f5939250505056fea26469706673582212206b44f8a82cb6b156bfcc3dc6aadd6df4eefd204bc928a4397fd15dacf6d5320564736f6c634300060200331b83247000822470</span></span></code></pre>\n<p>After the transaction is confirmed, you should see the address of the Singleton Factory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Singleton Deployer: 0xce0042B868300000d44A59004Da54A005ffdcf9f</span></span></code></pre>\n","isPage":false,"text":"\nThe Singleton Factory is a contract that allows the deployment of a single contract instance per address. Unlike the\nUniversal Deployer, the Singleton Factory requires a salt to manage deployment instances. More information about the\nSingleton Factory can be found in the EIP-2470 specification.\nThe Pre-fund the Singleton Factory&#x27;s deployer with the required funds to deploy the contract.\nAddress: 0xBb6e024b9cFFACB947A71991E386681B1Cd1477D\nFunds: 0.0247\nDo not send additional funds to the address, as funds can&#x27;t be refunded.\nOnce the address is funded, you can deploy the Singleton Factory by executing the following pre-signed transaction:\n0xf9016c8085174876e8008303c4d88080b90154608060405234801561001057600080fd5b50610134806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80634af63f0214602d575b600080fd5b60cf60048036036040811015604157600080fd5b810190602081018135640100000000811115605b57600080fd5b820183602082011115606c57600080fd5b80359060200191846001830284011164010000000083111715608d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925060eb915050565b604080516001600160a01b039092168252519081900360200190f35b6000818351602085016000f5939250505056fea26469706673582212206b44f8a82cb6b156bfcc3dc6aadd6df4eefd204bc928a4397fd15dacf6d5320564736f6c634300060200331b83247000822470\nAfter the transaction is confirmed, you should see the address of the Singleton Factory:\nSingleton Deployer: 0xce0042B868300000d44A59004Da54A005ffdcf9f\n","title":"1 - Deploy Singleton Factory","titles":["Universal Deployer","Deploy Process V2"]},"356":{"href":"/solutions/technical-references/wallet-contracts/02-universal-deployer#2---deploy-wallet-context","html":"\n<p>Deploy each of the contracts in the <a href=\"/solutions/technical-references/wallet-contracts/02-universal-deployer/#\">Sequence Wallet Context</a> using the Singleton Factory.</p>\n<p>A script can be found in the <a href=\"https://github.com/0xsequence/wallet-contracts/\">Sequence Wallet Contracts repository</a>.</p>\n<p>Clone the repository, configure the environment variables and run the script with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>yarn deploy &lt;network&gt;</span></span></code></pre>\n","isPage":false,"text":"\nDeploy each of the contracts in the Sequence Wallet Context using the Singleton Factory.\nA script can be found in the Sequence Wallet Contracts repository.\nClone the repository, configure the environment variables and run the script with:\nyarn deploy &lt;network&gt;\n","title":"2 - Deploy Wallet Context","titles":["Universal Deployer","Deploy Process V2"]},"357":{"href":"/solutions/technical-references/wallet-contracts/02-universal-deployer#deploy-process-v1","html":"\n<p>The following steps are required to deploy the <a href=\"/solutions/technical-references/wallet-contracts/02-universal-deployer#3---deploy-wallet-context\">Sequence Wallet V1 Context</a> on a new network.</p>\n<p>:::info Notice\nFor most popular networks this process <strong>is not</strong> required; due to the wallet contracts being already deployed.</p>\n<p>To see if a configuration already exists for a given chain go to <a href=\"solutions/technical-references/chain-support\">Networks</a>.\n:::</p>\n<p>A complete code example of this deployment flow can be found in the <a href=\"https://github.com/0xsequence/sequence.js/blob/91ed0df67fc5ddc47abf727ae8b94a8ca4f66912/packages/0xsequence/tests/browser/testutils/deploy-wallet-context.ts\">0xSequence.js test suite</a>\nand <a href=\"https://github.com/0xsequence/wallet-contracts/blob/38e0719690eee3c4d7d8fa2ceff4ea22b0409f38/utils/deploy-contracts.ts\">Wallet Contracts repository</a>.</p>\n","isPage":false,"text":"\nThe following steps are required to deploy the Sequence Wallet V1 Context on a new network.\n:::info Notice\nFor most popular networks this process is not required; due to the wallet contracts being already deployed.\nTo see if a configuration already exists for a given chain go to Networks.\n:::\nA complete code example of this deployment flow can be found in the 0xSequence.js test suite\nand Wallet Contracts repository.\n","title":"Deploy Process V1","titles":["Universal Deployer"]},"358":{"href":"/solutions/technical-references/wallet-contracts/02-universal-deployer#1---deploy-nanouniversaldeployer","html":"\n<p>Pre-found Nick&#x27;s method address with funds required to pay for the deployment of contracts.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Address: 0x9c5a87452d4FAC0cbd53BDCA580b20A45526B3AB</span></span>\n<span class=\"line\"><span>Funds: 0.02170000000014</span></span></code></pre>\n<strong>Do not send additional funds to the address, as funds can&#x27;t be refunded.</strong>\n<p>Once the address is funded, you can deploy the NanoUniversalDeployer by executing the following pre-signed transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>0xf9010880852416b84e01830222e08080b8b66080604052348015600f57600080fd5b50609980601d6000396000f3fe60a06020601f369081018290049091028201604052608081815260009260609284918190838280828437600092018290525084519495509392505060208401905034f5604080516001600160a01b0383168152905191935081900360200190a0505000fea26469706673582212205a310755225e3c740b2f013fb6343f4c205e7141fcdf15947f5f0e0e818727fb64736f6c634300060a00331ca01820182018201820182018201820182018201820182018201820182018201820a01820182018201820182018201820182018201820182018201820182018201820</span></span></code></pre>\n<p>After the transaction is confirmed, you should see the address of the NanoUniversalDeployer:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>NanoUniversalDeployer: 0x9c5a87452d4FAC0cbd53BDCA580b20A45526B3AB</span></span></code></pre>\n<p>See more about the <a href=\"https://gist.github.com/Agusx1211/de05dabf918d448d315aa018e2572031\">NanoUniversalDeployer</a>.</p>\n","isPage":false,"text":"\nPre-found Nick&#x27;s method address with funds required to pay for the deployment of contracts.\nAddress: 0x9c5a87452d4FAC0cbd53BDCA580b20A45526B3AB\nFunds: 0.02170000000014\nDo not send additional funds to the address, as funds can&#x27;t be refunded.\nOnce the address is funded, you can deploy the NanoUniversalDeployer by executing the following pre-signed transaction:\n0xf9010880852416b84e01830222e08080b8b66080604052348015600f57600080fd5b50609980601d6000396000f3fe60a06020601f369081018290049091028201604052608081815260009260609284918190838280828437600092018290525084519495509392505060208401905034f5604080516001600160a01b0383168152905191935081900360200190a0505000fea26469706673582212205a310755225e3c740b2f013fb6343f4c205e7141fcdf15947f5f0e0e818727fb64736f6c634300060a00331ca01820182018201820182018201820182018201820182018201820182018201820a01820182018201820182018201820182018201820182018201820182018201820\nAfter the transaction is confirmed, you should see the address of the NanoUniversalDeployer:\nNanoUniversalDeployer: 0x9c5a87452d4FAC0cbd53BDCA580b20A45526B3AB\nSee more about the NanoUniversalDeployer.\n","title":"1 - Deploy NanoUniversalDeployer","titles":["Universal Deployer","Deploy Process V1"]},"359":{"href":"/solutions/technical-references/wallet-contracts/02-universal-deployer#2---deploy-universaldeployer2","html":"\n<p>In order to deploy contracts with an instance identifier, we need to deploy the UniversalDeployer2 contract. To ensure address consistency\nwe use the UniversalDeployer contract to deploy the UniversalDeployer contract.</p>\n<p>Send the following data to the UniversalDeployer deployed in the previous step.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>0x608060405234801561001057600080fd5b5061013d806100206000396000f3fe60806040526004361061001e5760003560e01c80639c4ae2d014610023575b600080fd5b6100cb6004803603604081101561003957600080fd5b81019060208101813564010000000081111561005457600080fd5b82018360208201111561006657600080fd5b8035906020019184600183028401116401000000008311171561008857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506100cd915050565b005b60008183516020850134f56040805173ffffffffffffffffffffffffffffffffffffffff83168152905191925081900360200190a050505056fea264697066735822122033609f614f03931b92d88c309d698449bb77efcd517328d341fa4f923c5d8c7964736f6c63430007060033</span></span></code></pre>\n<p>After the transaction is confirmed, you should see the address of the UniversalDeployer2:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>UniversalDeployer2: 0x8a5bc19e22d6ad55a2c763b93a75d09f321fe764</span></span></code></pre>\n","isPage":false,"text":"\nIn order to deploy contracts with an instance identifier, we need to deploy the UniversalDeployer2 contract. To ensure address consistency\nwe use the UniversalDeployer contract to deploy the UniversalDeployer contract.\nSend the following data to the UniversalDeployer deployed in the previous step.\n0x608060405234801561001057600080fd5b5061013d806100206000396000f3fe60806040526004361061001e5760003560e01c80639c4ae2d014610023575b600080fd5b6100cb6004803603604081101561003957600080fd5b81019060208101813564010000000081111561005457600080fd5b82018360208201111561006657600080fd5b8035906020019184600183028401116401000000008311171561008857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506100cd915050565b005b60008183516020850134f56040805173ffffffffffffffffffffffffffffffffffffffff83168152905191925081900360200190a050505056fea264697066735822122033609f614f03931b92d88c309d698449bb77efcd517328d341fa4f923c5d8c7964736f6c63430007060033\nAfter the transaction is confirmed, you should see the address of the UniversalDeployer2:\nUniversalDeployer2: 0x8a5bc19e22d6ad55a2c763b93a75d09f321fe764\n","title":"2 - Deploy UniversalDeployer2","titles":["Universal Deployer","Deploy Process V1"]},"360":{"href":"/solutions/technical-references/wallet-contracts/02-universal-deployer#3---deploy-wallet-context","html":"\n<p>Compile and deploy the contracts in the <a href=\"/solutions/technical-references/wallet-contracts/02-universal-deployer#3---deploy-wallet-context\">Sequence Wallet Context</a> using the UniversalDeployer2.</p>\n<p>Refer to the <a href=\"https://github.com/0xsequence/sequence.js/blob/91ed0df67fc5ddc47abf727ae8b94a8ca4f66912/packages/0xsequence/tests/browser/testutils/deploy-wallet-context.ts\">0xSequence.js test suite</a>\nor <a href=\"https://github.com/0xsequence/wallet-contracts/blob/38e0719690eee3c4d7d8fa2ceff4ea22b0409f38/utils/deploy-contracts.ts\">Wallet Contracts repository</a>\nfor the Wallet Contract context codebase.</p>","isPage":false,"text":"\nCompile and deploy the contracts in the Sequence Wallet Context using the UniversalDeployer2.\nRefer to the 0xSequence.js test suite\nor Wallet Contracts repository\nfor the Wallet Contract context codebase.","title":"3 - Deploy Wallet Context","titles":["Universal Deployer","Deploy Process V1"]},"361":{"href":"/solutions/technical-references/wallet-contracts/03-wallet-factory#wallet-factory","html":"</header>\n<p>Sequence Wallets are created using the <a href=\"https://github.com/0xsequence/wallet-contracts/blob/e0c5382636a88b4db4bcf0a70623355d7cd30fb4/contracts/Factory.sol\">Factory</a> contract, when called it creates child <a href=\"https://github.com/0xsequence/wallet-contracts/blob/e0c5382636a88b4db4bcf0a70623355d7cd30fb4/contracts/Wallet.sol\">MinimalUpgradeableProxies</a> contracts, which are in essence the &quot;boot&quot; code of all Sequence wallets.</p>\n","isPage":true,"text":"\nSequence Wallets are created using the Factory contract, when called it creates child MinimalUpgradeableProxies contracts, which are in essence the &quot;boot&quot; code of all Sequence wallets.\n","title":"Wallet Factory","titles":[]},"362":{"href":"/solutions/technical-references/wallet-contracts/03-wallet-factory#factory-api","html":"\n","isPage":false,"text":"\n","title":"Factory API","titles":["Wallet Factory"]},"363":{"href":"/solutions/technical-references/wallet-contracts/03-wallet-factory#deploy","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _mainModule,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _salt</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _contract)</span></span></code></pre>\n<p>Creates a child MinimalUpgradeableProxy using <a href=\"https://eips.ethereum.org/EIPS/eip-1014\">CREATE2</a>, the proxy initially points to the provided <code>_mainModule</code>.\nNo initialize code is executed.</p>\n","isPage":false,"text":"\n  function deploy(\n    address _mainModule,\n    bytes32 _salt\n  ) public payable returns (address _contract)\nCreates a child MinimalUpgradeableProxy using CREATE2, the proxy initially points to the provided _mainModule.\nNo initialize code is executed.\n","title":"deploy","titles":["Wallet Factory","Factory API"]},"364":{"href":"/solutions/technical-references/wallet-contracts/03-wallet-factory#parameters","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_mainModule</td><td>address</td><td>Initial implementation for the new proxy contract, expected to point to a valid Sequence wallet implementation with support for counter-factual initialization.</td></tr><tr><td>_salt</td><td>bytes32</td><td>Arbitrary value to be used as <code>create2</code> salt. Sequence&#x27;s <code>mainModule</code> uses the salt to obtain a hash with the initial configuration for the wallet (See <a href=\"#\">ImageHash</a>).</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeDescription_mainModuleaddressInitial implementation for the new proxy contract, expected to point to a valid Sequence wallet implementation with support for counter-factual initialization._saltbytes32Arbitrary value to be used as create2 salt. Sequence&#x27;s mainModule uses the salt to obtain a hash with the initial configuration for the wallet (See ImageHash).\n","title":"Parameters:","titles":["Wallet Factory","Factory API","deploy"]},"365":{"href":"/solutions/technical-references/wallet-contracts/03-wallet-factory#return-values","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_contract</td><td>address</td><td>Address of the created proxy contract.</td></tr></tbody></table>\n<p>:::caution Unsanitized input\nThe Factory contract <strong>does not</strong> check if the provided <code>_mainModule</code> is a valid Sequence wallet implementation, or if <code>_salt</code> is a valid Sequence configuration.</p>\n<p>Using invalid parameters will result on a proxy contract that <strong>may not</strong> be usable, and could result in loss of funds.\n:::</p>\n","isPage":false,"text":"\nNameTypeDescription_contractaddressAddress of the created proxy contract.\n:::caution Unsanitized input\nThe Factory contract does not check if the provided _mainModule is a valid Sequence wallet implementation, or if _salt is a valid Sequence configuration.\nUsing invalid parameters will result on a proxy contract that may not be usable, and could result in loss of funds.\n:::\n","title":"Return Values:","titles":["Wallet Factory","Factory API","deploy"]},"366":{"href":"/solutions/technical-references/wallet-contracts/03-wallet-factory#counter-factual-addresses","html":"\n<p>Sequence wallets are counter-factual by design, this means that the wallet&#x27;s address can be known before the wallet is deployed; any two combinations of the <code>mainModule</code> and <code>salt</code> values will result in the same wallet address.</p>\n<p>This property alongside the use of <a href=\"/solutions/technical-references/wallet-contracts/02-universal-deployer\">SingletonDeployer</a> or <a href=\"/solutions/technical-references/wallet-contracts/02-universal-deployer\">UniversalDeployer</a> is the reason why Sequence wallets can obtain the same address on multiple chains.</p>\n<p>:::tip Gas-free wallet creation\nSequence wallets are <strong>100% counterfactual</strong>, meaning that funds can be safely transferred to the wallet&#x27;s address without the need for calling the <code>deploy</code> function.</p>\n<p>Deploying the wallet is only required before the first transaction is sent <strong>from</strong> the wallet.\n:::</p>","isPage":false,"text":"\nSequence wallets are counter-factual by design, this means that the wallet&#x27;s address can be known before the wallet is deployed; any two combinations of the mainModule and salt values will result in the same wallet address.\nThis property alongside the use of SingletonDeployer or UniversalDeployer is the reason why Sequence wallets can obtain the same address on multiple chains.\n:::tip Gas-free wallet creation\nSequence wallets are 100% counterfactual, meaning that funds can be safely transferred to the wallet&#x27;s address without the need for calling the deploy function.\nDeploying the wallet is only required before the first transaction is sent from the wallet.\n:::","title":"Counter factual addresses","titles":["Wallet Factory"]},"367":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#wallet-configuration","html":"</header>\n<p>Every Sequence wallet has a configuration defined by a threshold and a list of signers with their corresponding weights.</p>\n","isPage":true,"text":"\nEvery Sequence wallet has a configuration defined by a threshold and a list of signers with their corresponding weights.\n","title":"Wallet Configuration","titles":[]},"368":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#configuration-layout","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Range</th><th>Description</th></tr></thead><tbody><tr><td>Threshold</td><td><code>uint16</code></td><td>1 - 65535</td><td>Required combined total &quot;weight&quot; of signers for a signature to be considered valid.</td></tr><tr><td>Signers</td><td><code>signer[]</code></td><td>unlimited - bounded by gas</td><td>List of signers that with their corresponding &quot;weight&quot;s.</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeRangeDescriptionThresholduint161 - 65535Required combined total &quot;weight&quot; of signers for a signature to be considered valid.Signerssigner[]unlimited - bounded by gasList of signers that with their corresponding &quot;weight&quot;s.\n","title":"Configuration layout","titles":["Wallet Configuration"]},"369":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#signer-layout","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Range</th><th>Description</th></tr></thead><tbody><tr><td>&quot;weight&quot;</td><td><code>uint8</code></td><td>0 - 255</td><td>&quot;weight&quot; of every signature of the signer.</td></tr><tr><td>&quot;address&quot;</td><td><code>&quot;address&quot;</code></td><td>--</td><td>&quot;address&quot; of the signer, it may be an EOA or another smart contract wallet with EIP-1271 support.</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeRangeDescription&quot;weight&quot;uint80 - 255&quot;weight&quot; of every signature of the signer.&quot;address&quot;&quot;address&quot;--&quot;address&quot; of the signer, it may be an EOA or another smart contract wallet with EIP-1271 support.\n","title":"Signer layout","titles":["Wallet Configuration","Configuration layout"]},"370":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;threshold&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;signers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;weight&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x596af90cecdbf9a768886e771178fd5561dd27ab&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;weight&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;weight&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xec9a7204a43d3f4a82c84fde92d25bfc9110981e&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;weight&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This example has a threshold of 5 and 4 signers.</p>\n","isPage":false,"text":"\n{\n  &quot;threshold&quot;: 5,\n  &quot;signers&quot;: [\n    {\n      &quot;address&quot;: &quot;0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea&quot;,\n      &quot;weight&quot;: 2\n    },\n    {\n      &quot;address&quot;: &quot;0x596af90cecdbf9a768886e771178fd5561dd27ab&quot;,\n      &quot;weight&quot;: 3\n    },\n    {\n      &quot;address&quot;: &quot;0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1&quot;,\n      &quot;weight&quot;: 2\n    },\n    {\n      &quot;address&quot;: &quot;0xec9a7204a43d3f4a82c84fde92d25bfc9110981e&quot;,\n      &quot;weight&quot;: 1\n    }\n  ]\n}\nThis example has a threshold of 5 and 4 signers.\n","title":"Example","titles":["Wallet Configuration","Configuration layout","Signer layout"]},"371":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#the-valid-combinations-of-signers-are","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>- 0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea &amp; 0x596af90cecdbf9a768886e771178fd5561dd27ab - combined weight of 2 + 3 = 5</span></span>\n<span class=\"line\"><span>- 0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1 &amp; 0x596af90cecdbf9a768886e771178fd5561dd27ab - combined weight of 2 + 3 = 5</span></span>\n<span class=\"line\"><span>- 0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea, 0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1 &amp; 0xec9a7204a43d3f4a82c84fde92d25bfc9110981e - combined weight of 2 + 2 + 1 = 5</span></span></code></pre>\n<p>Any combination of signers with a combined weight under the threshold is considered invalid; any additional signers above the threshold are ignored.</p>\n","isPage":false,"text":"\n- 0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea &amp; 0x596af90cecdbf9a768886e771178fd5561dd27ab - combined weight of 2 + 3 = 5\n- 0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1 &amp; 0x596af90cecdbf9a768886e771178fd5561dd27ab - combined weight of 2 + 3 = 5\n- 0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea, 0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1 &amp; 0xec9a7204a43d3f4a82c84fde92d25bfc9110981e - combined weight of 2 + 2 + 1 = 5\nAny combination of signers with a combined weight under the threshold is considered invalid; any additional signers above the threshold are ignored.\n","title":"The valid combinations of signers are:","titles":["Wallet Configuration","Configuration layout","Signer layout"]},"372":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#configuration-hash---imagehash","html":"\n<p>The configuration is never stored directly on the contract, but instead is hashed and checked against every time a signature is validated. This allows the wallet contracts to reduce the usage of storage and therefore the gas cost.</p>\n<p>Wallets that never have been updated don&#x27;t store the <code>imageHash</code> directly, instead the <code>imageHash</code> is used as the <code>salt</code> during the contract creation, and signatures are validated against the address of the wallet.</p>\n","isPage":false,"text":"\nThe configuration is never stored directly on the contract, but instead is hashed and checked against every time a signature is validated. This allows the wallet contracts to reduce the usage of storage and therefore the gas cost.\nWallets that never have been updated don&#x27;t store the imageHash directly, instead the imageHash is used as the salt during the contract creation, and signatures are validated against the address of the wallet.\n","title":"Configuration hash - ImageHash","titles":["Wallet Configuration","Configuration layout"]},"373":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#compute-image-hash","html":"\n","isPage":false,"text":"\n","title":"Compute image hash","titles":["Wallet Configuration","Configuration layout","Configuration hash - ImageHash"]},"374":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#todo-implement-table-from-v1-docs","html":"\n","isPage":false,"text":"\n","title":"TODO Implement table from v1 docs","titles":["Wallet Configuration"]},"375":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#initial-wallet-configuration","html":"\n<p>The initial wallet configuration determines the address of the wallet, subsequent updates don&#x27;t change the address.</p>\n<p>The wallet address can be computed using the <code>imageHash</code>, the <code>factory</code> and <code>mainModule</code> of the wallet.</p>\n","isPage":false,"text":"\nThe initial wallet configuration determines the address of the wallet, subsequent updates don&#x27;t change the address.\nThe wallet address can be computed using the imageHash, the factory and mainModule of the wallet.\n","title":"Initial wallet configuration","titles":["Wallet Configuration"]},"376":{"href":"/solutions/technical-references/wallet-contracts/04-wallet-configuration#compute-wallet-address","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// The code of the wallet proxy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> WalletProxyBytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// These values are defined by the wallet context</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// they must be known in order to validate the counter-factual wallet imageHash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> factory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xf9D09D634Fb818b05149329C1dcCFAeA53639d96&quot;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> mainModule</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xd01F11855bCcb95f88D7A48492F66410d4637313&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Append the `mainModule` to the `WalletProxyBytecode`</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// this completed the creation code of the proxy contract</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// used for computing the wallet address as defined by the CREATE2 opcode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> codeHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityPack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;bytes&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;bytes32&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      WalletContractBytecode,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexZeroPad</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainModule, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Compute the wallet address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">solidityPack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;bytes1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;bytes32&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;bytes32&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ], [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;0xff&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      factory,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      salt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      codeHash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexDataSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hash, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>","isPage":false,"text":"\n// The code of the wallet proxy contract\nconst WalletProxyBytecode = &quot;0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3&quot;\n \n// These values are defined by the wallet context\n// they must be known in order to validate the counter-factual wallet imageHash\nconst factory = &quot;0xf9D09D634Fb818b05149329C1dcCFAeA53639d96&quot;\nconst mainModule = &quot;0xd01F11855bCcb95f88D7A48492F66410d4637313&quot;\n \n// Append the `mainModule` to the `WalletProxyBytecode`\n// this completed the creation code of the proxy contract\n// used for computing the wallet address as defined by the CREATE2 opcode\nconst codeHash = ethers.utils.keccak256(\n  ethers.utils.solidityPack(\n    [\n      &#x27;bytes&#x27;,\n      &#x27;bytes32&#x27;\n    ],\n    [\n      WalletContractBytecode,\n      ethers.utils.hexZeroPad(mainModule, 32)\n    ]\n  )\n)\n \n// Compute the wallet address\nconst hash = ethers.utils.keccak256(\n  ethers.utils.solidityPack(\n    [\n      &#x27;bytes1&#x27;,\n      &#x27;address&#x27;,\n      &#x27;bytes32&#x27;,\n      &#x27;bytes32&#x27;\n    ], [\n      &#x27;0xff&#x27;,\n      factory,\n      salt,\n      codeHash\n    ]\n  )\n)\n \nconst address = ethers.utils.getAddress(ethers.utils.hexDataSlice(hash, 12))","title":"Compute wallet address","titles":["Wallet Configuration","Initial wallet configuration","Configuration hash - ImageHash"]},"377":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#modules--wallet-update","html":"</header>\n<p>Sequence modules are the underlying program implementation of the wallets; wallets can change modules at runtime.</p>\n<p>The <code>MainModule</code> is the initial module of every Sequence wallet; it differs from the other modules because it doesn&#x27;t store the set of signers on contract storage; it uses the <a href=\"solutions/technical-references/wallet-contracts/03-wallet-factory#deploy\">salt</a> provided to the Factory contract.</p>\n","isPage":true,"text":"\nSequence modules are the underlying program implementation of the wallets; wallets can change modules at runtime.\nThe MainModule is the initial module of every Sequence wallet; it differs from the other modules because it doesn&#x27;t store the set of signers on contract storage; it uses the salt provided to the Factory contract.\n","title":"Modules &amp; wallet update","titles":[]},"378":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#wallet-implementation","html":"\n<p>Sequence modules can be assigned to wallets either by the factory or by updating it after the initial deployment. Only one module can be assigned to a wallet at a time.</p>\n","isPage":false,"text":"\nSequence modules can be assigned to wallets either by the factory or by updating it after the initial deployment. Only one module can be assigned to a wallet at a time.\n","title":"Wallet implementation","titles":["Modules &amp; wallet update"]},"379":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#_updateconfiguration","html":"\n<p>The <code>updateImplementation</code> allows to update the underlying implementation of the wallet proxy. This implementation contains all the core code that defines the wallet&#x27;s behaviour.</p>\n<p>:::warning Dangerous operation\nCalling <code>updateImplementation</code> with an invalid implementation will result in the corruption of the wallet.</p>\n<p>Corrupt wallets may lead to the loss of funds.\n:::</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> updateImplementation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _implementation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> override</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onlySelf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span></code></pre>\n","isPage":false,"text":"\nThe updateImplementation allows to update the underlying implementation of the wallet proxy. This implementation contains all the core code that defines the wallet&#x27;s behaviour.\n:::warning Dangerous operation\nCalling updateImplementation with an invalid implementation will result in the corruption of the wallet.\nCorrupt wallets may lead to the loss of funds.\n:::\nfunction updateImplementation(\n  address _implementation\n) external override onlySelf {\n","title":"_updateConfiguration","titles":["Modules &amp; wallet update","Wallet implementation"]},"380":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#parameters","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_implementation</td><td>address</td><td>Address of the new wallet implementation.</td></tr></tbody></table>\n<p>This method has the <code>onlySelf</code> modifier, which means that it can only be called by the wallet itself using a self-referencing transaction. Calls to this method coming from other addresses, even if these addresses are signers of the wallet, will be rejected.</p>\n","isPage":false,"text":"\nNameTypeDescription_implementationaddressAddress of the new wallet implementation.\nThis method has the onlySelf modifier, which means that it can only be called by the wallet itself using a self-referencing transaction. Calls to this method coming from other addresses, even if these addresses are signers of the wallet, will be rejected.\n","title":"Parameters:","titles":["Modules &amp; wallet update","Wallet implementation","_updateConfiguration"]},"381":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#reading-current-implementation","html":"\n<p>The wallet implementation is stored on the contract storage slot defined by the address of the wallet itself. Given that every wallet has a unique address, the implementation slot varies from wallet to wallet.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ethers&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x596af90cecdbf9a768886e771178fd5561dd27ab&quot;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;http://localhost:8545&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read storage slot address(address)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> slot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getStorageAt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, ethers.utils.defaultAbiCoder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], [address]))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Decode bytes32 as address value</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> implementation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.defaultAbiCoder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], slot)[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(implementation)</span></span></code></pre>\n","isPage":false,"text":"\nThe wallet implementation is stored on the contract storage slot defined by the address of the wallet itself. Given that every wallet has a unique address, the implementation slot varies from wallet to wallet.\nimport &quot;ethers&quot;\n \nconst address = &quot;0x596af90cecdbf9a768886e771178fd5561dd27ab&quot;\nconst provider = new ethers.providers.JsonRpcProvider(&quot;http://localhost:8545&quot;)\n \n// Read storage slot address(address)\nconst slot = await provider.getStorageAt(address, ethers.utils.defaultAbiCoder.encode([&#x27;address&#x27;], [address]))\n \n// Decode bytes32 as address value\nconst implementation = ethers.utils.defaultAbiCoder.decode([&#x27;address&#x27;], slot)[0]\n \nconsole.log(implementation)\n","title":"Reading current implementation","titles":["Modules &amp; wallet update","Wallet implementation"]},"382":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#wallet-configuration-validation","html":"\n<p>:::info Fixed configuration\nSigner&#x27;s configuration on wallets using <code>MainModule</code> can&#x27;t be changed. The only way to change the set of signers or threshold is by updating the module of the wallet.\n:::</p>\n<p>All sequence modules must implement the <code>ModuleAuth</code> interface, this interface allows the rest of the module to validate signatures for the wallet. In the case of <code>MainModule</code> this interface is implemented as a counter-factual validation of hash passed to the factory during the contract wallet creation.</p>\n","isPage":false,"text":"\n:::info Fixed configuration\nSigner&#x27;s configuration on wallets using MainModule can&#x27;t be changed. The only way to change the set of signers or threshold is by updating the module of the wallet.\n:::\nAll sequence modules must implement the ModuleAuth interface, this interface allows the rest of the module to validate signatures for the wallet. In the case of MainModule this interface is implemented as a counter-factual validation of hash passed to the factory during the contract wallet creation.\n","title":"Wallet configuration validation","titles":["Modules &amp; wallet update"]},"383":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#_isvalidimage","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> _isValidImage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _imageHash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> override</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _isValid)</span></span></code></pre>\n<p>Validates if the provided <code>imageHash</code> corresponds to the one configured in the wallet. This function is called internally to validate transaction and message signatures.</p>\n<p>The <code>imageHash</code> is a hash of the wallet configuration, which contains the wallet&#x27;s threshold, signers and weights.</p>\n","isPage":false,"text":"\n  function _isValidImage(\n    bytes32 _imageHash\n  ) internal override view returns (bool _isValid)\nValidates if the provided imageHash corresponds to the one configured in the wallet. This function is called internally to validate transaction and message signatures.\nThe imageHash is a hash of the wallet configuration, which contains the wallet&#x27;s threshold, signers and weights.\n","title":"_isValidImage","titles":["Modules &amp; wallet update","Wallet configuration validation"]},"384":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#parameters-1","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_imageHash</td><td>bytes32</td><td>Hash of wallet configuration to be validated.</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeDescription_imageHashbytes32Hash of wallet configuration to be validated.\n","title":"Parameters:","titles":["Modules &amp; wallet update","Wallet configuration validation","_isValidImage"]},"385":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#return-values","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_isValid</td><td>bool</td><td>True if the given <code>imageHash</code> corresponds to the current wallet configuration.</td></tr></tbody></table>\n","isPage":false,"text":"\nNameTypeDescription_isValidboolTrue if the given imageHash corresponds to the current wallet configuration.\n","title":"Return Values:","titles":["Modules &amp; wallet update","Wallet configuration validation","_isValidImage"]},"386":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#mainmoduleupgradeable","html":"\n<p><code>MainModuleUpgradable</code> is a module that mimics the behaviour of the <code>MainModule</code> but allows the wallet configuration to be updated.</p>\n","isPage":false,"text":"\nMainModuleUpgradable is a module that mimics the behaviour of the MainModule but allows the wallet configuration to be updated.\n","title":"MainModuleUpgradeable","titles":["Modules &amp; wallet update"]},"387":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#updateimagehash","html":"\n<p>Updates the wallet <code>imageHash</code>, this is the hash that defines the wallet configuration (signers, weights, threshold).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> updateImageHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _imageHash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> override</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onlySelf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span></code></pre>\n","isPage":false,"text":"\nUpdates the wallet imageHash, this is the hash that defines the wallet configuration (signers, weights, threshold).\n  function updateImageHash(\n    bytes32 _imageHash\n  ) external override onlySelf {\n","title":"updateImageHash","titles":["Modules &amp; wallet update","MainModuleUpgradeable"]},"388":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#parameters-2","html":"\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>_imageHash</td><td>bytes32</td><td>Hash of the new configuration for the wallet.</td></tr></tbody></table>\n<p>:::caution Unsanitized input\nThe <code>imageHash</code> is not validated, it is the responsibility of the caller to ensure that the hash is correct. Reasons for incorrect hashes include:</p>\n<ul>\n<li>The combined weight of the signers is below the threshold.</li>\n<li>The signers are not valid addresses.</li>\n<li>The signers are smart contract wallets without proper support for EIP-1271.</li>\n<li>The <code>imageHash</code> doesn&#x27;t correspond to any wallet configuration (may be a random string).</li>\n<li>The <code>imageHash</code> corresponds to an unknown wallet configuration.</li>\n</ul>\n<p>In any of this cases the wallet will be <strong>rendered unusable</strong>.\n:::</p>\n<p>This method has the <code>onlySelf</code> modifier, which means that it can only be called by the wallet itself using a self-referencing transaction. Calls to this method coming from other addresses, even if these addresses are signers of the wallet, will be rejected.</p>\n","isPage":false,"text":"\nNameTypeDescription_imageHashbytes32Hash of the new configuration for the wallet.\n:::caution Unsanitized input\nThe imageHash is not validated, it is the responsibility of the caller to ensure that the hash is correct. Reasons for incorrect hashes include:\n\nThe combined weight of the signers is below the threshold.\nThe signers are not valid addresses.\nThe signers are smart contract wallets without proper support for EIP-1271.\nThe imageHash doesn&#x27;t correspond to any wallet configuration (may be a random string).\nThe imageHash corresponds to an unknown wallet configuration.\n\nIn any of this cases the wallet will be rendered unusable.\n:::\nThis method has the onlySelf modifier, which means that it can only be called by the wallet itself using a self-referencing transaction. Calls to this method coming from other addresses, even if these addresses are signers of the wallet, will be rejected.\n","title":"Parameters:","titles":["Modules &amp; wallet update","MainModuleUpgradeable","updateImageHash"]},"389":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#first-configuration-update","html":"\n<p>When Sequence wallets are created, the factory contract doesn&#x27;t call an <code>initialize</code> function. The configuration is instead defined by the <code>salt</code> provided to the factory, the <code>MainModule</code> then checks the counterfactual validity of all signatures against the wallet address.</p>\n<p>This means there is no direct way to update the configuration of a wallet while still using the <code>MainModule</code>. Given that the first configuration update needs to also change the wallet implementation to the <code>MainModuleUpgradable</code>, the <code>MainModule</code> is updated to the <code>MainModuleUpgradable</code> and the <code>updateImageHash</code> method is called to update the wallet configuration.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    delegateCall: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    revertOnError: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: wallet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: walletInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      walletInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;updateImplementation&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.context.mainModuleUpgradable]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    delegateCall: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    revertOnError: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: wallet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: mainModuleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      mainModuleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;updateImageHash&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), [newImageHash]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n","isPage":false,"text":"\nWhen Sequence wallets are created, the factory contract doesn&#x27;t call an initialize function. The configuration is instead defined by the salt provided to the factory, the MainModule then checks the counterfactual validity of all signatures against the wallet address.\nThis means there is no direct way to update the configuration of a wallet while still using the MainModule. Given that the first configuration update needs to also change the wallet implementation to the MainModuleUpgradable, the MainModule is updated to the MainModuleUpgradable and the updateImageHash method is called to update the wallet configuration.\nconst transactions = [\n  {\n    delegateCall: false,\n    revertOnError: true,\n    to: wallet,\n    data: walletInterface.encodeFunctionData(\n      walletInterface.getFunction(&#x27;updateImplementation&#x27;), [this.context.mainModuleUpgradable]\n    ),\n    value: ethers.constants.Zero,\n    gasLimit: ethers.constants.Zero,\n  },\n  {\n    delegateCall: false,\n    revertOnError: true,\n    to: wallet,\n    data: mainModuleInterface.encodeFunctionData(\n      mainModuleInterface.getFunction(&#x27;updateImageHash&#x27;), [newImageHash]\n    ),\n    value: ethers.constants.Zero,\n    gasLimit: ethers.constants.Zero,\n  }\n]\n","title":"First configuration update","titles":["Modules &amp; wallet update"]},"390":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#delegatecall-false","html":"\n<p><code>delegateCall</code> is used to extend the wallet functionality beyond what&#x27;s allowed by the module. In this case the called methods are defined on the modules themselves, so there is no need to use <code>delegateCall</code>.</p>\n","isPage":false,"text":"\ndelegateCall is used to extend the wallet functionality beyond what&#x27;s allowed by the module. In this case the called methods are defined on the modules themselves, so there is no need to use delegateCall.\n","title":"delegateCall: false","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"391":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#revertonerror-true","html":"\n<p><code>revertOnError</code> is used to revert the whole transaction bundle if a transaction flagged by it fails. In this case the operation should be atomic given that a partial wallet configuration update <strong>will</strong> render the wallet unusable.</p>\n","isPage":false,"text":"\nrevertOnError is used to revert the whole transaction bundle if a transaction flagged by it fails. In this case the operation should be atomic given that a partial wallet configuration update will render the wallet unusable.\n","title":"revertOnError: true","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"392":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#to-wallet","html":"\n<p>The methods being called are defined on the wallet itself, but need to be called externally, so the <code>to</code> address is the wallet itself.</p>\n","isPage":false,"text":"\nThe methods being called are defined on the wallet itself, but need to be called externally, so the to address is the wallet itself.\n","title":"to: wallet","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"393":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#value-ethersconstantszero","html":"\n<p>The <code>value</code> of the transaction is always zero, since the transaction is a self-referencing transaction and doesn&#x27;t require transferring funds.</p>\n","isPage":false,"text":"\nThe value of the transaction is always zero, since the transaction is a self-referencing transaction and doesn&#x27;t require transferring funds.\n","title":"value: ethers.constants.Zero","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"394":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#gaslimit-ethersconstantszero","html":"\n<p>The <code>gasLimit</code> of the transaction is always zero, since it represents an unlimited amount of gas.</p>\n<p>:::warning Dangerous operation</p>\n<p>When the wallet is first updated to the <code>MainModuleUpgradable</code> it doesn&#x27;t have a valid <code>imageHash</code> yet. It&#x27;s imperative that the <code>imageHash</code> is updated before the transaction bundle finishes executing.\nIf the <code>imageHash</code> is not updated before the transaction bundle finishes executing, the wallet will be rendered unusable.</p>\n<p>For this reason the following considerations should be taken when updating the wallet for the first time:</p>\n<ul>\n<li>All transactions should be marked <code>revertOnError = true</code>.</li>\n<li><code>updateImplementation</code> and <code>updateImageHash</code> should both be declared on the same transaction bundle.</li>\n<li>The <code>gasLimit</code> of both transactions should be set to unlimited (<code>0</code>).</li>\n</ul>\n<p>:::</p>\n","isPage":false,"text":"\nThe gasLimit of the transaction is always zero, since it represents an unlimited amount of gas.\n:::warning Dangerous operation\nWhen the wallet is first updated to the MainModuleUpgradable it doesn&#x27;t have a valid imageHash yet. It&#x27;s imperative that the imageHash is updated before the transaction bundle finishes executing.\nIf the imageHash is not updated before the transaction bundle finishes executing, the wallet will be rendered unusable.\nFor this reason the following considerations should be taken when updating the wallet for the first time:\n\nAll transactions should be marked revertOnError = true.\nupdateImplementation and updateImageHash should both be declared on the same transaction bundle.\nThe gasLimit of both transactions should be set to unlimited (0).\n\n:::\n","title":"gasLimit: ethers.constants.Zero","titles":["Modules &amp; wallet update","First configuration update","updateImageHash"]},"395":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#subsequent-configuration-updates","html":"\n<p>Once the wallet is updated to the <code>MainModuleUpgradable</code> it can be updated by calling the <code>updateImageHash</code> method, without any additional transaction.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    delegateCall: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    revertOnError: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: wallet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: mainModuleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      mainModuleInterface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;updateImageHash&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), [newImageHash]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: ethers.constants.Zero,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n","isPage":false,"text":"\nOnce the wallet is updated to the MainModuleUpgradable it can be updated by calling the updateImageHash method, without any additional transaction.\nconst transactions = [\n  {\n    delegateCall: false,\n    revertOnError: true,\n    to: wallet,\n    data: mainModuleInterface.encodeFunctionData(\n      mainModuleInterface.getFunction(&#x27;updateImageHash&#x27;), [newImageHash]\n    ),\n    value: ethers.constants.Zero,\n    gasLimit: ethers.constants.Zero,\n  }\n]\n","title":"Subsequent configuration updates","titles":["Modules &amp; wallet update","First configuration update"]},"396":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#retrieving-the-current-configuration","html":"\n<p>If the wallet is updated to the <code>MainModuleUpgradable</code> it can be queried for the current configuration by calling the <code>getImageHash</code> method.</p>\n<p>This method should return the wallet&#x27;s current configuration hash, which can be compared to a list of known wallet configurations to find the correct one.</p>\n","isPage":false,"text":"\nIf the wallet is updated to the MainModuleUpgradable it can be queried for the current configuration by calling the getImageHash method.\nThis method should return the wallet&#x27;s current configuration hash, which can be compared to a list of known wallet configurations to find the correct one.\n","title":"Retrieving the current configuration","titles":["Modules &amp; wallet update","First configuration update"]},"397":{"href":"/solutions/technical-references/wallet-contracts/05-modules-and-updates#retrieving-the-wallet-configuration","html":"\n<p>The <code>imageHash</code> method returns <code>bytes32(0)</code> if the wallet is not yet updated to the <code>MainModuleUpgradable</code>.\nIn this case the wallet is in a counter-factual state and the <code>imageHash</code> can&#x27;t be directly queried.</p>\n<p>This is also the case for non-deployed wallets.</p>\n<p>To find the <code>imageHash</code> of a non-deployed or non-updated wallet, a candidate known <code>imageHash</code> needs to be compared against the wallet address.</p>\n<p>See <a href=\"/solutions/technical-references/wallet-contracts/04-wallet-configuration#compute-wallet-address\">Compute wallet address</a>.</p>","isPage":false,"text":"\nThe imageHash method returns bytes32(0) if the wallet is not yet updated to the MainModuleUpgradable.\nIn this case the wallet is in a counter-factual state and the imageHash can&#x27;t be directly queried.\nThis is also the case for non-deployed wallets.\nTo find the imageHash of a non-deployed or non-updated wallet, a candidate known imageHash needs to be compared against the wallet address.\nSee Compute wallet address.","title":"Retrieving the wallet configuration","titles":["Modules &amp; wallet update","First configuration update","Retrieving the current configuration"]},"398":{"href":"/solutions/technical-references/wallet-contracts/06-main-module-upgradeable#mainmoduleupgradeable--configuration-migration","html":"</header>","isPage":true,"text":"","title":"MainModuleUpgradeable &amp; configuration migration","titles":[]},"399":{"href":"/solutions/technical-references/wallet-contracts/07-transaction-encoding#transaction-encoding","html":"</header>","isPage":true,"text":"","title":"Transaction encoding","titles":[]},"400":{"href":"/solutions/technical-references/wallet-contracts/08-signature-encoding#signature-encoding","html":"</header>\n<p>Sequence Wallets support <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">ERC-1271 Standard Contract Signature Verification</a> to allow signing of transactions and messages.</p>\n","isPage":true,"text":"\nSequence Wallets support ERC-1271 Standard Contract Signature Verification to allow signing of transactions and messages.\n","title":"Signature Encoding","titles":[]},"401":{"href":"/solutions/technical-references/wallet-contracts/08-signature-encoding#erc-191-ethereum-signed-data","html":"\n<p>Messages encoded with as <a href=\"https://eips.ethereum.org/EIPS/eip-191\">ERC-191 Ethereum Signed Data</a> are able to be created and signed as follows.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Wallet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/wallet&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Construct your Sequence Wallet (out of scope for this section)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Wallet</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> message</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Hello, World!&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> prefixedMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\x19</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Ethereum Signed Message:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> message</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prefixedMessage)</span></span></code></pre>\n<p>The above will iterate through local, signing the message. If the threshold is reached, the signature is returned.\nOtherwise the library will iterate through the remote signers as well.\nThe resulting signatures are joined and encoded as a hex string.</p>\n","isPage":false,"text":"\nMessages encoded with as ERC-191 Ethereum Signed Data are able to be created and signed as follows.\nimport { Wallet } from &#x27;@0xsequence/wallet&#x27;\n \n// Construct your Sequence Wallet (out of scope for this section)\nconst wallet: Wallet\n \nconst message = &quot;Hello, World!&quot;\n \nconst prefixedMessage = &quot;\\x19Ethereum Signed Message:\\n&quot; + len(message) + message\nconst signature = await wallet.signMessage(prefixedMessage)\nThe above will iterate through local, signing the message. If the threshold is reached, the signature is returned.\nOtherwise the library will iterate through the remote signers as well.\nThe resulting signatures are joined and encoded as a hex string.\n","title":"ERC-191 Ethereum Signed Data","titles":["Signature Encoding"]},"402":{"href":"/solutions/technical-references/wallet-contracts/08-signature-encoding#erc-712-structured-data-signatures","html":"\n<p><a href=\"https://eips.ethereum.org/EIPS/eip-712\">ERC-712 Structured Data</a> can also be signed in a similar fashion.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Wallet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/wallet&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { encodeTypedDataDigest } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Construct your Sequence Wallet (out of scope for this section)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Wallet</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the typed data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> typedData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\ttypes: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tPerson: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t{ name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;name&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t{ name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;wallet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t{ name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;count&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;uint8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tprimaryType: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Person&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> as</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tdomain: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tname: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Ether Mail&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tversion: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tchainId: chainId,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tverifyingContract: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tmessage: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tname: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Bob&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\twallet: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tcount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hashedData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> encodeTypedDataDigest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(typedData)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hashedData)</span></span></code></pre>\n<p>The above will iterate through local, signing the message. If the threshold is reached, the signature is returned.\nOtherwise the library will iterate through the remote signers as well.\nThe resulting signatures are joined and encoded as a hex string.</p>\n","isPage":false,"text":"\nERC-712 Structured Data can also be signed in a similar fashion.\nimport { Wallet } from &#x27;@0xsequence/wallet&#x27;\nimport { encodeTypedDataDigest } from &#x27;@0xsequence/utils&#x27;\n \n// Construct your Sequence Wallet (out of scope for this section)\nconst wallet: Wallet\n \n// Encode the typed data\nconst chainId = 1\nconst typedData = {\n\ttypes: {\n\t\tPerson: [\n\t\t\t{ name: &#x27;name&#x27;, type: &#x27;string&#x27; },\n\t\t\t{ name: &#x27;wallet&#x27;, type: &#x27;address&#x27; },\n\t\t\t{ name: &#x27;count&#x27;, type: &#x27;uint8&#x27; }\n\t\t]\n\t},\n\tprimaryType: &#x27;Person&#x27; as const,\n\tdomain: {\n\t\tname: &#x27;Ether Mail&#x27;,\n\t\tversion: &#x27;1&#x27;,\n\t\tchainId: chainId,\n\t\tverifyingContract: &#x27;0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC&#x27;\n\t},\n\tmessage: {\n\t\tname: &#x27;Bob&#x27;,\n\t\twallet: &#x27;0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB&#x27;,\n\t\tcount: 4\n\t}\n} \nconst hashedData = encodeTypedDataDigest(typedData)\n \nconst signature = await wallet.signMessage(hashedData)\nThe above will iterate through local, signing the message. If the threshold is reached, the signature is returned.\nOtherwise the library will iterate through the remote signers as well.\nThe resulting signatures are joined and encoded as a hex string.\n","title":"ERC-712 Structured Data Signatures","titles":["Signature Encoding"]},"403":{"href":"/solutions/technical-references/wallet-contracts/08-signature-encoding#verification","html":"\n<p>The signature can be verified by calling the <code>isValidSignature</code> method on the wallet.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>  /**</span></span>\n<span class=\"line\"><span>   * @notice Verifies whether the provided signature is valid with respect to the provided hash</span></span>\n<span class=\"line\"><span>   * @dev MUST return the correct magic value if the signature provided is valid for the provided hash</span></span>\n<span class=\"line\"><span>   *   &gt; The bytes4 magic value to return when signature is valid is 0x1626ba7e : bytes4(keccak256(&quot;isValidSignature(bytes32,bytes)&quot;))</span></span>\n<span class=\"line\"><span>   * @param _hash       keccak256 hash that was signed</span></span>\n<span class=\"line\"><span>   * @param _signatures Signature byte array associated with _data.</span></span>\n<span class=\"line\"><span>   *                    Encoded as abi.encode(Signature[], Configs)</span></span>\n<span class=\"line\"><span>   * @return magicValue Magic value 0x1626ba7e if the signature is valid and 0x0 otherwise</span></span>\n<span class=\"line\"><span>   */</span></span>\n<span class=\"line\"><span>  function isValidSignature(</span></span>\n<span class=\"line\"><span>    bytes32 _hash,</span></span>\n<span class=\"line\"><span>    bytes calldata _signatures</span></span>\n<span class=\"line\"><span>  ) public override virtual view returns (bytes4) {</span></span>\n<span class=\"line\"><span>    // Validate signatures</span></span>\n<span class=\"line\"><span>    (bool isValid,) = _signatureValidation(_hash, _signatures);</span></span>\n<span class=\"line\"><span>    if (isValid) {</span></span>\n<span class=\"line\"><span>      return SELECTOR_ERC1271_BYTES32_BYTES;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    return bytes4(0);</span></span>\n<span class=\"line\"><span>  }</span></span></code></pre>\n<p>This will iterate through the combined signatures and validate that the resulting signature breaches the wallet&#x27;s threshold.</p>","isPage":false,"text":"\nThe signature can be verified by calling the isValidSignature method on the wallet.\n  /**\n   * @notice Verifies whether the provided signature is valid with respect to the provided hash\n   * @dev MUST return the correct magic value if the signature provided is valid for the provided hash\n   *   &gt; The bytes4 magic value to return when signature is valid is 0x1626ba7e : bytes4(keccak256(&quot;isValidSignature(bytes32,bytes)&quot;))\n   * @param _hash       keccak256 hash that was signed\n   * @param _signatures Signature byte array associated with _data.\n   *                    Encoded as abi.encode(Signature[], Configs)\n   * @return magicValue Magic value 0x1626ba7e if the signature is valid and 0x0 otherwise\n   */\n  function isValidSignature(\n    bytes32 _hash,\n    bytes calldata _signatures\n  ) public override virtual view returns (bytes4) {\n    // Validate signatures\n    (bool isValid,) = _signatureValidation(_hash, _signatures);\n    if (isValid) {\n      return SELECTOR_ERC1271_BYTES32_BYTES;\n    }\n\n    return bytes4(0);\n  }\nThis will iterate through the combined signatures and validate that the resulting signature breaches the wallet&#x27;s threshold.","title":"Verification","titles":["Signature Encoding"]},"404":{"href":"/solutions/technical-references/wallet-contracts/09-nested-transaction-batching#nested-transaction-batching","html":"</header>","isPage":true,"text":"","title":"Nested Transaction Batching","titles":[]},"405":{"href":"/solutions/technical-references/wallet-contracts/10-guest-module#guestmodule-and-on-demand-deployment","html":"</header>","isPage":true,"text":"","title":"GuestModule and on-demand deployment","titles":[]},"406":{"href":"/solutions/technical-references/wallet-contracts/11-wallet-context#wallet-context","html":"</header>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sequenceContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> WalletContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  factory: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xf9D09D634Fb818b05149329C1dcCFAeA53639d96&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mainModule: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xd01F11855bCcb95f88D7A48492F66410d4637313&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mainModuleUpgradable: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  guestModule: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  sequenceUtils: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  libs: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    requireFreshSigner: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xE6B9B21C077F382333220a072e4c44280b873907&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":true,"text":"\nexport const sequenceContext: WalletContext = {\n  factory: &#x27;0xf9D09D634Fb818b05149329C1dcCFAeA53639d96&#x27;,\n  mainModule: &#x27;0xd01F11855bCcb95f88D7A48492F66410d4637313&#x27;,\n  mainModuleUpgradable: &#x27;0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118&#x27;,\n  guestModule: &#x27;0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7&#x27;,\n  sequenceUtils: &#x27;0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E&#x27;,\n  libs: {\n    requireFreshSigner: &#x27;0xE6B9B21C077F382333220a072e4c44280b873907&#x27;\n  }\n}","title":"Wallet Context","titles":[]},"407":{"href":"/solutions/technical-references/wallet-contracts/12-contract-audits#contract-audits","html":"</header>\n<p>Sequence wallet contracts underwent two independent audits by Consensys Diligence and Quantstamp.</p>\n<p><strong>Note</strong>: Sequence Wallet was formerly known as &quot;Arcadeum Wallet&quot;. Any references of &quot;Arcadeum&quot; in these reports are synonymous with &quot;Sequence&quot;.</p>\n","isPage":true,"text":"\nSequence wallet contracts underwent two independent audits by Consensys Diligence and Quantstamp.\nNote: Sequence Wallet was formerly known as &quot;Arcadeum Wallet&quot;. Any references of &quot;Arcadeum&quot; in these reports are synonymous with &quot;Sequence&quot;.\n","title":"Contract Audits","titles":[]},"408":{"href":"/solutions/technical-references/wallet-contracts/12-contract-audits#quantstamp","html":"\n<ul>\n<li><a href=\"https://github.com/0xsequence/wallet-contracts/blob/master/audits/Quantstamp_Arcadeum_Report_Final.pdf\">July 2nd, 2020</a></li>\n<li><a href=\"https://github.com/0xsequence/wallet-contracts/blob/master/audits/sequence_quantstamp_audit_feb_2021.pdf\">Feb 24th, 2021</a></li>\n</ul>\n","isPage":false,"text":"\n\nJuly 2nd, 2020\nFeb 24th, 2021\n\n","title":"Quantstamp","titles":["Contract Audits"]},"409":{"href":"/solutions/technical-references/wallet-contracts/12-contract-audits#consensys-diligence","html":"\n<ul>\n<li><a href=\"https://consensys.net/diligence/audits/private/cnhjwtpa-horizon-wallet/\">May 2020</a></li>\n</ul>\n","isPage":false,"text":"\n\nMay 2020\n\n","title":"Consensys Diligence","titles":["Contract Audits"]},"410":{"href":"/solutions/technical-references/wallet-contracts/12-contract-audits#zellic","html":"\n<ul>\n<li><a href=\"https://github.com/0xsequence/wallet-contracts/blob/master/audits/Sequence_Wallet_-_Zellic_Audit_Report.pdf\">March 2023</a></li>\n</ul>","isPage":false,"text":"\n\nMarch 2023\n","title":"Zellic","titles":["Contract Audits"]},"411":{"href":"/solutions/wallets/embedded-wallet/01-overview#sequence-embedded-wallet","html":"</header>\n<p>Sequence Embedded Wallet (or Wallet as a Service) enables the creation, management and usage of fully functional EVM compatible wallets. These wallets can be created on-demand for each user and allow you to integrate an application with an Ethereum compatible blockchain, while using familiar constructions like RPC APIs.</p>\n<p>Sequence Embedded Wallet offers real non-custodial wallets and the system guarantees that each created wallet can only be accessed with the consent of the owner of the wallet.</p>\n","isPage":true,"text":"\nSequence Embedded Wallet (or Wallet as a Service) enables the creation, management and usage of fully functional EVM compatible wallets. These wallets can be created on-demand for each user and allow you to integrate an application with an Ethereum compatible blockchain, while using familiar constructions like RPC APIs.\nSequence Embedded Wallet offers real non-custodial wallets and the system guarantees that each created wallet can only be accessed with the consent of the owner of the wallet.\n","title":"Sequence Embedded Wallet","titles":[]},"412":{"href":"/solutions/wallets/embedded-wallet/01-overview#architecture-overview","html":"\n<p>Sequence Embedded Wallets are native smart contract multisigs, the configuration of the multisig can be seen as a 2/2, both of which are required to sign in order to operate them; each one of the signers protects the wallet from a different facet of possible threats.</p>\n","isPage":false,"text":"\nSequence Embedded Wallets are native smart contract multisigs, the configuration of the multisig can be seen as a 2/2, both of which are required to sign in order to operate them; each one of the signers protects the wallet from a different facet of possible threats.\n","title":"Architecture overview","titles":["Sequence Embedded Wallet"]},"413":{"href":"/solutions/wallets/embedded-wallet/01-overview#signer-1-sequence-auth","html":"\n<p>Sequence Auth provides a simple way to add account creation, login, session management, and wallet support to your app, enabling applications to provide traditional web experiences (e.g. social login, email login, etc.) while providing access to crypto wallets to interact with smart contracts.</p>\n<p>All user and session data is encrypted by a Hardware Security Module operated by a third party. This makes it protected from both external attackers and internal access by Sequence Team or anyone else. <strong>Nobody</strong> can access a user&#x27;s wallet but the user themselves.</p>\n<p>You won&#x27;t need to trust us, this is a guarantee you can verify yourself: this service is hosted in a cryptographically attested secure enclave on Amazon Nitro platform. And we offer publicly available independently audited source code (coming soon), so you can rest assured that it hasn&#x27;t been tampered with.</p>\n","isPage":false,"text":"\nSequence Auth provides a simple way to add account creation, login, session management, and wallet support to your app, enabling applications to provide traditional web experiences (e.g. social login, email login, etc.) while providing access to crypto wallets to interact with smart contracts.\nAll user and session data is encrypted by a Hardware Security Module operated by a third party. This makes it protected from both external attackers and internal access by Sequence Team or anyone else. Nobody can access a user&#x27;s wallet but the user themselves.\nYou won&#x27;t need to trust us, this is a guarantee you can verify yourself: this service is hosted in a cryptographically attested secure enclave on Amazon Nitro platform. And we offer publicly available independently audited source code (coming soon), so you can rest assured that it hasn&#x27;t been tampered with.\n","title":"Signer 1: Sequence Auth","titles":["Sequence Embedded Wallet","Architecture overview"]},"414":{"href":"/solutions/wallets/embedded-wallet/01-overview#signer-2-sequence-guard","html":"\n<p>Sequence Guard is a service hosted by Sequence and contains the other key of the wallets. It&#x27;s meant to be another line of defense, verifying not only user&#x27;s <em>identity</em> but also their <em>intent</em>. It achieves this in two different ways:</p>\n<p>1 - Limits and allowlists: you can (from the development dashboard) configure what kind of actions are allowed, this means that the guard will only sign transactions within these constraints. For example, you can define that only NFT contract X can be called, and the guard will enforce that no other transactions can take place.</p>\n<p>2 - Authenticating the user: the Sequence Guard will authenticate the user <strong>independently of the Sequence Auth</strong>, it performs this action either by using a 3rd party OAuth 2.0 id token (from Meta, Google, X, etc.) or by directly communicating with the user via email/phone number with an OTP code. The direct communication is not always required and, when it does happen, it&#x27;s seamless and branded with your project details.</p>\n","isPage":false,"text":"\nSequence Guard is a service hosted by Sequence and contains the other key of the wallets. It&#x27;s meant to be another line of defense, verifying not only user&#x27;s identity but also their intent. It achieves this in two different ways:\n1 - Limits and allowlists: you can (from the development dashboard) configure what kind of actions are allowed, this means that the guard will only sign transactions within these constraints. For example, you can define that only NFT contract X can be called, and the guard will enforce that no other transactions can take place.\n2 - Authenticating the user: the Sequence Guard will authenticate the user independently of the Sequence Auth, it performs this action either by using a 3rd party OAuth 2.0 id token (from Meta, Google, X, etc.) or by directly communicating with the user via email/phone number with an OTP code. The direct communication is not always required and, when it does happen, it&#x27;s seamless and branded with your project details.\n","title":"Signer 2: Sequence Guard","titles":["Sequence Embedded Wallet","Architecture overview"]},"415":{"href":"/solutions/wallets/embedded-wallet/01-overview#threat-model","html":"\n<p>With these safeguards in place wallets are <strong>safe</strong> against the following scenarios:</p>\n<ol>\n<li>\n<p>Sequence.app backend is compromised, or guard keys are leaked: in this scenario, the user&#x27;s identity must still be verified by Sequence Auth.</p>\n</li>\n<li>\n<p>Sequence Auth is compromised: in this scenario the Sequence Guard protects the wallets, because it independently authenticates the user, an attacker in this scenario wouldn&#x27;t be able to access any wallets.</p>\n</li>\n</ol>\n<p>The model also provides partial protection against the scenario:</p>\n<ol start=\"3\">\n<li>Partner frontend is compromised, or MITM on the partner side: If an attacker were to be able to vulnerate the frontend of the partner, it could gain access to wallets at the time of login, but it cannot gain access to wallets of users who are currently inactive. This means that recovery from such a scenario is possible, with limited damage.</li>\n</ol>","isPage":false,"text":"\nWith these safeguards in place wallets are safe against the following scenarios:\n\n\nSequence.app backend is compromised, or guard keys are leaked: in this scenario, the user&#x27;s identity must still be verified by Sequence Auth.\n\n\nSequence Auth is compromised: in this scenario the Sequence Guard protects the wallets, because it independently authenticates the user, an attacker in this scenario wouldn&#x27;t be able to access any wallets.\n\n\nThe model also provides partial protection against the scenario:\n\nPartner frontend is compromised, or MITM on the partner side: If an attacker were to be able to vulnerate the frontend of the partner, it could gain access to wallets at the time of login, but it cannot gain access to wallets of users who are currently inactive. This means that recovery from such a scenario is possible, with limited damage.\n","title":"Threat model","titles":["Sequence Embedded Wallet"]},"416":{"href":"/solutions/wallets/embedded-wallet/02-quickstart#quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Quickstart","titles":[]},"417":{"href":"/solutions/wallets/embedded-wallet/02-quickstart#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Try out seamless UX of our embedded wallet at our <a href=\"https://0xsequence.github.io/demo-waas-auth/\">demo</a></p></aside>\n","isPage":false,"text":"\nTry out seamless UX of our embedded wallet at our demo\n","title":"Try a Demo","titles":["Quickstart"]},"418":{"href":"/solutions/wallets/embedded-wallet/02-quickstart#template","html":"\n<aside data-callout=\"info\"><p>Get started quickly with a <a href=\"https://github.com/0xsequence/demo-waas-auth\">template</a> leveraging our embedded wallet.</p></aside>\n","isPage":false,"text":"\nGet started quickly with a template leveraging our embedded wallet.\n","title":"Template","titles":["Quickstart"]},"419":{"href":"/solutions/wallets/embedded-wallet/02-quickstart#getting-started","html":"\n","isPage":false,"text":"\n","title":"Getting Started","titles":["Quickstart"]},"420":{"href":"/solutions/wallets/embedded-wallet/02-quickstart#sdk-installation","html":"\n<p>We provide TypeScript and Unity SDKs for the Embedded Wallet authentication system. You can install the TypeScript SDK with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install @0xsequence/waas</span></span></code></pre>\n<p>For more information on the Unity Embedded Wallet SDK, please refer to the TODO add link <a href=\"#TODO\">Unity SDK documentation</a></p>\n","isPage":false,"text":"\nWe provide TypeScript and Unity SDKs for the Embedded Wallet authentication system. You can install the TypeScript SDK with:\npnpm install @0xsequence/waas\nFor more information on the Unity Embedded Wallet SDK, please refer to the TODO add link Unity SDK documentation\n","title":"SDK Installation","titles":["Quickstart","Getting Started"]},"421":{"href":"/solutions/wallets/embedded-wallet/02-quickstart#project-setup","html":"\n<p>Sequence Embedded Wallet is currently only available as a closed beta. To start using the Embedded Wallet SDKs, you&#x27;ll need to contact the Sequence team and acquire API credentials. Once this is done, you will be provided with two keys:</p>\n<ul>\n<li>Project access key</li>\n<li>Embedded Wallet configuration key</li>\n</ul>\n","isPage":false,"text":"\nSequence Embedded Wallet is currently only available as a closed beta. To start using the Embedded Wallet SDKs, you&#x27;ll need to contact the Sequence team and acquire API credentials. Once this is done, you will be provided with two keys:\n\nProject access key\nEmbedded Wallet configuration key\n\n","title":"Project Setup","titles":["Quickstart","Getting Started"]},"422":{"href":"/solutions/wallets/embedded-wallet/02-quickstart#library-setup","html":"\n<p>To start using Sequence Embedded Wallet SDK, you&#x27;ll need to create a new instance of the <code>waas</code> class:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>Note that the library is operational, but it can&#x27;t be used to interact with any wallet until you have authenticated <strong>as a user</strong>.</p>","isPage":false,"text":"\nTo start using Sequence Embedded Wallet SDK, you&#x27;ll need to create a new instance of the waas class:\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\nNote that the library is operational, but it can&#x27;t be used to interact with any wallet until you have authenticated as a user.","title":"Library Setup","titles":["Quickstart","Getting Started"]},"423":{"href":"/solutions/wallets/embedded-wallet/03-manage-sessions#session-management","html":"</header>\n<p>Sequence Auth + Embedded Wallet handles the following aspects of your application:</p>\n<ul>\n<li>User creation</li>\n<li>User authentication</li>\n<li>Session management</li>\n</ul>\n<p>This means you don&#x27;t need to implement an account system yourself; instead, you interact with the Auth + WaaS SDK whenever you need to authenticate a user.</p>\n","isPage":true,"text":"\nSequence Auth + Embedded Wallet handles the following aspects of your application:\n\nUser creation\nUser authentication\nSession management\n\nThis means you don&#x27;t need to implement an account system yourself; instead, you interact with the Auth + WaaS SDK whenever you need to authenticate a user.\n","title":"Session Management","titles":[]},"424":{"href":"/solutions/wallets/embedded-wallet/03-manage-sessions#sign-in--sign-up","html":"\n<p>Signing in and signing up are the same operation; the account is automatically created if it doesn&#x27;t already exist.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get a sessionHash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get an idToken using the social auth provider of your choice</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (Google, Facebook, Twitter, etc.)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Note: remember to pass the sessionHash as a nonce!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Then sign in with Sequence WaaS</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> res</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;sessionId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x63A21cCa14ed7454B9cF6466af422B5c597c6b57&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xd6043fe6f06d90ec2cB36cA5CD1B193A8515f350&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<aside data-callout=\"note\"><p>Sessions opened with some providers might require a second step in order to be usable for sending transactions.</p><p>See <a href=\"/solutions/wallets/embedded-wallet/05-validation\">Email validation</a>.</p></aside>\n","isPage":false,"text":"\nSigning in and signing up are the same operation; the account is automatically created if it doesn&#x27;t already exist.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\n \n// Get a sessionHash\nconst sessionHash = await waas.getSessionHash()\n \n// Get an idToken using the social auth provider of your choice\n// (Google, Facebook, Twitter, etc.)\n// Note: remember to pass the sessionHash as a nonce!\n \n// Then sign in with Sequence WaaS\nconst res = await waas.signIn({ idToken }, &quot;MacBook Pro - Chrome&quot;)\n \nconsole.log(res)\n{\n  &quot;sessionId&quot;: &quot;0x63A21cCa14ed7454B9cF6466af422B5c597c6b57&quot;,\n  &quot;wallet&quot;: &quot;0xd6043fe6f06d90ec2cB36cA5CD1B193A8515f350&quot;,\n}\nSessions opened with some providers might require a second step in order to be usable for sending transactions.See Email validation.\n","title":"Sign in / Sign Up","titles":["Session Management"]},"425":{"href":"/solutions/wallets/embedded-wallet/03-manage-sessions#email-sign-in--sign-up","html":"\n<p>Email sign-in is directly supported by the SDK, as long as the used <code>key</code> has been generated with the <code>email</code> scope. Email logins work similarly to social logins, except that the <code>idToken</code> is generated by the SDK itself.</p>\n<p>To open a session using an email, you will need to provide an email for the user. The Embedded Wallet Nitro API will then send an email to the user with a One-Time Password (OTP) that can be used to open a session. This OTP has to be provided to the SDK to obtain an <code>idToken</code>.</p>\n<p>Once the <code>idToken</code> is obtained, the session can be opened as usual.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define the user&#x27;s email address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> email</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;user@example.com&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This will send an email to the user with an OTP</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">instance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.email.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">initiateAuth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ email })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Obtain the OTP from the user</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> answer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;123456&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">idToken</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.email.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">finalizeAuth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ instance, answer, email, sessionHash })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Log in using the idToken, as usual</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Apple Vision Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nEmail sign-in is directly supported by the SDK, as long as the used key has been generated with the email scope. Email logins work similarly to social logins, except that the idToken is generated by the SDK itself.\nTo open a session using an email, you will need to provide an email for the user. The Embedded Wallet Nitro API will then send an email to the user with a One-Time Password (OTP) that can be used to open a session. This OTP has to be provided to the SDK to obtain an idToken.\nOnce the idToken is obtained, the session can be opened as usual.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \n// Define the user&#x27;s email address\nconst email = &quot;user@example.com&quot;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\n \n// This will send an email to the user with an OTP\nconst { instance } = await waas.email.initiateAuth({ email })\n \n// Obtain the OTP from the user\nconst answer = &quot;123456&quot;\n \nconst sessionHash = await sequence.getSessionHash()\nconst { idToken } = await waas.email.finalizeAuth({ instance, answer, email, sessionHash })\n \n// Log in using the idToken, as usual\nawait waas.signIn({ idToken }, &quot;Apple Vision Pro - Chrome&quot;)\n","title":"Email Sign In / Sign Up","titles":["Session Management","Sign in / Sign Up"]},"426":{"href":"/solutions/wallets/embedded-wallet/03-manage-sessions#google--apple-auth","html":"\n<p>Google and Apple auth are directly supported by the SDK. The <code>idToken</code> is obtained from the social auth provider and used to open a session. You can see a sample React application using Google auth below. To see a complete application, see the <a href=\"https://github.com/0xsequence/demo-waas-auth\">demo-waas-auth</a> repository. A functional demo <a href=\"https://0xsequence.github.io/demo-waas-auth/\">is also available here</a>.</p>\n<p>Begin with a simple <code>main.tsx</code> file that sets up the WaaS SDK, the router, and the Google OAuth provider.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { GoogleOAuthProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@react-oauth/google&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createHashRouter, RouterProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;react-router-dom&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> router</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHashRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    path: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/login&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    element: &lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Login</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    path: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    element: &lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ReactDOM.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(document.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getElementById</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;root&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">render</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  &lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">React.StrictMode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      &lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">GoogleOAuthProvider clientId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{GOOGLE_CLIENT_ID}</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        &lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">RouterProvider router</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{router} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      &lt;/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">GoogleOAuthProvider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  &lt;/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">React.StrictMode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>The <code>useSessionHash</code> hook is used to obtain a session hash that is used to prevent replay attacks. The <code>sequence.getSessionHash</code> function is used to obtain the session hash, and the <code>sequence.onSessionStateChanged</code> function is used to update the session hash when the session state changes.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./main&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useEffect, useState } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;react&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">setSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">setError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    useEffect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">                setSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(error)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">                setError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        handler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">onSessionStateChanged</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(handler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, [setSessionHash, setError])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        sessionHash,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        error,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        loading: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sessionHash,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To handle the Google login, you can use the <code>GoogleLogin</code> component from the <code>@react-oauth/google</code> package. The <code>handleGoogleLogin</code> function is called when the user successfully logs in.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { router, sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./main&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { CredentialResponse, GoogleLogin } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@react-oauth/google&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useSessionHash } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./useSessionHash.ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Login</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useSessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">signingIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">setSigningIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  useEffect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSignedIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        router.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">navigate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }, [])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handleGoogleLogin</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tokenResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CredentialResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> walletAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      idToken: tokenResponse.credential</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Wallet address: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">walletAddress</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    router.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">navigate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;/&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {!!</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sessionHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; (&lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">GoogleLogin</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> onSuccess</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{handleGoogleLogin} shape</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circle&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> width</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">230</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{sessionHash} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/&gt;)}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Login</span></span></code></pre>\n","isPage":false,"text":"\nGoogle and Apple auth are directly supported by the SDK. The idToken is obtained from the social auth provider and used to open a session. You can see a sample React application using Google auth below. To see a complete application, see the demo-waas-auth repository. A functional demo is also available here.\nBegin with a simple main.tsx file that sets up the WaaS SDK, the router, and the Google OAuth provider.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\nimport { GoogleOAuthProvider } from &#x27;@react-oauth/google&#x27;\nimport { createHashRouter, RouterProvider } from &#x27;react-router-dom&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\n \nexport const router = createHashRouter([\n  {\n    path: &#x27;/login&#x27;,\n    element: &lt;Login /&gt;\n  },\n  {\n    path: &#x27;/&#x27;,\n    element: &lt;App /&gt;\n  }\n])\n \nReactDOM.createRoot(document.getElementById(&#x27;root&#x27;)!).render(\n  &lt;React.StrictMode&gt;\n      &lt;GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}&gt;\n        &lt;RouterProvider router={router} /&gt;\n      &lt;/GoogleOAuthProvider&gt;\n  &lt;/React.StrictMode&gt;\n)\nThe useSessionHash hook is used to obtain a session hash that is used to prevent replay attacks. The sequence.getSessionHash function is used to obtain the session hash, and the sequence.onSessionStateChanged function is used to update the session hash when the session state changes.\nimport { sequence } from &#x27;./main&#x27;\nimport { useEffect, useState } from &quot;react&quot;;\n \nexport function useSessionHash() {\n    const [sessionHash, setSessionHash] = useState(&quot;&quot;)\n    const [error, setError] = useState&lt;any&gt;(undefined)\n \n    useEffect(() =&gt; {\n        const handler = async () =&gt; {\n            try {\n                setSessionHash(await sequence.getSessionHash())\n            } catch (error) {\n                console.error(error)\n                setError(error)\n            }\n        }\n        handler()\n        return sequence.onSessionStateChanged(handler)\n    }, [setSessionHash, setError])\n \n    return {\n        sessionHash,\n        error,\n        loading: !!sessionHash,\n    }\n}\nTo handle the Google login, you can use the GoogleLogin component from the @react-oauth/google package. The handleGoogleLogin function is called when the user successfully logs in.\nimport { router, sequence } from &#x27;./main&#x27;\nimport { CredentialResponse, GoogleLogin } from &#x27;@react-oauth/google&#x27;\nimport { useSessionHash } from &quot;./useSessionHash.ts&quot;;\n \nfunction Login() {\n  const { sessionHash } = useSessionHash()\n  const [signingIn, setSigningIn] = useState(false)\n \n  useEffect(() =&gt; {\n    (async () =&gt; {\n      if (await sequence.isSignedIn()) {\n        router.navigate(&#x27;/&#x27;)\n      }\n    })()\n  }, [])\n \n  const handleGoogleLogin = async (tokenResponse: CredentialResponse) =&gt; {\n    const walletAddress = await sequence.signIn({\n      idToken: tokenResponse.credential!\n    }, &quot;MacBook Pro - Chrome&quot;)\n \n    console.log(`Wallet address: ${walletAddress}`)\n    router.navigate(&#x27;/&#x27;)\n  }\n \n  return (\n    {!!sessionHash &amp;&amp; (&lt;&gt;\n      &lt;GoogleLogin onSuccess={handleGoogleLogin} shape=&quot;circle&quot; width={230} nonce={sessionHash} /&gt;\n    &lt;/&gt;)}\n )\n}\n \nexport default Login\n","title":"Google / Apple Auth","titles":["Session Management","Sign in / Sign Up"]},"427":{"href":"/solutions/wallets/embedded-wallet/03-manage-sessions#list-sessions","html":"\n<p>This function returns a list of sessions for the current user and only includes sessions that are still valid.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">listSessions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sessions)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x574372ff1A0Eede68B5358Cce7bbb93155A9dfe0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x574372ff1a0eede68b5358cce7bbb93155a9dfe0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;userId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;42#https://accounts.google.com#109234880945084120673&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issuer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://accounts.google.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;subject&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;109234880945084120673&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;friendlyName&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Pixel 3 - Brave&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;createdAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2023-11-02T18:22:03.102950917Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;refreshedAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2023-11-02T18:22:03.109787921Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expiresAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2123-10-09T18:22:03.102951017Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;isThis&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x3C4E11E4dbF23B87C14bd75d0Da9C75707392D21&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x3c4e11e4dbf23b87c14bd75d0da9c75707392d21&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;userId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;42#https://accounts.google.com#109234880945084120673&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;projectId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;issuer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://accounts.google.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;subject&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;109234880945084120673&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;friendlyName&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;createdAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2023-11-02T18:50:32.815189174Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;refreshedAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2023-11-02T18:50:32.819722082Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;expiresAt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2123-10-09T18:50:32.815189234Z&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;isThis&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n","isPage":false,"text":"\nThis function returns a list of sessions for the current user and only includes sessions that are still valid.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\n \nawait waas.signIn({ idToken }, &quot;MacBook Pro - Chrome&quot;)\n \nconst sessions = await waas.listSessions()\nconsole.log(sessions)\n[\n  {\n    &quot;id&quot;: &quot;0x574372ff1A0Eede68B5358Cce7bbb93155A9dfe0&quot;,\n    &quot;address&quot;: &quot;0x574372ff1a0eede68b5358cce7bbb93155a9dfe0&quot;,\n    &quot;userId&quot;: &quot;42#https://accounts.google.com#109234880945084120673&quot;,\n    &quot;projectId&quot;: 42,\n    &quot;issuer&quot;: &quot;https://accounts.google.com&quot;,\n    &quot;subject&quot;: &quot;109234880945084120673&quot;,\n    &quot;friendlyName&quot;: &quot;Pixel 3 - Brave&quot;,\n    &quot;createdAt&quot;: &quot;2023-11-02T18:22:03.102950917Z&quot;,\n    &quot;refreshedAt&quot;: &quot;2023-11-02T18:22:03.109787921Z&quot;,\n    &quot;expiresAt&quot;: &quot;2123-10-09T18:22:03.102951017Z&quot;,\n    &quot;isThis&quot;: false\n  },\n  {\n    &quot;id&quot;: &quot;0x3C4E11E4dbF23B87C14bd75d0Da9C75707392D21&quot;,\n    &quot;address&quot;: &quot;0x3c4e11e4dbf23b87c14bd75d0da9c75707392d21&quot;,\n    &quot;userId&quot;: &quot;42#https://accounts.google.com#109234880945084120673&quot;,\n    &quot;projectId&quot;: 42,\n    &quot;issuer&quot;: &quot;https://accounts.google.com&quot;,\n    &quot;subject&quot;: &quot;109234880945084120673&quot;,\n    &quot;friendlyName&quot;: &quot;MacBook Pro - Chrome&quot;,\n    &quot;createdAt&quot;: &quot;2023-11-02T18:50:32.815189174Z&quot;,\n    &quot;refreshedAt&quot;: &quot;2023-11-02T18:50:32.819722082Z&quot;,\n    &quot;expiresAt&quot;: &quot;2123-10-09T18:50:32.815189234Z&quot;,\n    &quot;isThis&quot;: true\n  }\n]\n","title":"List Sessions","titles":["Session Management"]},"428":{"href":"/solutions/wallets/embedded-wallet/03-manage-sessions#close-session","html":"\n<p>A session can be closed using the <code>id</code> of the session. Any session can be closed from any device with an active session.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SequenceWaaS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MacBook Pro - Chrome&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">listSessions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dropSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ sessionId: sessions[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].id })</span></span></code></pre>","isPage":false,"text":"\nA session can be closed using the id of the session. Any session can be closed from any device with an active session.\nimport { SequenceWaaS } from &#x27;@0xsequence/waas&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\n \nawait waas.signIn({ idToken }, &quot;MacBook Pro - Chrome&quot;)\n \nconst sessions = await waas.listSessions()\nawait waas.dropSession({ sessionId: sessions[0].id })","title":"Close Session","titles":["Session Management"]},"429":{"href":"/solutions/wallets/embedded-wallet/05-validation#validation","html":"</header>\n<p>Users with Auth + Embedded Wallet go through two distinct flows based on the login method:</p>\n","isPage":true,"text":"\nUsers with Auth + Embedded Wallet go through two distinct flows based on the login method:\n","title":"Validation","titles":[]},"430":{"href":"/solutions/wallets/embedded-wallet/05-validation#email-login-one-time-code","html":"\n<p>For users logging in with an email, Amazon Cognito sends a one-time code to validate their identity. This is a trusted method that does not require additional verification.</p>\n","isPage":false,"text":"\nFor users logging in with an email, Amazon Cognito sends a one-time code to validate their identity. This is a trusted method that does not require additional verification.\n","title":"Email login (one-time code)","titles":["Validation",null]},"431":{"href":"/solutions/wallets/embedded-wallet/05-validation#social-login","html":"\n<p>Users who log in via established social auth providers like Google or Facebook don&#x27;t need additional validation. However, when logging in using a custom provider, we cannot guarantee sufficient protection of user&#x27;s identity. Due to this, we might require additional verification by asking the user to provide a one-time code we send to their email address.</p>\n<p>Please contact Sequence support if you wish to discuss whether your authentication provider can be considered trusted.</p>\n","isPage":false,"text":"\nUsers who log in via established social auth providers like Google or Facebook don&#x27;t need additional validation. However, when logging in using a custom provider, we cannot guarantee sufficient protection of user&#x27;s identity. Due to this, we might require additional verification by asking the user to provide a one-time code we send to their email address.\nPlease contact Sequence support if you wish to discuss whether your authentication provider can be considered trusted.\n","title":"Social login","titles":["Validation",null]},"432":{"href":"/solutions/wallets/embedded-wallet/05-validation#validation-status","html":"\n<p>To check the validation status of the current session, use the <code>isSessionValid</code> method. This returns <code>true</code> for email login and trusted social logins and <code>false</code> for custom logins until email validation is complete.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> isValid</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSessionValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(isValid)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>true</span></span></code></pre>\n","isPage":false,"text":"\nTo check the validation status of the current session, use the isSessionValid method. This returns true for email login and trusted social logins and false for custom logins until email validation is complete.\nconst isValid = await waas.isSessionValid()\nconsole.log(isValid)\ntrue\n","title":"Validation status","titles":["Validation"]},"433":{"href":"/solutions/wallets/embedded-wallet/05-validation#trigger-session-validation","html":"\n<p>Manually trigger a session validation with the <code>validateSession</code> method. This will send a code to the user&#x27;s email. If validated within 10 minutes, the method returns <code>true</code>; otherwise, it returns <code>false</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">validateSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>true</span></span></code></pre>\n<p>Once user receives the code, he can validate the session with the <code>finishValidateSession</code> method that takes the code as an argument. If the code is valid, the method returns <code>true</code>; otherwise, it returns <code>false</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">finishValidateSession</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;123456&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>true</span></span></code></pre>\n","isPage":false,"text":"\nManually trigger a session validation with the validateSession method. This will send a code to the user&#x27;s email. If validated within 10 minutes, the method returns true; otherwise, it returns false.\nconst result = await waas.validateSession()\ntrue\nOnce user receives the code, he can validate the session with the finishValidateSession method that takes the code as an argument. If the code is valid, the method returns true; otherwise, it returns false.\nconst result = await waas.finishValidateSession(&#x27;123456&#x27;)\ntrue\n","title":"Trigger session validation","titles":["Validation","Validation status"]},"434":{"href":"/solutions/wallets/embedded-wallet/05-validation#onvalidationrequired-callback","html":"\n<p>The <code>onValidationRequired</code> callback is triggered when a session validation is required. This can happen when a user tries to perform an action that requires validation, such as sending a transaction or signing a message. It determines whether the session validation should be triggered or not. If the callback returns <code>true</code>, the session validation is triggered. If it returns <code>false</code>, the action is cancelled.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  validation: {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    onValidationRequired</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42161</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  token: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x6b175474e89094c44da98b954eedeac495271d0f&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// DAI</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x27CabC9700EE6Db2797b6AC1e1eCe81C72A2cD8D&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recipient</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;200000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,                      </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 200 DAI</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe onValidationRequired callback is triggered when a session validation is required. This can happen when a user tries to perform an action that requires validation, such as sending a transaction or signing a message. It determines whether the session validation should be triggered or not. If the callback returns true, the session validation is triggered. If it returns false, the action is cancelled.\nconst tx = await waas.sendERC20({\n  validation: {\n    onValidationRequired: () =&gt; true\n  },\n  chainId: 42161,\n  token: &#x27;0x6b175474e89094c44da98b954eedeac495271d0f&#x27;, // DAI\n  to: &#x27;0x27CabC9700EE6Db2797b6AC1e1eCe81C72A2cD8D&#x27;,    // Recipient\n  value: &#x27;200000000000000000000&#x27;,                      // 200 DAI\n})\n","title":"onValidationRequired callback","titles":["Validation","Validation status","Trigger session validation"]},"435":{"href":"/solutions/wallets/embedded-wallet/05-validation#listen-for-session-validations","html":"\n<p>Events like transaction sends may silently prompt session validation. Use the <code>onValidationRequired</code> hook to catch such instances.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">onValidationRequired</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session has been triggered for validation&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, { to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Session has been triggered for validation</span></span></code></pre>\n","isPage":false,"text":"\nEvents like transaction sends may silently prompt session validation. Use the onValidationRequired hook to catch such instances.\nwaas.onValidationRequired(() =&gt; {\n  console.log(&#x27;Session has been triggered for validation&#x27;);\n})\n \nawait waas.sendTransaction({ chainId: 1 }, { to: &#x27;0x...&#x27;, value: &#x27;1&#x27; });\nSession has been triggered for validation\n","title":"Listen for session validations","titles":["Validation","Validation status"]},"436":{"href":"/solutions/wallets/embedded-wallet/05-validation#automatic-session-validation","html":"\n<p>Session validation is automatic when certain actions requiring validation are performed. This can be managed using the <code>onValidationRequired</code> hook.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  validation: {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    onValidationRequired</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session has been triggered for validation&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x061150e5574716DBb1a2cdf54b3DcE9F94395f65&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>By returning <code>true</code> or <code>false</code> from the <code>onValidationRequired</code> hook, you either continue or cancel the action, respectively.</p>","isPage":false,"text":"\nSession validation is automatic when certain actions requiring validation are performed. This can be managed using the onValidationRequired hook.\nconst tx = await waas.sendTransaction({\n  chainId: 1,\n  validation: {\n    onValidationRequired: () =&gt; {\n      console.log(&#x27;Session has been triggered for validation&#x27;);\n      return true;\n    }\n  },\n  to: &#x27;0x061150e5574716DBb1a2cdf54b3DcE9F94395f65&#x27;,\n  value: &#x27;1&#x27;\n})\nBy returning true or false from the onValidationRequired hook, you either continue or cancel the action, respectively.","title":"Automatic session validation","titles":["Validation"]},"437":{"href":"/solutions/wallets/embedded-wallet/06-transaction-receipts#transaction-receipts","html":"</header>\n<p>Any methods that involve sending transactions will return either <em>successful</em> or <em>failed</em> transaction receipts. Failed transaction receipts are generated without executing the transaction.</p>\n","isPage":true,"text":"\nAny methods that involve sending transactions will return either successful or failed transaction receipts. Failed transaction receipts are generated without executing the transaction.\n","title":"Transaction receipts","titles":[]},"438":{"href":"/solutions/wallets/embedded-wallet/06-transaction-receipts#successful-transaction-response","html":"\n<p>Any transaction that is successfully included in a block will return a <code>SentTransactionResponse</code> object. This must be checked for before accessing the transaction hash, using the <code>isSentTransactionResponse</code> type guard.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Sequence, isSentTransactionResponse } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Session name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42161</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transactions: [{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xD72C236Be524Ec24F72329317e2785E687105B69&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSentTransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The relevant fields are:</p>\n<ul>\n<li><code>txHash</code>: The transaction hash of the transaction that was sent to the network.</li>\n<li><code>receipt.logs</code>: Logs emitted by the transaction.</li>\n<li><code>receipt.status</code>: The status of the transaction. <code>SUCCEEDED</code> or <code>FAILED</code>.</li>\n<li><code>receipt.revertReason</code>: If the transaction was executed but reverted, it includes the reason.</li>\n</ul>\n<p>To view the full response object, see the [Transaction Receipt Response] section.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transactionReceipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;txHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;metaTxHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;nativeReceipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: { </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;receipt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;index&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;logs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;topics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;receipts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [ </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;revertReason&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SUCCEEDED&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;request&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: { </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;simulations&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [ </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAny transaction that is successfully included in a block will return a SentTransactionResponse object. This must be checked for before accessing the transaction hash, using the isSentTransactionResponse type guard.\nimport { Sequence, isSentTransactionResponse } from &#x27;@0xsequence/waas&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\n \nawait waas.signIn({ idToken }, &quot;Session name&quot;)\n \nconst tx = await waas.sendTransaction({\n  chainId: 42161,\n  transactions: [{\n    to: &#x27;0xD72C236Be524Ec24F72329317e2785E687105B69&#x27;, value: &#x27;0&#x27;\n  }]\n})\n \nif (isSentTransactionResponse(tx)) {\n  console.log(tx)\n}\nThe relevant fields are:\n\ntxHash: The transaction hash of the transaction that was sent to the network.\nreceipt.logs: Logs emitted by the transaction.\nreceipt.status: The status of the transaction. SUCCEEDED or FAILED.\nreceipt.revertReason: If the transaction was executed but reverted, it includes the reason.\n\nTo view the full response object, see the [Transaction Receipt Response] section.\n{\n  &quot;code&quot;: &quot;transactionReceipt&quot;,\n  &quot;data&quot;: {\n    &quot;txHash&quot;: &quot;0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c&quot;,\n    &quot;metaTxHash&quot;: &quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;,\n    &quot;nativeReceipt&quot;: { ... },\n    &quot;receipt&quot;: {\n      &quot;id&quot;: &quot;acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;,\n      &quot;index&quot;: 0,\n      &quot;logs&quot;: [\n        {\n          &quot;address&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;,\n          &quot;data&quot;: &quot;0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001&quot;,\n          &quot;topics&quot;: [\n            &quot;0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881&quot;\n          ]\n        },\n        {\n          &quot;address&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;,\n          &quot;data&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,\n          &quot;topics&quot;: [\n            &quot;0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7&quot;,\n            &quot;0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0&quot;\n          ]\n        }\n      ],\n      &quot;receipts&quot;: [ ... ],\n      &quot;revertReason&quot;: null,\n      &quot;status&quot;: &quot;SUCCEEDED&quot;\n    },\n    &quot;request&quot;: { ... },\n    &quot;simulations&quot;: [ ... ]\n  }\n}\n","title":"Successful transaction response","titles":["Transaction receipts"]},"439":{"href":"/solutions/wallets/embedded-wallet/06-transaction-receipts#failed-transaction-response","html":"\n<p>An Embedded Wallet will try to catch any failing transactions before they are sent to the network. This is done by simulating the transaction on the network before sending it. If the simulation fails, the transaction will not be sent to the network and a <code>FailedTransactionResponse</code> will be returned.</p>\n<p>To view the full response object, see the TODO: link to wallet API [Transaction Receipt Response] section.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Sequence, isSentTransactionResponse } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/waas&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> waas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SequenceWaaS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  projectAccessKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PROJECT_ACCESS_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  waasConfigKey: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">WAAS_CONFIG_KEY</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mumbai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, defaults.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TEST</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signIn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ idToken }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Session name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> waas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">137</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transactions: [{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // This address always fails on Polygon, give it a try :D</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isSentTransactionResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... This will never be executed</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // tx can only be `SentTransactionResponse` or `FailedTransactionResponse`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transactionFailed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;This is an error message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;request&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sendTransaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;expires&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1699443005</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;identifier&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts-sdk-1699442705965-0x153824576D03629b264683B430bBF9AcEA1d0975&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;issued&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1699442705</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;network&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;137&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;transactions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x00&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;simulations&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;executed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;gasLimit&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">7908</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;gasUsed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5931</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;reason&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;This is an error message :)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;succeeded&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nAn Embedded Wallet will try to catch any failing transactions before they are sent to the network. This is done by simulating the transaction on the network before sending it. If the simulation fails, the transaction will not be sent to the network and a FailedTransactionResponse will be returned.\nTo view the full response object, see the TODO: link to wallet API [Transaction Receipt Response] section.\nimport { Sequence, isSentTransactionResponse } from &#x27;@0xsequence/waas&#x27;\n \nconst waas = new SequenceWaaS({\n  projectAccessKey: `${process.env.PROJECT_ACCESS_KEY}`,\n  waasConfigKey: `${process.env.WAAS_CONFIG_KEY}`,\n  network: &#x27;mumbai&#x27;\n}, defaults.TEST)\n \nawait waas.signIn({ idToken }, &quot;Session name&quot;)\n \nconst tx = await waas.sendTransaction({\n  chainId: 137,\n  transactions: [{\n    // This address always fails on Polygon, give it a try :D\n    to: &#x27;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&#x27;, value: &#x27;0&#x27;\n  }]\n})\n \nif (isSentTransactionResponse(tx)) {\n  // ... This will never be executed\n} else {\n  // tx can only be `SentTransactionResponse` or `FailedTransactionResponse`\n  console.log(tx)\n}\n{\n  &quot;code&quot;: &quot;transactionFailed&quot;,\n  &quot;data&quot;: {\n    &quot;error&quot;: &quot;This is an error message&quot;,\n    &quot;request&quot;: {\n      &quot;code&quot;: &quot;sendTransaction&quot;,\n      &quot;expires&quot;: 1699443005,\n      &quot;identifier&quot;: &quot;ts-sdk-1699442705965-0x153824576D03629b264683B430bBF9AcEA1d0975&quot;,\n      &quot;issued&quot;: 1699442705,\n      &quot;network&quot;: &quot;137&quot;,\n      &quot;transactions&quot;: [\n        {\n          &quot;data&quot;: &quot;0x&quot;,\n          &quot;to&quot;: &quot;0x839eE023B21f4Ffe2294025DE0AC30Ba7278D6Fd&quot;,\n          &quot;type&quot;: &quot;transaction&quot;,\n          &quot;value&quot;: &quot;0x00&quot;\n        }\n      ],\n      &quot;wallet&quot;: &quot;0x4d4EE1b8583e31fe789eAF2e1b6e011C220c10B6&quot;\n    },\n    &quot;simulations&quot;: [\n      {\n        &quot;executed&quot;: true,\n        &quot;gasLimit&quot;: 7908,\n        &quot;gasUsed&quot;: 5931,\n        &quot;reason&quot;: &quot;This is an error message :)&quot;,\n        &quot;result&quot;: null,\n        &quot;succeeded&quot;: false\n      }\n    ]\n  }\n}","title":"Failed transaction response","titles":["Transaction receipts"]},"440":{"href":"/solutions/wallets/universal-wallet/02-quickstart#quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Quickstart","titles":[]},"441":{"href":"/solutions/wallets/universal-wallet/02-quickstart#try-a-demo","html":"\n<aside data-callout=\"info\"><p>Try out the Universal Wallet leveraging SequenceKit at our <a href=\"https://0xsequence.github.io/kit/\">demo</a></p></aside>\n","isPage":false,"text":"\nTry out the Universal Wallet leveraging SequenceKit at our demo\n","title":"Try a Demo","titles":["Quickstart"]},"442":{"href":"/solutions/wallets/universal-wallet/02-quickstart#template","html":"\n<aside data-callout=\"info\"><p>Get started quickly with a <a href=\"https://github.com/0xsequence/kit/tree/master/examples/react\">template</a> using SequenceKit</p></aside>\n","isPage":false,"text":"\nGet started quickly with a template using SequenceKit\n","title":"Template","titles":["Quickstart"]},"443":{"href":"/solutions/wallets/universal-wallet/02-quickstart#install","html":"\n<p>The sequence.js SDK is composed of several sub-packages combined into a single meta-package called <code>0xsequence</code>.\nTo add the SDK to your project, add a dependency on 0xsequence to your package.json:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">xsequence ethers</span></span></code></pre>\n<p>If you know that your project only requires specific sub-packages, you can also depend on those directly with\n<code>npm add @0xsequence/&lt;sub-package name&gt;</code>.</p>\n<p>Your package.json should look something like this (actual version may vary):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;my-dapp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;dependencies&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;0xsequence&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;^1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;ethers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">^</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5.7</span><span style=\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe sequence.js SDK is composed of several sub-packages combined into a single meta-package called 0xsequence.\nTo add the SDK to your project, add a dependency on 0xsequence to your package.json:\nnpm install 0xsequence ethers\nor\npnpm install 0xsequence ethers\nor\nyarn add 0xsequence ethers\nIf you know that your project only requires specific sub-packages, you can also depend on those directly with\nnpm add @0xsequence/&lt;sub-package name&gt;.\nYour package.json should look something like this (actual version may vary):\n{\n  &quot;name&quot;: &quot;my-dapp&quot;,\n  ...\n  &quot;dependencies&quot;: {\n    &quot;0xsequence&quot;: &quot;^1.0.0&quot;,\n    &quot;ethers&quot;: ^5.7.0&quot;\n    ...\n  }\n}\n","title":"Install","titles":["Quickstart"]},"444":{"href":"/solutions/wallets/universal-wallet/02-quickstart#cdn-distribution-as-native-js","html":"\n<p>Optionally, <code>0xsequence</code> can be installed as a JS script source (UMD distribution) via:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://cdn.ethers.io/lib/ethers-5.7.umd.min.js&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://unpkg.com/0xsequence@latest/dist/0xsequence.umd.min.js&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>","isPage":false,"text":"\nOptionally, 0xsequence can be installed as a JS script source (UMD distribution) via:\n&lt;script src=&quot;https://cdn.ethers.io/lib/ethers-5.7.umd.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://unpkg.com/0xsequence@latest/dist/0xsequence.umd.min.js&quot;&gt;&lt;/script&gt;","title":"CDN distribution as native JS","titles":["Quickstart","Install",null]},"445":{"href":"/solutions/wallets/universal-wallet/04-sequence-kit#sequence-kit-seamlessly-integrate-web3-wallets-into-your-applications","html":"</header>\n<p>Sequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular <a href=\"https://wagmi.sh/\">wagmi</a> library, unlock a realm of possibilities in the world of web3.</p>\n","isPage":true,"text":"\nSequence Kit 🧰 is the ultimate toolkit for effortlessly integrating web3 wallets into your applications, providing your users with a smooth and secure onboarding experience. With our robust tools built on the popular wagmi library, unlock a realm of possibilities in the world of web3.\n","title":"Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications","titles":[]},"446":{"href":"/solutions/wallets/universal-wallet/04-sequence-kit#key-features","html":"\n<ul>\n<li>\n<p><strong>Universal Connections</strong>: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪</p>\n</li>\n<li>\n<p><strong>Web3 Wallet Integration</strong>: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️</p>\n</li>\n<li>\n<p><strong>Embedded Wallet Experience</strong>: Provide your users with a comprehensive embedded wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙</p>\n</li>\n</ul>\n<p>Explore the potential of Sequence Kit by trying out our <a href=\"https://0xsequence.github.io/kit\">demo</a>!</p>\n<header>","isPage":false,"text":"\n\n\nUniversal Connections: Seamlessly connect via popular social logins such as Facebook, Google, Discord, and more! Your users will enjoy a smooth, secure onboarding process. 🔐🪪\n\n\nWeb3 Wallet Integration: Effortlessly integrate with leading web3 wallets like WalletConnect and MetaMask. Unleash the power of blockchain with just a few clicks! 🦊 ⛓️\n\n\nEmbedded Wallet Experience: Provide your users with a comprehensive embedded wallet, enabling them to manage their coins and collectibles all within your own application. 👛 🖼️ 🪙\n\n\nExplore the potential of Sequence Kit by trying out our demo!\n","title":"Key Features","titles":["Sequence Kit: Seamlessly Integrate Web3 Wallets into Your Applications"]},"447":{"href":"/solutions/wallets/universal-wallet/04-sequence-kit#next-steps","html":"</header>\n<p>Ready to integrate Sequence Kit into your application? Check out our <a href=\"#TODO\">Getting Started guide</a>. If you&#x27;re already familiar with Sequence Kit dive into the available <a href=\"#TODO\">configuration options</a> or take a look at the <a href=\"#TODO\">checkout</a>.</p>","isPage":false,"text":"\nReady to integrate Sequence Kit into your application? Check out our Getting Started guide. If you&#x27;re already familiar with Sequence Kit dive into the available configuration options or take a look at the checkout.","title":"Next Steps","titles":[]},"448":{"href":"/solutions/wallets/universal-wallet/05-platforms#platforms","html":"</header>\n","isPage":true,"text":"\n","title":"Platforms","titles":[]},"449":{"href":"/solutions/wallets/universal-wallet/05-platforms#web-wallet","html":"\n<p>Sequence works beautifully on all modern Web Browsers! Try it at <a href=\"https://sequence.app\">https://sequence.app</a> from any computer, phone or tablet.</p>\n<p>See <a href=\"/solutions/wallets/universal-wallet/02-quickstart.mdx\">Build With Sequence</a> to get started.</p>\n","isPage":false,"text":"\nSequence works beautifully on all modern Web Browsers! Try it at https://sequence.app from any computer, phone or tablet.\nSee Build With Sequence to get started.\n","title":"Web Wallet","titles":["Platforms"]},"450":{"href":"/solutions/wallets/universal-wallet/05-platforms#mobile-wallet","html":"\n<p>Sequence works beautifully on your Mobile Web Browser! Try it at <a href=\"https://sequence.app\">https://sequence.app</a> from any phone or tablet.</p>\n<p>This means dapps which integrate the Sequence Wallet will automatically support users on all mobile devices,\nwhile using standard Ethereum web3 dapp-to-wallet communication. See <a href=\"/solutions/wallets/universal-wallet/02-quickstart.mdx\">Build With Sequence</a> to get started.</p>\n","isPage":false,"text":"\nSequence works beautifully on your Mobile Web Browser! Try it at https://sequence.app from any phone or tablet.\nThis means dapps which integrate the Sequence Wallet will automatically support users on all mobile devices,\nwhile using standard Ethereum web3 dapp-to-wallet communication. See Build With Sequence to get started.\n","title":"Mobile Wallet","titles":["Platforms"]},"451":{"href":"/solutions/wallets/universal-wallet/05-platforms#browser-extension-wallet","html":"\n<p>Sequence Chrome Extension: <a href=\"https://chrome.google.com/webstore/detail/sequence-wallet/ocmccklecaalljlflmclidjeclpcpdim?hl=en\">Install</a></p>\n<p><img src=\"/img/build/seq-chrome-store.png\" alt=\"Sequence Chrome Extension\"/></p>\n<p><img src=\"/img/build/seq-chrome-ext-uniswap.png\" alt=\"Sequence Chrome Extension\"/></p>","isPage":false,"text":"\nSequence Chrome Extension: Install\n\n","title":"Browser Extension Wallet","titles":["Platforms"]},"452":{"href":"/solutions/wallets/universal-wallet/06-fiat-on-ramps#fiat-on-ramps","html":"</header>\n<p>Sequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;</p>\n<ul>\n<li><a href=\"https://www.moonpay.com/\">Moonpay</a></li>\n<li><a href=\"https://ramp.network/\">Ramp</a></li>\n<li><a href=\"https://onmeta.in/\">UPI via Onmeta</a></li>\n<li><a href=\"https://www.sardine.ai/\">Sardine</a></li>\n<li><a href=\"https://paytrie.com/\">PayTrie</a></li>\n<li><a href=\"https://www.sendwyre.com/\">Wyre</a> (deprecated)</li>\n</ul>\n<p>Only providers that support the region the users are in will be displayed.</p>\n<p><img src=\"/img/fiat-providers.png\" alt=\"Sequence on-demand sign in\"/></p>\n<p>As a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.</p>\n<p>To learn more on how to configure the on-ramp options, see <a href=\"/solutions/wallets/universal-wallet/03-guides/01-connect-wallet#wallet-login-and-connect-options\">Sequence Connect Options</a>.</p>","isPage":true,"text":"\nSequence Wallet allows users to purchase cryptocurrencies directly with their credit card and debit card via on-ramp providers. Currently Sequence supports 6 on-ramp providers;\n\nMoonpay\nRamp\nUPI via Onmeta\nSardine\nPayTrie\nWyre (deprecated)\n\nOnly providers that support the region the users are in will be displayed.\n\nAs a developer integrating the Sequence Wallet, you can choose which payment provider can be visible to users. You can also specify which token will be available to purchase via the on-ramp providers.\nTo learn more on how to configure the on-ramp options, see Sequence Connect Options.","title":"Fiat On-Ramps","titles":[]},"453":{"href":"/solutions/wallets/universal-wallet/07-key-management#key-management","html":"</header>\n<p>Each Sequence wallet can be controlled by multiple private keys, acting like a multisignature wallet. Users can either create a Sequence wallet using one of the supported social login options or create a wallet with a private key stored only on that device.</p>\n<p>The improved security compared to traditional blockchain wallet comes from the fact that multiple independent keys need to be compromised for a malicious actor to take control of a user’s wallet, instead of a single key. The philosophy is that the more independent private-keys the user adds to their wallet, the more secure their wallet becomes, even if each individual key is only moderately secure on their own.</p>\n","isPage":true,"text":"\nEach Sequence wallet can be controlled by multiple private keys, acting like a multisignature wallet. Users can either create a Sequence wallet using one of the supported social login options or create a wallet with a private key stored only on that device.\nThe improved security compared to traditional blockchain wallet comes from the fact that multiple independent keys need to be compromised for a malicious actor to take control of a user’s wallet, instead of a single key. The philosophy is that the more independent private-keys the user adds to their wallet, the more secure their wallet becomes, even if each individual key is only moderately secure on their own.\n","title":"Key Management","titles":[]},"454":{"href":"/solutions/wallets/universal-wallet/07-key-management#social-login-wallets","html":"\n<p>Sequence Wallet created with social logins are currently secured using three private keys: Session keys, a Guard key and a Torus key. The Session key and Torus key are both generated for the first time when a user creates their Sequence Wallet via social login or email authentication.\nAt least two of the three keys are needed to unlock an account. This means that if one of the three keys is lost or compromised, a user can use the two remaining keys to replace the lost/compromised key. For example, if a user lost their device containing their Session Key, they can unlock their Sequence Wallet account by email or social login for the Torus key combined with the Guard key. Once done, another session key is auto-generated and the user is back in their account with all 3 keys accessible again.</p>\n","isPage":false,"text":"\nSequence Wallet created with social logins are currently secured using three private keys: Session keys, a Guard key and a Torus key. The Session key and Torus key are both generated for the first time when a user creates their Sequence Wallet via social login or email authentication.\nAt least two of the three keys are needed to unlock an account. This means that if one of the three keys is lost or compromised, a user can use the two remaining keys to replace the lost/compromised key. For example, if a user lost their device containing their Session Key, they can unlock their Sequence Wallet account by email or social login for the Torus key combined with the Guard key. Once done, another session key is auto-generated and the user is back in their account with all 3 keys accessible again.\n","title":"Social Login Wallets","titles":["Key Management"]},"455":{"href":"/solutions/wallets/universal-wallet/07-key-management#session-keys","html":"\n<p>Session keys are stored in the browser&#x27;s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a>.\nUsers should be prudent in safeguarding their devices from unauthorized access since an attacker with access to their IndexedDB effectively has control of their session key.</p>\n","isPage":false,"text":"\nSession keys are stored in the browser&#x27;s IndexedDB.\nUsers should be prudent in safeguarding their devices from unauthorized access since an attacker with access to their IndexedDB effectively has control of their session key.\n","title":"Session Keys","titles":["Key Management","Social Login Wallets"]},"456":{"href":"/solutions/wallets/universal-wallet/07-key-management#guard-key","html":"\n<p>A Guard key is a key owned by Horizon. This key allows Horizon to help users that lost their Session key and can require additional information from the user in case of suspicious activity, if the user wants this additional protection. This key would be compromised if a malicious actor took control over Horizon servers hosting the Guard key.</p>\n","isPage":false,"text":"\nA Guard key is a key owned by Horizon. This key allows Horizon to help users that lost their Session key and can require additional information from the user in case of suspicious activity, if the user wants this additional protection. This key would be compromised if a malicious actor took control over Horizon servers hosting the Guard key.\n","title":"Guard Key","titles":["Key Management","Social Login Wallets"]},"457":{"href":"/solutions/wallets/universal-wallet/07-key-management#torus-key","html":"\n<p>A Torus key is a key generated by the <a href=\"https://tor.us/\">Torus network</a>, and is generated using a user’s email or social login credentials such as Google or AppleID. Torus uses threshold cryptography to ensure that only the user can access their private key, making these keys non-custodial. A Torus key would be compromised if a malicious actor had control over the social account or email a user used to generate their Torus key. All Torus keys could be compromised if the Torus network itself was compromised.</p>\n<p>:::info DEFAULTS + CUSTOMIZATION</p>\n<p>While this is the default setup for new Sequence Wallets, we intend to add the ability for users to add, remove and replace the keys controlling their wallet such that users can choose their preference in terms of security and user experience tradeoff. Even the Guard key will be able to be removed. Security tips and recommendations will be added to ensure users are well informed of the risks and how to protect themselves against them.</p>\n<p>:::</p>","isPage":false,"text":"\nA Torus key is a key generated by the Torus network, and is generated using a user’s email or social login credentials such as Google or AppleID. Torus uses threshold cryptography to ensure that only the user can access their private key, making these keys non-custodial. A Torus key would be compromised if a malicious actor had control over the social account or email a user used to generate their Torus key. All Torus keys could be compromised if the Torus network itself was compromised.\n:::info DEFAULTS + CUSTOMIZATION\nWhile this is the default setup for new Sequence Wallets, we intend to add the ability for users to add, remove and replace the keys controlling their wallet such that users can choose their preference in terms of security and user experience tradeoff. Even the Guard key will be able to be removed. Security tips and recommendations will be added to ensure users are well informed of the risks and how to protect themselves against them.\n:::","title":"Torus Key","titles":["Key Management","Social Login Wallets"]},"458":{"href":"/solutions/wallets/universal-wallet/03-guides/02-auth-address#authenticate-users-with-message-signature","html":"</header>\n","isPage":true,"text":"\n","title":"Authenticate Users with Message Signature","titles":[]},"459":{"href":"/solutions/wallets/universal-wallet/03-guides/02-auth-address#ask-for-the-wallet-address","html":"\n<p>To get the user&#x27;s Sequence wallet address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\nTo get the user&#x27;s Sequence wallet address:\nconst wallet = sequence.getWallet()\nconst address = wallet.getAddress()\nconsole.log(address)\n","title":"Ask for the wallet address","titles":["Authenticate Users with Message Signature"]},"460":{"href":"/solutions/wallets/universal-wallet/03-guides/02-auth-address#authenticate-wallet","html":"\n<p>In many cases, you&#x27;ll want your users to connect and then verify they do control this wallet address. Applications typically do this by asking the user\nto sign a message with their wallet, and then verify the signature from the user to ensure its integrity.</p>\n<p>As this is such a common workflow, Sequence can automatically authenticate the account address at the same time\nwhile the user is prompt to connect their wallet to your dapp. This allows the user experience to be simpler and\nmore seamless.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { sequence } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xsequence&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sequence.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> connectDetails</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  app: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Your Dapp name&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorize: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // &lt;---&lt;&lt;&lt; this will automatically sign+verify a EIP712 message when user clicks &quot;Connect&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>It will look like this to your users:</p>\n<img alt=\"Sequence on-demand sign in, connect\" src=\"/img/authorize_connect.png\" width=\"400\"/>\n<p>In the above example, we pass <code>authorize: true</code> to the <code>connect()</code> function, which will automatically have the user\nsign a <strong>EIP712 signed message</strong> to prove their identity. This allows you to then easily authenticate the connected\nwallet address with absolute certainty.</p>\n<p>You can find the signed message proof returned in <code>connectDetails.proof</code>, which is an EIP712 signed object using\na simple convention from <a href=\"https://github.com/0xsequence/ethauth.js\">ethauth</a>. NOTE: EIP712 allows you to use an actual object for\nsigning instead of just a plain-text string.</p>\n","isPage":false,"text":"\nIn many cases, you&#x27;ll want your users to connect and then verify they do control this wallet address. Applications typically do this by asking the user\nto sign a message with their wallet, and then verify the signature from the user to ensure its integrity.\nAs this is such a common workflow, Sequence can automatically authenticate the account address at the same time\nwhile the user is prompt to connect their wallet to your dapp. This allows the user experience to be simpler and\nmore seamless.\nimport { sequence } from &#x27;0xsequence&#x27;\n \nconst wallet = sequence.getWallet()\n \nconst connectDetails = await wallet.connect({\n  app: &#x27;Your Dapp name&#x27;,\n  authorize: true // &lt;---&lt;&lt;&lt; this will automatically sign+verify a EIP712 message when user clicks &quot;Connect&quot;\n})\nIt will look like this to your users:\n\nIn the above example, we pass authorize: true to the connect() function, which will automatically have the user\nsign a EIP712 signed message to prove their identity. This allows you to then easily authenticate the connected\nwallet address with absolute certainty.\nYou can find the signed message proof returned in connectDetails.proof, which is an EIP712 signed object using\na simple convention from ethauth. NOTE: EIP712 allows you to use an actual object for\nsigning instead of just a plain-text string.\n","title":"Authenticate wallet","titles":["Authenticate Users with Message Signature"]},"461":{"href":"/solutions/wallets/universal-wallet/03-guides/02-auth-address#authenticate-wallet-server-side","html":"\n<p>The above example demonstrates how to connect and verify the user&#x27;s identity in your dapp on the client-side,\nbut if you&#x27;d like to authenticate the Sequence authorization proof on your server, then you can do so with the following snippet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ValidateSequenceWalletProof } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/auth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { commons, v2 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/core&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ETHAuth } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/ethauth&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { trackers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/sessions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> *</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://polygon-mainnet.infura.io/v3/&lt;your infura key here&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.providers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">JsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// create an EIP-6492-aware ETHAuth proof validator</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> validator</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ValidateSequenceWalletProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> commons.reader.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">OnChainReader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(provider),</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> trackers.remote.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RemoteConfigTracker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://sessions.sequence.app&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  v2.DeployedWalletContext</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ethauth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ETHAuth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validator)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethauth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">configJsonRpcProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcUrl)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> proof</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethAuth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decodeProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(connectDetails.proof.proofString)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`proof for address ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">proof</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">address</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">} is valid`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (err) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`invalid proof -- do not trust address: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>See the <a href=\"https://github.com/0xsequence/go-sequence\">Go Sequence SDK</a> on using Sequence in your Go applications.</p>\n<p>If your server is written in a language other than Javascript/Typescript or Go, all you have to do is validate\nthe signature with <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">EIP1271, the standard method for validating signed messages for a smart wallet</a>.</p>\n<p>As always, if you have any questions or require help, reach out to us on <a href=\"https://discord.gg/sequence\">Discord</a>.</p>","isPage":false,"text":"\nThe above example demonstrates how to connect and verify the user&#x27;s identity in your dapp on the client-side,\nbut if you&#x27;d like to authenticate the Sequence authorization proof on your server, then you can do so with the following snippet:\nimport { ValidateSequenceWalletProof } from &#x27;@0xsequence/auth&#x27;\nimport { commons, v2 } from &#x27;@0xsequence/core&#x27;\nimport { ETHAuth } from &#x27;@0xsequence/ethauth&#x27;\nimport { trackers } from &#x27;@0xsequence/sessions&#x27;\nimport * as ethers from &#x27;ethers&#x27;\n \n// ...\n \nconst rpcUrl = &#x27;https://polygon-mainnet.infura.io/v3/&lt;your infura key here&gt;&#x27;\nconst provider = new ethers.providers.JsonRpcProvider(rpcUrl)\n \n// create an EIP-6492-aware ETHAuth proof validator\nconst validator = ValidateSequenceWalletProof(\n  () =&gt; new commons.reader.OnChainReader(provider),\n  new trackers.remote.RemoteConfigTracker(&#x27;https://sessions.sequence.app&#x27;),\n  v2.DeployedWalletContext\n)\nconst ethauth = new ETHAuth(validator)\nawait ethauth.configJsonRpcProvider(rpcUrl)\n \ntry {\n  const proof = await ethAuth.decodeProof(connectDetails.proof.proofString)\n  console.log(`proof for address ${proof.address} is valid`)\n} catch (err) {\n  console.log(`invalid proof -- do not trust address: ${err}`)\n}\nSee the Go Sequence SDK on using Sequence in your Go applications.\nIf your server is written in a language other than Javascript/Typescript or Go, all you have to do is validate\nthe signature with EIP1271, the standard method for validating signed messages for a smart wallet.\nAs always, if you have any questions or require help, reach out to us on Discord.","title":"Authenticate wallet server-side","titles":["Authenticate Users with Message Signature"]},"462":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#no-wallet-confirmation-signatures","html":"</header>\n<p>It is possible to build an application where users sign messages without requiring a confirmation in their Sequence wallet every time. This is possible using <em>session keys</em>, or ephemeral keys.</p>\n<header>","isPage":true,"text":"\nIt is possible to build an application where users sign messages without requiring a confirmation in their Sequence wallet every time. This is possible using session keys, or ephemeral keys.\n","title":"No-Wallet-Confirmation Signatures","titles":[]},"463":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#session-keys","html":"</header>\n<p>Session keys are ephemeral private keys that can be generated and stored client-side, typically in a user&#x27;s local storage. They provide a convenient and secure way for users to authorize specific actions in a decentralized application without requiring them to confirm each action through their primary wallet.</p>\n<p>By signing a message with their primary wallet (e.g., Sequence Wallet), users can authorize a session key to act on their behalf for a limited time or scope. Applications can then interpret signed messages from the session key as if they were coming directly from the user&#x27;s wallet, streamlining the user experience.</p>\n<p>Session keys are particularly useful for applications that require frequent user interactions, as they help reduce the number of wallet confirmations needed, while still maintaining a secure and verifiable authentication process.</p>\n<header>","isPage":false,"text":"\nSession keys are ephemeral private keys that can be generated and stored client-side, typically in a user&#x27;s local storage. They provide a convenient and secure way for users to authorize specific actions in a decentralized application without requiring them to confirm each action through their primary wallet.\nBy signing a message with their primary wallet (e.g., Sequence Wallet), users can authorize a session key to act on their behalf for a limited time or scope. Applications can then interpret signed messages from the session key as if they were coming directly from the user&#x27;s wallet, streamlining the user experience.\nSession keys are particularly useful for applications that require frequent user interactions, as they help reduce the number of wallet confirmations needed, while still maintaining a secure and verifiable authentication process.\n","title":"Session Keys","titles":[]},"464":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#using-session-keys-with-sequence","html":"</header>\n","isPage":false,"text":"\n","title":"Using Session keys with Sequence","titles":[]},"465":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#1-initialize-sequence-wallet-and-connect","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Wallet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@0xsequence/wallet&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethers } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> userAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nimport { Wallet } from &#x27;@0xsequence/wallet&#x27;\nimport { ethers } from &#x27;ethers&#x27;\n \nconst wallet = new Wallet()\nawait wallet.connect()\n \nconst signer = wallet.getSigner()\nconst userAddress = signer.getAddress()\n","title":"1. Initialize Sequence Wallet and Connect","titles":["Using Session keys with Sequence",null]},"466":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#2-generate-a-session-key","html":"\n<p>Create a new ephemeral private key, store it in local storage, and derive the associated address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionPrivateKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">randomBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">localStorage.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;sessionPrivateKey&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexlify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sessionPrivateKey))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionWallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sessionPrivateKey)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionWallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nCreate a new ephemeral private key, store it in local storage, and derive the associated address:\nconst sessionPrivateKey = ethers.utils.randomBytes(32)\nlocalStorage.setItem(&#x27;sessionPrivateKey&#x27;, ethers.utils.hexlify(sessionPrivateKey))\nconst sessionWallet = new ethers.Wallet(sessionPrivateKey)\nconst sessionAddress = await sessionWallet.getAddress()\n","title":"2. Generate a Session Key","titles":["Using Session keys with Sequence",null]},"467":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#3-sign-authorization-message","html":"\n<p>Sign a message with the user&#x27;s Sequence Wallet to authorize the session key:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> authorizationMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `Authorize this device to play this game.`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(authorizationMessage)</span></span></code></pre>\n","isPage":false,"text":"\nSign a message with the user&#x27;s Sequence Wallet to authorize the session key:\nconst authorizationMessage = `Authorize this device to play this game.`\nconst signature = await signer.signMessage(authorizationMessage)\n","title":"3. Sign Authorization Message","titles":["Using Session keys with Sequence",null]},"468":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#4-verify-authorization-signature","html":"\n<p>Verify the signature on the server or client side using Sequence utility functions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getChainId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> isValid</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValidMessageSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  userAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  authorizationMessage,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  signature,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (isValid) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session key authorized&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session key not authorized&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nVerify the signature on the server or client side using Sequence utility functions:\nconst provider = wallet.getProvider()\nconst chainId = await wallet.getChainId()\n \nconst isValid = await wallet.utils.isValidMessageSignature(\n  userAddress,\n  authorizationMessage,\n  signature,\n  chainId\n)\n \nif (isValid) {\n  console.log(&#x27;Session key authorized&#x27;)\n} else {\n  console.log(&#x27;Session key not authorized&#x27;)\n}\n","title":"4. Verify Authorization Signature","titles":["Using Session keys with Sequence",null]},"469":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#5-sign-message-with-session-key","html":"\n<p>Use the session key to sign a message client-side without user interaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> message</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Perform action without wallet confirmation&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sessionSignature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionWallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message)</span></span></code></pre>\n","isPage":false,"text":"\nUse the session key to sign a message client-side without user interaction:\nconst message = &#x27;Perform action without wallet confirmation&#x27;\nconst sessionSignature = await sessionWallet.signMessage(message)\n","title":"5. Sign Message with Session Key","titles":["Using Session keys with Sequence",null]},"470":{"href":"/solutions/wallets/universal-wallet/03-guides/04-session-keys#6-verify-session-signature","html":"\n<p>Verify the session signature on the server or client side:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> recoveredSessionAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">verifyMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message, sessionSignature)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (recoveredSessionAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sessionAddress) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session signature valid&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Session signature invalid&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><strong>Note</strong>: You should retrieve the session key stored in local storage upon loading the application and only create a new session key if none can be found.</p>","isPage":false,"text":"\nVerify the session signature on the server or client side:\nconst recoveredSessionAddress = ethers.utils.verifyMessage(message, sessionSignature)\nif (recoveredSessionAddress === sessionAddress) {\n  console.log(&#x27;Session signature valid&#x27;)\n} else {\n  console.log(&#x27;Session signature invalid&#x27;)\n}\nNote: You should retrieve the session key stored in local storage upon loading the application and only create a new session key if none can be found.","title":"6. Verify Session Signature","titles":["Using Session keys with Sequence",null]},"471":{"href":"/solutions/wallets/universal-wallet/03-guides/05-send-transaction#sending-transactions","html":"</header>\n<p>Signing a transaction will only retrieve the signed payload.\nIf you want the wallet to actually dispatch the transaction to the network as well, that requires only a small modification to the previous example (note the change from <code>signTransactions</code> to <code>sendTransaction</code>):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipientAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSigning a transaction will only retrieve the signed payload.\nIf you want the wallet to actually dispatch the transaction to the network as well, that requires only a small modification to the previous example (note the change from signTransactions to sendTransaction):\nconst transaction = {\n  to: recipientAddress,\n  value: 1000000000000000000\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n ","title":"Sending Transactions","titles":[]},"472":{"href":"/solutions/wallets/universal-wallet/03-guides/06-send-erc20#sending-erc-20-tokens","html":"</header>\n<p>You can ask the wallet to send a single ERC-20 token transfer:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode an ERC-20 token transfer to recipient of the specified amount</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipientAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-20 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: daiContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nYou can ask the wallet to send a single ERC-20 token transfer:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode an ERC-20 token transfer to recipient of the specified amount\nconst data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipientAddress, amount]\n)\n \nconst transaction = {\n  to: daiContractAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\n \n// Encode two different ERC-20 token transfers\nconst data1 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient1Address, amount1]\n)\nconst data2 = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: daiContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: daiContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-20 Tokens","titles":[]},"473":{"href":"/solutions/wallets/universal-wallet/03-guides/07-send-erc721#sending-erc-721-nft-tokens","html":"</header>\n<p>Sending an ERC-721 NFT is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the transfer of the NFT tokenId to recipient</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipientAddress, tokenId]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-721 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient1Address, amount1]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc721ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransactionBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSending an ERC-721 NFT is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \n// Encode the transfer of the NFT tokenId to recipient\nconst address = await wallet.getAddress()\nconst data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipientAddress, tokenId]\n)\n \nconst transaction = {\n  to: erc721TokenAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\n \n// Encode two different ERC-721 token transfers\nconst data1 = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient1Address, amount1]\n)\nconst data2 = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient2Address, amount2]\n)\n \nconst transaction1 = {\n  to: erc721ContractAddress,\n  data: data1\n}\n \nconst transaction2 = {\n  to: erc721ContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-721 (NFT) Tokens","titles":[]},"474":{"href":"/solutions/wallets/universal-wallet/03-guides/08-send-erc1155#sending-erc-1155-collectible-tokens","html":"</header>\n<p>Sending an ERC-1155 collectible is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode the transfer of the collectible to recipient</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipientAddress, tokenId, amount, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155TokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>\n<p>With batching functionality, you can send multiple token transfers in a single native transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode two different ERC-1155 token transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient1Address, token1Id, amount1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient2Address, token2Id, amount2, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: erc1155ContractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send a multiple transactions as a single bundle which is executed as one transaction on chain.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txnResponse</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransactionBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txnResponse)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":true,"text":"\nSending an ERC-1155 collectible is similar to sending an ERC-20 token.\nThe only notable difference is in the contract standard itself:\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \n// Encode the transfer of the collectible to recipient\nconst address = await wallet.getAddress()\nconst data = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipientAddress, tokenId, amount, &#x27;0x&#x27;]\n)\n \nconst transaction = {\n  to: erc1155TokenAddress,\n  data\n}\n \nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransaction(transaction)\nconsole.log(txnResponse)\n \nWith batching functionality, you can send multiple token transfers in a single native transaction:\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \n// Encode two different ERC-1155 token transfers\nconst data1 = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient1Address, token1Id, amount1, &#x27;0x&#x27;]\n)\nconst data2 = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient2Address, token2Id, amount2, &#x27;0x&#x27;]\n)\n \nconst transaction1 = {\n  to: erc1155ContractAddress,\n  data: data1\n}\nconst transaction2 = {\n  to: erc1155ContractAddress,\n  data: data2\n}\n \n// Send a multiple transactions as a single bundle which is executed as one transaction on chain.\nconst signer = wallet.getSigner()\nconst txnResponse = await signer.sendTransactionBatch([transaction1, transaction2])\nconsole.log(txnResponse)\n ","title":"Sending ERC-1155 (Collectible) Tokens","titles":[]},"475":{"href":"/solutions/wallets/universal-wallet/03-guides/09-send-batch-transactions#sending-a-batch-of-transactions","html":"</header>\n<p>Likewise, bundling multiple transactions to be sent in a single native transaction is equally as easy:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient1Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transaction2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient2Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([transaction1, transaction2])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response)</span></span></code></pre>\n<p>The transactions don&#x27;t have to be the same token or even token standard either.\nYou can mix and match:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address _to, uint256 _value)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Interface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.utils.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc20Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc20Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [recipient2Address, amount2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc721Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc721Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient3Address, amount3]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> erc1155Data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> erc1155Interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;safeTransferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [address, recipient4Address, token4Id, amount4, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: recipient1Address, value: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: daiContractAddress, data: erc20Data },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: erc721ContractAddress, data: erc721Data },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  { to: erc1155ContractAddress, data: erc1155Data }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> response</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transactions)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response)</span></span></code></pre>","isPage":true,"text":"\nLikewise, bundling multiple transactions to be sent in a single native transaction is equally as easy:\nconst transaction1 = {\n  to: recipient1Address,\n  value: 1000000000000000000\n}\n \nconst transaction2 = {\n  to: recipient2Address,\n  value: 1000000000000000000\n}\n \nconst signer = wallet.getSigner()\nconst response = await signer.sendTransaction([transaction1, transaction2])\nconsole.log(response)\nThe transactions don&#x27;t have to be the same token or even token standard either.\nYou can mix and match:\nconst erc20Interface = new ethers.utils.Interface([\n  &#x27;function transfer(address _to, uint256 _value)&#x27;\n])\nconst erc721Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#x27;\n])\nconst erc1155Interface = new ethers.utils.Interface([\n  &#x27;function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)&#x27;\n])\n \nconst erc20Data = erc20Interface.encodeFunctionData(\n  &#x27;transfer&#x27;, [recipient2Address, amount2]\n)\nconst erc721Data = erc721Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient3Address, amount3]\n)\nconst erc1155Data = erc1155Interface.encodeFunctionData(\n  &#x27;safeTransferFrom&#x27;, [address, recipient4Address, token4Id, amount4, &#x27;0x&#x27;]\n)\n \nconst transactions = [\n  { to: recipient1Address, value: &#x27;1000000000000000000&#x27; },\n  { to: daiContractAddress, data: erc20Data },\n  { to: erc721ContractAddress, data: erc721Data },\n  { to: erc1155ContractAddress, data: erc1155Data }\n]\n \nconst signer = wallet.getSigner()\nconst response = await signer.sendTransaction(transactions)\nconsole.log(response)","title":"Sending a Batch of Transactions","titles":[]},"476":{"href":"/solutions/wallets/universal-wallet/03-guides/10-building-backends#building-backends-with-sequence","html":"</header>\n","isPage":true,"text":"\n","title":"Building Backends with Sequence","titles":[]},"477":{"href":"/solutions/wallets/universal-wallet/03-guides/10-building-backends#nodejs","html":"\n<p>The <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a> package which is available for browser / client use, also works perfectly on nodejs backends\nwritten in Javascript or Typescript.</p>\n","isPage":false,"text":"\nThe 0xsequence package which is available for browser / client use, also works perfectly on nodejs backends\nwritten in Javascript or Typescript.\n","title":"nodejs","titles":["Building Backends with Sequence",null]},"478":{"href":"/solutions/wallets/universal-wallet/03-guides/10-building-backends#go","html":"\n<p>A complete Sequence SDK is also available in Go: <a href=\"https://github.com/0xsequence/go-sequence\">https://github.com/0xsequence/go-sequence</a>.</p>\n<p><a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a> is the equivalent of <a href=\"https://github.com/0xsequence/sequence.js\">0xsequence</a>\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with <a href=\"https://github.com/0xsequence/go-sequence\">go-sequence</a>.</p>\n","isPage":false,"text":"\nA complete Sequence SDK is also available in Go: https://github.com/0xsequence/go-sequence.\ngo-sequence is the equivalent of 0xsequence\nbut for Go / Golang backends. In fact, all of Sequence&#x27;s infrastructure is written in Go and is built with go-sequence.\n","title":"Go","titles":["Building Backends with Sequence",null]},"479":{"href":"/solutions/wallets/universal-wallet/03-guides/10-building-backends#ethkit","html":"\n<p>As part of the Sequence open source tools, our team has also built <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a>, which\nis an Ethereum dev toolkit for Go backends. <a href=\"https://github.com/0xsequence/ethkit\">ethkit</a> supports EOA wallets,\nand you can think of it like <code>ethers.js</code> but for Go.</p>\n","isPage":false,"text":"\nAs part of the Sequence open source tools, our team has also built ethkit, which\nis an Ethereum dev toolkit for Go backends. ethkit supports EOA wallets,\nand you can think of it like ethers.js but for Go.\n","title":"ethkit","titles":["Building Backends with Sequence",null]},"480":{"href":"/solutions/wallets/universal-wallet/03-guides/10-building-backends#support-for-other-backend-languages","html":"\n<p>If your backend services are written in a language other than JS or Go, you can still easily integrate Sequence,\nas Sequence is really just a standard Ethereum client library with some extra features. In many cases, the extra\nfeatures are best utilized on the client-side / dapp.</p>\n<p>If your situation for example is a Python or Java backend where you&#x27;d like to verify signatures from a Sequence Wallet,\nwell then, you can call the standard <a href=\"https://eips.ethereum.org/EIPS/eip-1271\">EIP1271</a> function for the account address\nfrom your backend.</p>\n<p>If you&#x27;d like to use the Sequence&#x27;s Meta-Transaction capabilities, see <a href=\"/guides/templates/02-building-relaying-server\">Building Relaying Server with Sequence</a>.</p>","isPage":false,"text":"\nIf your backend services are written in a language other than JS or Go, you can still easily integrate Sequence,\nas Sequence is really just a standard Ethereum client library with some extra features. In many cases, the extra\nfeatures are best utilized on the client-side / dapp.\nIf your situation for example is a Python or Java backend where you&#x27;d like to verify signatures from a Sequence Wallet,\nwell then, you can call the standard EIP1271 function for the account address\nfrom your backend.\nIf you&#x27;d like to use the Sequence&#x27;s Meta-Transaction capabilities, see Building Relaying Server with Sequence.","title":"Support for other backend languages","titles":["Building Backends with Sequence",null]}},"dirtCount":0,"index":[["zellic",{"0":{"410":1}}],["zero",{"0":{"393":1,"394":1},"2":{"389":4,"393":1,"394":1,"395":2}}],["911",{"2":{"336":1}}],["9",{"0":{"336":1}}],["qmw5gvygwb98gsn8vjtrwu4pln6jryexnxzknwpphvwtdm",{"2":{"336":1}}],["qmdjzqexj2wnny7pnnn4kauzckjh4va5xhoxmmis919ev3",{"2":{"329":1}}],["qr",{"2":{"170":2}}],["quantstamp",{"0":{"408":1},"2":{"407":1}}],["quantities",{"2":{"319":1}}],["quantityraw",{"2":{"83":1}}],["queried",{"2":{"396":1,"397":1}}],["queries",{"2":{"274":1}}],["querycontractmessagesender",{"2":{"277":1}}],["querycontract",{"2":{"277":2}}],["queryclientprovider",{"2":{"62":3,"63":5,"79":2,"86":2}}],["queryclient",{"2":{"62":4,"63":5,"79":1,"86":1}}],["querying",{"0":{"277":1},"2":{"274":1,"277":1,"279":1}}],["query",{"0":{"5":1,"7":1,"54":1},"2":{"61":3,"62":1,"63":1,"277":3}}],["questions",{"2":{"174":1,"195":1,"461":1}}],["quicker",{"2":{"137":1}}],["quickly",{"2":{"48":1,"91":1,"343":1,"418":1,"442":1}}],["quickstart",{"0":{"46":1,"89":1,"341":1,"416":1,"440":1},"1":{"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"90":1,"91":1,"92":1,"93":1,"342":1,"343":1,"344":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"441":1,"442":1,"443":1,"444":1}}],["quot",{"2":{"35":2,"37":14,"40":40,"41":8,"43":12,"44":12,"45":2,"92":13,"93":4,"107":8,"108":14,"109":4,"111":2,"117":58,"121":8,"122":10,"128":12,"131":2,"132":2,"135":2,"136":2,"148":38,"159":2,"160":2,"161":12,"162":2,"163":6,"164":4,"165":2,"170":2,"173":2,"241":8,"242":2,"243":2,"256":4,"257":4,"260":4,"262":4,"264":4,"266":6,"275":8,"277":4,"328":12,"329":12,"332":2,"333":2,"338":4,"339":2,"361":2,"368":4,"369":10,"370":28,"376":6,"381":6,"401":4,"403":2,"407":6,"424":10,"425":6,"426":10,"427":82,"428":2,"438":66,"439":68,"443":13,"444":4,"460":2}}],["815189234z",{"2":{"427":1}}],["815189174z",{"2":{"427":1}}],["819722082z",{"2":{"427":1}}],["8545",{"2":{"381":1}}],["8",{"0":{"335":1},"2":{"117":2}}],["+=",{"2":{"119":1,"120":2,"131":1,"132":2}}],["+",{"2":{"103":1,"107":1,"109":1,"143":1,"147":1,"168":1,"199":2,"208":2,"209":3,"218":2,"219":2,"225":1,"235":1,"237":1,"274":1,"283":1,"286":2,"336":1,"371":4,"401":2,"423":2,"429":1,"457":1}}],["65535required",{"2":{"368":1}}],["6492",{"2":{"174":1,"461":1}}],["6f1",{"2":{"105":1}}],["6",{"0":{"184":1,"333":1,"470":1},"2":{"98":1,"112":1,"345":1,"452":1}}],["66597",{"2":{"83":1}}],["^5",{"2":{"92":1,"443":1}}],["^1",{"2":{"92":1,"443":1}}],["❤️",{"2":{"87":1}}],["yet",{"2":{"137":1,"281":1,"394":1,"397":1}}],["yes",{"2":{"108":1}}],["y",{"2":{"104":1}}],["yarn",{"2":{"61":1,"79":1,"92":1,"200":1,"206":1,"210":1,"217":1,"220":1,"356":1,"443":1}}],["yourself",{"2":{"290":1,"413":1,"423":1}}],["yoursite",{"2":{"148":2,"160":1}}],["your",{"0":{"87":1,"148":1,"168":1,"196":1,"284":1,"286":1,"287":1,"301":1,"304":1,"305":1,"311":1,"314":1,"315":1,"321":1,"324":1,"325":1,"328":1,"330":1,"333":1,"445":1},"1":{"197":1,"285":1,"286":1,"288":1,"289":1,"290":1,"446":1},"2":{"25":2,"26":11,"27":3,"32":3,"33":2,"34":1,"35":5,"37":7,"38":2,"40":4,"41":2,"42":1,"43":4,"44":5,"57":2,"58":3,"59":1,"60":1,"62":3,"79":1,"85":2,"86":2,"87":2,"88":1,"92":4,"96":1,"104":1,"107":3,"108":2,"109":3,"110":3,"111":2,"117":1,"119":1,"122":2,"123":1,"125":1,"127":1,"128":1,"129":1,"132":4,"133":2,"135":2,"136":3,"137":1,"138":1,"141":1,"144":1,"145":1,"146":1,"147":2,"148":8,"160":1,"170":1,"173":4,"174":5,"194":3,"195":2,"196":2,"197":3,"198":1,"242":1,"254":3,"255":1,"273":1,"279":2,"280":1,"285":2,"286":1,"289":2,"291":1,"293":3,"294":1,"295":2,"297":1,"298":1,"299":2,"302":2,"303":1,"304":2,"305":2,"309":2,"312":1,"313":1,"314":3,"317":1,"322":1,"323":2,"324":4,"327":1,"328":2,"329":2,"330":2,"331":1,"332":3,"333":2,"334":1,"335":3,"337":2,"338":1,"339":1,"340":1,"344":1,"353":1,"401":1,"402":1,"413":1,"414":1,"423":1,"424":1,"431":1,"443":4,"445":2,"446":3,"447":1,"450":1,"460":4,"461":5,"480":3}}],["you",{"0":{"299":1},"2":{"25":2,"26":5,"27":4,"33":4,"34":3,"35":3,"36":1,"37":4,"38":1,"42":2,"43":3,"44":3,"45":2,"50":1,"51":2,"52":2,"56":1,"59":1,"60":1,"61":1,"64":1,"66":1,"67":1,"84":2,"85":3,"86":2,"88":1,"92":3,"98":2,"105":1,"107":5,"108":6,"109":8,"110":4,"111":2,"114":1,"115":1,"117":4,"119":5,"120":6,"121":3,"122":3,"123":5,"124":3,"125":5,"126":3,"127":5,"128":13,"129":3,"130":1,"131":4,"132":8,"133":4,"135":1,"136":5,"137":4,"138":2,"141":8,"142":4,"143":1,"144":3,"145":2,"146":3,"147":2,"148":9,"170":1,"173":4,"174":4,"184":1,"185":1,"186":2,"187":1,"188":1,"189":1,"193":1,"194":4,"195":6,"198":1,"200":1,"206":1,"217":1,"242":2,"246":2,"247":1,"251":3,"252":3,"253":2,"254":4,"256":2,"273":1,"274":4,"275":7,"276":2,"277":3,"278":2,"279":4,"280":2,"281":2,"283":1,"285":2,"286":1,"288":2,"289":1,"291":2,"292":5,"293":4,"294":1,"295":3,"298":1,"299":1,"300":5,"301":4,"302":5,"303":4,"304":3,"305":6,"307":1,"309":1,"310":5,"311":3,"312":2,"313":2,"314":4,"315":1,"320":5,"321":3,"322":2,"323":2,"324":4,"327":1,"328":4,"331":1,"334":1,"335":4,"336":4,"337":1,"338":1,"339":5,"340":1,"345":2,"355":2,"358":2,"359":1,"411":1,"413":3,"414":2,"420":1,"421":2,"422":2,"423":3,"425":1,"426":2,"431":1,"436":1,"443":2,"447":1,"452":2,"460":4,"461":4,"470":1,"471":1,"472":2,"473":1,"474":1,"475":1,"479":1,"480":4}}],["🖼️",{"2":{"58":1,"197":1,"446":1}}],["👛",{"2":{"58":1,"197":1,"446":1}}],["🔐🪪",{"2":{"58":1,"197":1,"446":1}}],["⛓️",{"2":{"58":1,"197":1,"446":1}}],["🪙",{"2":{"58":1,"197":1,"446":1}}],["🦊",{"2":{"58":1,"197":1,"446":1}}],["🧰",{"2":{"57":1,"196":1,"445":1}}],["\tmessage",{"2":{"402":1}}],["\tdomain",{"2":{"402":1}}],["\tprimarytype",{"2":{"402":1}}],["\ttypes",{"2":{"402":1}}],["\ttry",{"2":{"45":1}}],["\t\tcount",{"2":{"402":1}}],["\t\tchainid",{"2":{"402":1}}],["\t\twallet",{"2":{"402":1}}],["\t\tverifyingcontract",{"2":{"402":1}}],["\t\tversion",{"2":{"402":1}}],["\t\tname",{"2":{"402":2}}],["\t\tnetworks",{"2":{"45":1}}],["\t\tperson",{"2":{"402":1}}],["\t\tposition",{"2":{"67":1}}],["\t\tprojectaccesskey",{"2":{"45":1}}],["\t\tdefaulttheme",{"2":{"67":1}}],["\t\tthrow",{"2":{"45":1}}],["\t\treturn",{"2":{"45":1}}],["\t\tsigner",{"2":{"45":1}}],["\t\tsettings",{"2":{"45":1}}],["\t\t",{"2":{"45":3,"67":1,"402":1}}],["\t\t\t\t",{"2":{"45":1}}],["\t\t\t\t\turl",{"2":{"45":1}}],["\t\t\t\tprovider",{"2":{"45":1}}],["\t\t\t\turl",{"2":{"45":1}}],["\t\t\trelayer",{"2":{"45":1}}],["\t\t\trpcurl",{"2":{"45":1}}],["\t\t\tprovider",{"2":{"45":1}}],["\t\t\t",{"2":{"45":2,"402":3}}],["\t",{"2":{"45":11,"67":1,"402":3}}],["\treturn",{"2":{"45":1}}],["\tconst",{"2":{"45":12}}],["7908",{"2":{"439":1}}],["712",{"0":{"402":1},"2":{"402":1}}],["721",{"0":{"187":1,"308":1,"473":1},"2":{"187":2,"307":1,"308":2,"309":2,"311":1,"319":1,"473":2}}],["7f1",{"2":{"117":2}}],["7",{"0":{"334":1},"2":{"45":1,"61":3,"92":1,"93":1,"443":1,"444":1}}],["5931",{"2":{"439":1}}],["50",{"2":{"427":3}}],["500",{"2":{"40":1}}],["5",{"0":{"183":1,"294":1,"305":1,"315":1,"325":1,"332":1,"469":1},"1":{"295":1},"2":{"45":1,"61":3,"93":1,"120":1,"205":1,"215":1,"305":1,"315":1,"370":2,"371":3,"444":1}}],["09t18",{"2":{"427":2}}],["03",{"2":{"427":3}}],["02t18",{"2":{"427":4}}],["02170000000014",{"2":{"358":1}}],["0247",{"2":{"355":1}}],["0a1",{"2":{"117":1}}],["0b3",{"2":{"117":1}}],["0",{"0":{"206":1,"217":1},"2":{"43":1,"44":1,"92":3,"104":3,"107":1,"117":2,"128":2,"136":1,"200":2,"206":3,"217":3,"303":1,"355":1,"358":1,"381":1,"394":1,"397":1,"403":1,"414":1,"428":1,"438":2,"439":1,"443":3}}],["0x839ee023b21f4ffe2294025de0ac30ba7278d6fd",{"2":{"439":2}}],["0x8a5bc19e22d6ad55a2c763b93a75d09f321fe764",{"2":{"359":1}}],["0xacc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0",{"2":{"438":1}}],["0x153824576d03629b264683b430bbf9acea1d0975",{"2":{"439":1}}],["0x1f180c27086c7a39ea2a7b25239d1ab92348f07ca7bb59d1438fcf527568f881",{"2":{"438":1}}],["0x1626ba7e",{"2":{"403":2}}],["0x4d4ee1b8583e31fe789eaf2e1b6e011c220c10b6",{"2":{"438":2,"439":1}}],["0x4fbf69aa2a75f9942a768dc8da7804ec965f7bea",{"2":{"370":1,"371":2}}],["0x27cabc9700ee6db2797b6ac1e1ece81c72a2cd8d",{"2":{"434":1}}],["0x2791bca1f2de4661ed88a30c99a7a9449aa84174",{"2":{"26":1,"82":1}}],["0x3c4e11e4dbf23b87c14bd75d0da9c75707392d21",{"2":{"427":2}}],["0x5c4eeb02dabf8976016ab414d617f9a162936dcace3cdef8c69ef6e262ad5ae7",{"2":{"438":1}}],["0x574372ff1a0eede68b5358cce7bbb93155a9dfe0",{"2":{"427":2}}],["0x596af90cecdbf9a768886e771178fd5561dd27ab",{"2":{"370":1,"371":2,"381":1}}],["0xe6b9b21c077f382333220a072e4c44280b873907",{"2":{"406":1}}],["0xec9a7204a43d3f4a82c84fde92d25bfc9110981e",{"2":{"370":1,"371":1}}],["0xd72c236be524ec24f72329317e2785e687105b69",{"2":{"438":1}}],["0xd6043fe6f06d90ec2cb36ca5cd1b193a8515f350",{"2":{"424":1}}],["0xd130b43062d875a4b7af3f8fc036bc6e9d3e1b3e",{"2":{"406":1}}],["0xd01f11855bccb95f88d7a48492f66410d4637313",{"2":{"376":1,"406":1}}],["0x7efe6ce415956c5f80c6530cc6cc81b4808f6118",{"2":{"406":1}}],["0x061150e5574716dbb1a2cdf54b3dce9f94395f65",{"2":{"436":1}}],["0x02390f3e6e5fd1c6786cb78fd3027c117a9955a7",{"2":{"406":1}}],["0x0",{"2":{"403":1}}],["0x0000000000000000000000000000000000000000000000000000000000000000",{"2":{"438":1}}],["0x0000000000000000000000001119e72b4af230becebd933d0e07f0eec51d8c2a0000000000000000000000000000000000000000000000000000000000000001",{"2":{"438":1}}],["0x00",{"2":{"45":1,"337":1,"439":1}}],["0xcccccccccccccccccccccccccccccccccccccccc",{"2":{"402":1}}],["0xce0042b868300000d44a59004da54a005ffdcf9f",{"2":{"355":1}}],["0xf2e9f728abd65089f25efda5852e605ced377f4e2c89dbf143b124623ed09b2c",{"2":{"438":1}}],["0xff",{"2":{"376":1}}],["0xf9d09d634fb818b05149329c1dccfaea53639d96",{"2":{"376":1,"406":1}}],["0xf9010880852416b84e01830222e08080b8b66080604052348015600f57600080fd5b50609980601d6000396000f3fe60a06020601f369081018290049091028201604052608081815260009260609284918190838280828437600092018290525084519495509392505060208401905034f5604080516001600160a01b0383168152905191935081900360200190a0505000fea26469706673582212205a310755225e3c740b2f013fb6343f4c205e7141fcdf15947f5f0e0e818727fb64736f6c634300060a00331ca01820182018201820182018201820182018201820182018201820182018201820a01820182018201820182018201820182018201820182018201820182018201820",{"2":{"358":1}}],["0xf9016c8085174876e8008303c4d88080b90154608060405234801561001057600080fd5b50610134806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80634af63f0214602d575b600080fd5b60cf60048036036040811015604157600080fd5b810190602081018135640100000000811115605b57600080fd5b820183602082011115606c57600080fd5b80359060200191846001830284011164010000000083111715608d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925060eb915050565b604080516001600160a01b039092168252519081900360200190f35b6000818351602085016000f5939250505056fea26469706673582212206b44f8a82cb6b156bfcc3dc6aadd6df4eefd204bc928a4397fd15dacf6d5320564736f6c634300060200331b83247000822470",{"2":{"355":1}}],["0x6b175474e89094c44da98b954eedeac495271d0f",{"2":{"434":1}}],["0x63a21cca14ed7454b9cf6466af422b5c597c6b57",{"2":{"424":1}}],["0x631998e91476da5b870d741192fc5cbc55f5a52e",{"2":{"83":1}}],["0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3",{"2":{"376":1}}],["0x608060405234801561001057600080fd5b5061013d806100206000396000f3fe60806040526004361061001e5760003560e01c80639c4ae2d014610023575b600080fd5b6100cb6004803603604081101561003957600080fd5b81019060208101813564010000000081111561005457600080fd5b82018360208201111561006657600080fd5b8035906020019184600183028401116401000000008311171561008857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506100cd915050565b005b60008183516020850134f56040805173ffffffffffffffffffffffffffffffffffffffff83168152905191925081900360200190a050505056fea264697066735822122033609f614f03931b92d88c309d698449bb77efcd517328d341fa4f923c5d8c7964736f6c63430007060033",{"2":{"359":1}}],["0x6192e0fdcd868b3de01c7fbc0ad98baebd7330c1",{"2":{"370":1,"371":2}}],["0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",{"2":{"402":1}}],["0xbb6e024b9cffacb947a71991e386681b1cd1477d",{"2":{"355":1}}],["0xb392c99d9f8e3e0b248e5c283818be5bf5cecca7",{"2":{"339":1}}],["0x9c5a87452d4fac0cbd53bdca580b20a45526b3ab",{"2":{"358":2}}],["0x9766bf76b2e3e7bcb8c61410a3fc873f1e89b43f",{"2":{"121":2}}],["0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",{"2":{"37":1}}],["0x",{"2":{"40":1,"44":1,"188":3,"189":1,"303":1,"435":1,"439":1,"474":3,"475":1}}],["0xsequence",{"0":{"148":1},"2":{"26":2,"32":1,"37":1,"40":5,"45":2,"50":1,"52":1,"55":2,"61":10,"62":2,"63":4,"64":1,"65":1,"79":4,"80":1,"84":1,"86":1,"92":8,"93":3,"107":1,"147":1,"148":3,"173":1,"174":4,"179":1,"191":1,"192":2,"199":1,"200":5,"201":1,"206":4,"209":1,"210":5,"211":1,"217":4,"219":1,"220":2,"227":2,"229":1,"235":1,"237":1,"241":1,"357":1,"360":1,"401":1,"402":2,"420":1,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1,"443":7,"444":3,"460":1,"461":4,"465":1,"477":1,"478":2}}],["||",{"2":{"40":4}}],["x19ethereum",{"2":{"401":1}}],["xmlns",{"2":{"117":4}}],["xml",{"2":{"117":6}}],["x",{"0":{"206":1,"217":1},"2":{"43":1,"44":1,"104":1,"206":1,"208":1,"217":1,"339":1,"414":2}}],["xyz",{"2":{"40":1,"41":1,"130":1}}],["x27",{"2":{"26":26,"32":8,"33":5,"34":1,"35":2,"38":1,"40":2,"42":1,"43":2,"44":2,"45":8,"51":1,"52":6,"55":1,"59":1,"62":18,"63":22,"64":5,"65":2,"67":5,"69":4,"75":9,"76":9,"79":2,"80":2,"82":6,"83":6,"85":6,"86":17,"101":1,"104":2,"105":1,"107":1,"108":2,"109":2,"110":1,"114":1,"115":1,"117":8,"119":6,"120":1,"122":1,"123":4,"124":1,"125":4,"127":4,"128":7,"131":1,"132":3,"133":1,"135":1,"136":3,"137":1,"138":1,"143":1,"147":3,"148":5,"150":2,"152":1,"155":1,"170":2,"172":1,"173":5,"174":16,"177":2,"179":4,"180":2,"181":1,"182":4,"183":2,"184":4,"186":10,"187":10,"188":16,"189":17,"192":1,"194":3,"195":2,"198":1,"201":6,"211":10,"221":4,"224":1,"229":4,"230":4,"240":4,"241":3,"242":1,"254":1,"256":1,"275":6,"277":3,"279":1,"281":1,"291":1,"293":1,"297":1,"299":2,"302":2,"309":1,"318":1,"328":1,"330":3,"337":1,"338":1,"350":2,"353":1,"355":2,"358":2,"364":1,"366":2,"372":1,"375":1,"376":14,"377":1,"379":1,"381":4,"382":2,"383":1,"388":1,"389":5,"390":1,"393":1,"394":2,"395":2,"396":1,"397":1,"401":2,"402":28,"403":1,"406":12,"413":3,"414":3,"415":2,"421":1,"422":6,"423":1,"424":5,"425":5,"426":24,"427":4,"428":4,"431":2,"433":3,"434":6,"435":6,"436":6,"438":8,"439":8,"447":1,"455":1,"459":1,"460":5,"461":16,"463":2,"465":4,"466":2,"467":1,"468":4,"469":2,"470":4,"472":10,"473":10,"474":16,"475":17,"478":1,"480":3}}],["july",{"2":{"408":1}}],["just",{"2":{"27":1,"44":1,"58":1,"108":1,"119":1,"128":2,"147":3,"173":1,"194":1,"197":1,"297":1,"305":1,"319":1,"338":1,"446":1,"460":1,"480":1}}],["joined",{"2":{"401":1,"402":1}}],["java",{"2":{"194":1,"480":1}}],["javascript",{"2":{"37":1,"174":1,"191":1,"461":1,"477":1}}],["jwt",{"2":{"112":1}}],["js",{"0":{"93":1,"168":2,"239":1,"240":1,"241":1,"444":1},"2":{"56":1,"92":1,"93":3,"147":2,"193":1,"194":1,"195":1,"239":2,"241":1,"357":1,"360":1,"443":1,"444":3,"479":1,"480":1}}],["jsonrpcprovider",{"2":{"37":1,"45":2,"174":1,"381":1,"461":1}}],["json",{"2":{"35":1,"40":5,"43":1,"44":1,"92":2,"109":2,"328":3,"329":2,"330":1,"331":1,"335":1,"336":3,"337":1,"443":2}}],["killed",{"2":{"299":1}}],["kind",{"2":{"295":1,"414":1}}],["kinds",{"2":{"195":1}}],["kitcheckoutprovider",{"2":{"79":4}}],["kitconfig",{"2":{"63":1,"67":2,"86":2}}],["kitwalletprovider",{"2":{"63":7}}],["kitprovider",{"2":{"62":4,"63":6,"67":3,"79":2,"86":2}}],["kit",{"0":{"60":1,"61":1,"62":1,"84":1,"196":1,"445":1},"1":{"61":1,"85":1,"197":1,"446":1},"2":{"57":1,"58":1,"59":2,"60":1,"61":8,"62":3,"63":4,"64":1,"65":1,"66":1,"67":2,"69":1,"79":6,"80":1,"84":3,"85":2,"86":3,"87":1,"195":1,"196":1,"197":1,"198":2,"445":1,"446":1,"447":2}}],["keep",{"2":{"157":1}}],["keepwalletopened",{"0":{"157":1},"2":{"157":2}}],["keccak256",{"2":{"37":2,"376":2,"403":2}}],["keyboard",{"2":{"107":1}}],["keys",{"0":{"101":1,"177":1,"178":1,"455":1,"463":1,"464":1},"1":{"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1},"2":{"51":1,"88":3,"99":3,"100":6,"101":1,"103":3,"110":2,"117":1,"147":1,"176":2,"177":3,"351":1,"415":1,"421":1,"453":3,"454":6,"455":1,"457":3,"462":2,"463":3}}],["keypair",{"2":{"37":1}}],["keyword",{"2":{"35":1,"128":1}}],["key",{"0":{"58":1,"99":1,"102":1,"103":1,"180":1,"183":1,"197":1,"446":1,"453":1,"456":1,"457":1,"466":1,"469":1},"1":{"100":1,"101":1,"102":1,"103":1,"454":1,"455":1,"456":1,"457":1},"2":{"26":2,"32":1,"37":3,"40":5,"41":2,"45":2,"51":2,"52":2,"62":1,"63":1,"86":1,"88":1,"99":3,"100":9,"101":1,"102":6,"103":6,"110":1,"148":1,"174":1,"177":2,"180":1,"181":1,"182":2,"183":1,"184":2,"245":2,"254":1,"319":1,"347":1,"351":1,"414":1,"421":2,"422":2,"424":2,"425":3,"426":2,"427":2,"428":2,"438":2,"439":2,"453":3,"454":9,"455":1,"456":6,"457":6,"461":1,"463":2,"466":1,"467":1,"468":2,"469":1,"470":2}}],["known",{"2":{"128":1,"275":2,"277":2,"307":1,"308":1,"366":1,"376":1,"396":1,"397":1,"407":1}}],["know",{"2":{"37":1,"92":1,"443":1}}],["knowledge",{"2":{"34":1}}],["42",{"2":{"427":4}}],["42161",{"2":{"26":1,"32":1,"434":1,"438":1}}],["4k",{"2":{"305":1}}],["401",{"2":{"40":2}}],["400",{"2":{"40":6}}],["4",{"0":{"45":1,"182":1,"291":1,"304":1,"314":1,"324":1,"331":1,"468":1},"1":{"292":1,"293":1},"2":{"34":1,"35":1,"370":1,"402":1}}],["~0",{"2":{"33":1}}],["rules",{"2":{"318":1}}],["runtime",{"2":{"377":1}}],["running",{"2":{"149":1,"241":1}}],["runs",{"2":{"148":2}}],["run",{"2":{"35":1,"105":1,"147":1,"356":1}}],["rpc",{"2":{"254":2,"411":1}}],["rpcurl",{"2":{"45":2,"174":3,"461":3}}],["ripped",{"2":{"108":1}}],["risks",{"2":{"103":1,"457":1}}],["right",{"2":{"70":3,"104":1,"136":1,"288":1,"292":1}}],["range",{"2":{"260":1}}],["randomly",{"2":{"35":1,"36":1}}],["randomnoncespace2",{"2":{"33":2}}],["randomnoncespace1",{"2":{"33":2}}],["randombytes",{"2":{"33":2,"180":1,"466":1}}],["random",{"2":{"33":1,"245":1,"388":1}}],["rainbow",{"2":{"209":1,"211":1,"349":1}}],["rainbowkit",{"0":{"209":1},"1":{"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1},"2":{"195":1,"203":1,"209":3,"210":3,"211":3,"213":1,"216":1,"218":1}}],["ration",{"2":{"160":1}}],["ratio",{"2":{"148":2}}],["rather",{"2":{"120":1,"274":1}}],["raw",{"2":{"121":2}}],["rawtransactions",{"2":{"123":1,"125":1,"127":1}}],["rawtransaction",{"0":{"121":1},"2":{"121":1,"123":2,"125":2,"127":2,"129":2}}],["ramp",{"2":{"98":5,"148":2,"164":1,"345":5,"452":5}}],["ramps",{"0":{"98":1,"345":1,"452":1}}],["rotation",{"2":{"351":1}}],["root",{"2":{"110":1,"426":1}}],["router=",{"2":{"426":1}}],["routerprovider",{"2":{"426":2}}],["router",{"2":{"207":6,"208":2,"216":6,"218":2,"426":7}}],["route",{"2":{"109":1,"274":1}}],["robust",{"2":{"57":1,"196":1,"445":1}}],["roles",{"2":{"295":1}}],["role",{"2":{"37":6}}],["rejected",{"2":{"380":1,"388":1}}],["revertreason",{"2":{"438":2}}],["revert",{"2":{"391":1}}],["revertonerror",{"0":{"391":1},"2":{"389":2,"391":1,"394":1,"395":1}}],["reverted",{"2":{"26":1,"438":1}}],["reveal",{"2":{"312":1,"322":1}}],["rewrite",{"2":{"279":2}}],["render",{"2":{"239":1,"391":1,"426":1}}],["rendering",{"2":{"207":1,"216":1,"239":1,"240":2}}],["rendered",{"2":{"159":1,"239":1,"240":1,"241":4,"388":1,"394":1}}],["retrieving",{"0":{"396":1,"397":1},"1":{"397":1}}],["retrieve",{"2":{"148":1,"184":1,"185":1,"470":1,"471":1}}],["returned",{"2":{"113":1,"158":1,"173":1,"401":1,"402":1,"439":1,"460":1}}],["returns",{"2":{"34":2,"123":1,"125":1,"127":1,"248":1,"363":1,"383":1,"397":1,"403":1,"427":1,"432":1,"433":4,"434":2}}],["return",{"0":{"365":1,"385":1},"2":{"26":2,"32":1,"40":17,"43":1,"44":1,"45":2,"62":1,"63":2,"64":1,"65":1,"79":1,"80":1,"85":2,"86":1,"121":1,"154":1,"240":2,"241":2,"267":1,"272":1,"277":1,"295":1,"396":1,"403":5,"426":3,"436":1,"437":1,"438":1}}],["returning",{"2":{"26":2,"436":1}}],["refunded",{"2":{"355":1,"358":1}}],["reflect",{"2":{"170":1}}],["refreshedat",{"2":{"427":2}}],["refreshes",{"2":{"136":1}}],["refresh",{"0":{"156":1},"2":{"156":2,"339":3}}],["referencing",{"2":{"380":1,"388":1,"393":1}}],["references",{"2":{"407":1}}],["reference",{"2":{"111":1,"123":1,"125":1,"127":1}}],["referred",{"2":{"126":1}}],["refer",{"2":{"50":1,"62":1,"85":1,"92":1,"360":1,"420":1}}],["reducing",{"2":{"308":1}}],["reduce",{"2":{"177":1,"372":1,"463":1}}],["redirect",{"2":{"151":1}}],["reddit",{"2":{"119":1,"120":1,"131":1,"132":1}}],["redeploy",{"2":{"43":1,"45":1}}],["register",{"2":{"113":2}}],["region",{"2":{"98":1,"345":1,"452":1}}],["remember",{"2":{"424":1}}],["removing",{"2":{"128":1}}],["removed",{"2":{"103":1,"457":1}}],["remove",{"2":{"103":1,"457":1}}],["remoteconfigtracker",{"2":{"174":1,"461":1}}],["remotely",{"2":{"147":1}}],["remote",{"0":{"10":1,"16":1},"2":{"174":1,"401":1,"402":1,"461":1}}],["remaining",{"2":{"100":1,"454":1}}],["relevant",{"2":{"438":1}}],["release",{"2":{"109":1}}],["reload",{"2":{"339":1}}],["rely",{"2":{"86":1}}],["relayed",{"2":{"32":1}}],["relayerurl",{"2":{"45":2}}],["relayer",{"0":{"34":1},"1":{"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1},"2":{"26":2,"33":1,"34":2,"37":4,"45":1}}],["relaying",{"0":{"25":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1},"2":{"27":1,"194":1,"480":1}}],["reasons",{"2":{"388":1}}],["reason",{"2":{"366":1,"394":1,"438":1,"439":1}}],["real",{"2":{"411":1}}],["really",{"2":{"194":1,"256":1,"480":1}}],["realm",{"2":{"57":1,"129":1,"196":1,"445":1}}],["reached",{"2":{"401":1,"402":1}}],["reach",{"2":{"137":1,"174":1,"195":1,"461":1}}],["reactdom",{"2":{"426":1}}],["react",{"0":{"66":1,"226":1},"1":{"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1},"2":{"61":3,"62":1,"63":1,"65":1,"195":1,"226":3,"227":1,"229":2,"230":1,"234":1,"426":8}}],["reader",{"2":{"174":1,"461":1}}],["reading",{"0":{"381":1},"2":{"130":1}}],["readable",{"2":{"122":1,"128":1}}],["ready",{"2":{"59":1,"198":1,"334":1,"339":1,"447":1}}],["read",{"0":{"130":1},"2":{"33":1,"109":2,"122":2,"142":2,"148":1,"277":1,"293":1,"304":1,"314":1,"324":1,"339":1,"381":1}}],["represents",{"2":{"394":1}}],["represent",{"2":{"318":1,"319":1}}],["represented",{"2":{"121":2}}],["reports",{"2":{"407":1}}],["repo",{"2":{"168":1}}],["repository",{"2":{"35":1,"66":1,"353":1,"356":2,"357":1,"360":1,"426":1}}],["replay",{"2":{"155":1,"426":1}}],["replaced",{"2":{"133":1}}],["replace",{"0":{"175":1},"2":{"43":1,"44":1,"100":1,"103":1,"108":1,"110":1,"117":1,"133":1,"454":1,"457":1}}],["requiring",{"2":{"148":1,"176":1,"177":1,"279":1,"303":1,"436":1,"462":1,"463":1}}],["requirefreshsigner",{"2":{"406":1}}],["requirements",{"0":{"105":1},"2":{"113":1}}],["require",{"2":{"102":1,"174":1,"177":1,"239":1,"241":1,"279":1,"393":1,"424":1,"430":1,"431":1,"456":1,"461":1,"463":1}}],["requires",{"2":{"92":1,"133":1,"185":1,"254":1,"355":1,"434":1,"443":1,"471":1}}],["required",{"2":{"42":1,"104":1,"116":1,"147":1,"263":1,"274":1,"354":2,"355":1,"357":2,"358":1,"366":1,"412":1,"414":1,"434":1}}],["request",{"2":{"40":20,"43":1,"45":6,"87":1,"129":1,"170":1,"293":1,"438":1,"439":1}}],["requests",{"2":{"37":1,"170":1,"254":1}}],["rest",{"2":{"240":1,"241":1,"246":1,"382":1,"413":1}}],["restofonboardparams",{"2":{"221":1}}],["restwallets",{"2":{"221":1}}],["restarted",{"2":{"117":1}}],["respect",{"2":{"403":1}}],["respectively",{"2":{"436":1}}],["respective",{"2":{"142":1,"195":1}}],["responsibility",{"2":{"388":1}}],["responsive",{"2":{"254":1}}],["response",{"0":{"438":1,"439":1},"2":{"40":19,"189":4,"274":1,"438":2,"439":2,"475":4}}],["resource",{"2":{"108":1}}],["resources",{"2":{"107":1,"110":6}}],["res",{"2":{"40":4,"117":2,"424":2}}],["resulting",{"2":{"401":1,"402":1,"403":1}}],["results",{"2":{"136":1}}],["result",{"2":{"34":1,"36":1,"37":1,"120":2,"121":1,"132":3,"277":1,"353":1,"365":2,"366":1,"379":1,"433":2,"439":1}}],["recent",{"2":{"207":1,"216":1,"259":1}}],["receipts",{"0":{"437":1},"1":{"438":1,"439":1},"2":{"252":1,"437":2,"438":1}}],["receipt",{"2":{"129":1,"250":1,"252":1,"272":1,"273":1,"275":5,"278":1,"279":2,"438":5,"439":1}}],["receives",{"2":{"433":1}}],["received",{"2":{"119":1}}],["receive",{"2":{"37":1,"112":1,"129":1,"132":1,"251":2,"252":2,"274":1,"276":1,"353":1}}],["recovery",{"2":{"351":1,"415":1}}],["recoveredsessionaddress",{"2":{"184":2,"470":2}}],["recognition",{"2":{"308":1}}],["recognized",{"2":{"309":1}}],["recognize",{"2":{"109":1,"132":1}}],["recommend",{"2":{"111":2,"128":1,"130":1,"132":1}}],["recommended",{"0":{"107":1},"1":{"108":1},"2":{"120":1,"122":1,"123":1,"125":1,"127":1,"128":1,"131":1,"132":1,"211":1,"240":1,"241":1,"253":1,"256":1,"266":1,"273":1,"274":1,"279":1}}],["recommendations",{"2":{"103":1,"457":1}}],["recipient4address",{"2":{"189":1,"475":1}}],["recipient3address",{"2":{"189":1,"475":1}}],["recipient2address",{"2":{"186":1,"187":1,"188":1,"189":2,"472":1,"473":1,"474":1,"475":2}}],["recipient2",{"2":{"33":1}}],["recipient1address",{"2":{"186":1,"187":1,"188":1,"189":2,"472":1,"473":1,"474":1,"475":2}}],["recipient1",{"2":{"33":1}}],["recipient",{"2":{"26":1,"186":1,"187":1,"188":1,"434":1,"472":1,"473":1,"474":1}}],["recipientaddress",{"2":{"26":1,"32":1,"185":1,"186":1,"187":1,"188":1,"273":1,"471":1,"472":1,"473":1,"474":1}}],["re",{"2":{"25":1,"34":1,"59":1,"104":1,"119":2,"120":1,"122":1,"128":3,"131":1,"132":1,"147":1,"156":1,"198":1,"297":1,"302":1,"317":1,"447":1}}],["3rd",{"2":{"414":1}}],["32",{"2":{"180":1,"376":1,"427":3,"466":1}}],["36000",{"2":{"153":1}}],["30",{"2":{"34":1}}],["3",{"0":{"32":1,"40":1,"142":1,"181":1,"287":1,"303":1,"313":1,"323":1,"330":1,"360":1,"467":1},"1":{"41":1,"42":1,"43":1,"44":1,"288":1,"289":1,"290":1},"2":{"100":1,"105":1,"117":2,"148":2,"160":1,"285":1,"370":1,"371":2,"427":1,"454":1}}],["2123",{"2":{"427":2}}],["22",{"2":{"427":3}}],["230",{"2":{"426":1}}],["24th",{"2":{"408":1}}],["2470",{"2":{"355":1}}],["2nd",{"2":{"408":1}}],["255",{"2":{"369":1}}],["2fa",{"2":{"112":2}}],["2",{"0":{"31":1,"37":1,"113":1,"141":1,"145":1,"180":1,"246":1,"284":1,"302":1,"312":1,"322":1,"329":1,"356":1,"359":1,"414":1,"466":1},"1":{"38":1,"39":1,"114":1,"115":1,"116":1,"117":1,"118":1,"285":1,"286":1},"2":{"37":1,"45":1,"61":3,"107":1,"117":2,"244":1,"328":1,"370":2,"371":4,"412":2,"414":2}}],["2020",{"2":{"408":1,"409":1}}],["2023",{"2":{"117":4,"410":1,"427":4}}],["2022",{"2":{"117":3}}],["2021",{"2":{"105":1,"117":1,"408":1}}],["200000000000000000000",{"2":{"434":1}}],["200",{"2":{"40":1,"166":1,"434":1}}],["20",{"0":{"186":1,"318":1,"472":1},"2":{"26":1,"33":2,"34":1,"186":3,"187":1,"188":1,"317":1,"318":2,"319":1,"321":1,"472":3,"473":1,"474":1}}],["vulnerate",{"2":{"415":1}}],["vs",{"0":{"308":1,"319":1}}],["v6",{"0":{"226":1},"1":{"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1},"2":{"226":2,"227":1,"229":1,"234":1}}],["vocs",{"0":{"175":1}}],["void",{"2":{"119":1,"120":3,"131":2,"132":3}}],["v3",{"2":{"174":1,"461":1}}],["ve",{"2":{"108":1,"114":1,"115":1,"119":2,"123":1,"124":1,"125":1,"127":1,"128":1,"136":1,"147":2,"195":1,"242":1,"254":1,"279":1,"293":1,"335":1,"338":1}}],["very",{"2":{"110":1,"121":1,"132":1,"147":1}}],["verifies",{"2":{"403":1}}],["verified",{"2":{"120":1,"152":1,"403":1,"415":1}}],["verifiable",{"2":{"177":1,"463":1}}],["verification",{"0":{"403":1},"2":{"40":1,"400":1,"430":1,"431":1}}],["verifying",{"2":{"414":1}}],["verifymessage",{"2":{"184":1,"470":1}}],["verify",{"0":{"182":1,"184":1,"468":1,"470":1},"2":{"40":5,"173":2,"174":1,"182":1,"184":1,"194":1,"413":1,"460":2,"461":1,"468":1,"470":1,"480":1}}],["versatility",{"2":{"308":1}}],["version=",{"2":{"117":2}}],["versioning",{"2":{"104":1}}],["versions",{"0":{"206":1,"217":1,"240":1},"2":{"26":1,"117":3,"208":1,"226":1,"239":1}}],["version",{"0":{"241":1},"2":{"26":2,"92":1,"104":3,"108":1,"109":1,"136":1,"200":2,"206":2,"208":2,"217":2,"239":1,"443":1}}],["versus",{"2":{"26":1}}],["vision",{"2":{"425":1}}],["visible",{"2":{"98":1,"345":1,"452":1}}],["virtual",{"2":{"350":1,"353":1,"403":1}}],["video",{"2":{"195":1}}],["viem",{"2":{"61":4,"206":1,"217":1}}],["viewing",{"2":{"145":1}}],["viewable",{"2":{"120":1}}],["viewer",{"0":{"44":1},"2":{"44":1}}],["view",{"2":{"36":1,"77":3,"117":2,"286":1,"302":1,"312":1,"322":1,"334":1,"383":1,"403":1,"438":1,"439":1}}],["via",{"0":{"170":1},"2":{"58":1,"84":1,"93":1,"98":3,"100":1,"109":3,"110":1,"113":2,"132":2,"136":1,"147":4,"170":3,"197":1,"200":1,"210":1,"227":1,"249":1,"250":1,"251":1,"252":1,"279":1,"345":3,"414":1,"431":1,"444":1,"446":1,"452":3,"454":1}}],["valueasstring",{"2":{"128":2,"129":1}}],["value=",{"2":{"117":2}}],["values",{"0":{"365":1,"385":1},"2":{"69":1,"70":1,"75":1,"76":1,"110":1,"121":1,"128":1,"136":1,"256":1,"257":1,"260":1,"262":1,"264":1,"266":1,"366":1,"376":1}}],["value",{"0":{"393":1},"2":{"44":1,"121":4,"122":1,"152":1,"185":1,"186":2,"188":2,"189":5,"233":1,"276":1,"318":1,"364":1,"381":1,"389":2,"393":1,"395":1,"403":3,"434":1,"435":1,"436":1,"438":1,"439":2,"471":1,"472":2,"474":2,"475":5}}],["validity",{"2":{"389":1}}],["valid`",{"2":{"174":1,"461":1}}],["validating",{"2":{"174":1,"461":1}}],["validations",{"0":{"435":1}}],["validation",{"0":{"382":1,"429":1,"432":1,"433":1,"436":1},"1":{"383":1,"384":1,"385":1,"430":1,"431":1,"432":1,"433":2,"434":3,"435":2,"436":1},"2":{"40":1,"382":1,"424":1,"431":1,"432":2,"433":1,"434":5,"435":3,"436":4}}],["validatesession",{"2":{"433":2}}],["validatesequencewalletproof",{"2":{"174":2,"461":2}}],["validates",{"2":{"383":1}}],["validated",{"2":{"372":2,"384":1,"388":1,"433":1}}],["validate",{"2":{"174":1,"376":1,"382":1,"383":1,"403":2,"430":1,"433":1,"461":1}}],["validator",{"2":{"174":3,"461":3}}],["valid",{"0":{"371":1},"2":{"40":2,"148":1,"184":1,"337":1,"364":1,"365":2,"368":1,"388":1,"394":1,"403":4,"427":1,"433":1,"470":1}}],["vary",{"2":{"92":1,"443":1}}],["varies",{"2":{"381":1}}],["variety",{"2":{"312":1,"322":1}}],["variable",{"2":{"128":1}}],["variables",{"0":{"41":1},"2":{"40":1,"41":1,"128":1,"356":1}}],["variation",{"2":{"123":1,"125":1,"127":1}}],["various",{"2":{"61":1,"70":1,"208":1,"308":1,"309":1}}],["vars",{"2":{"41":2}}],["v2",{"0":{"354":1},"1":{"355":1,"356":1},"2":{"26":2,"174":2,"236":1,"461":2}}],["v1",{"0":{"357":1,"374":1},"1":{"358":1,"359":1,"360":1},"2":{"26":1,"357":1}}],["`failedtransactionresponse`",{"2":{"439":1}}],["`wallet",{"2":{"426":1}}],["`walletproxybytecode`",{"2":{"376":1}}],["`mainmodule`",{"2":{"376":1}}],["`authorize",{"2":{"181":1,"467":1}}],["`invalid",{"2":{"174":1,"461":1}}],["`proof",{"2":{"174":1,"461":1}}],["`senttransactionresponse`",{"2":{"439":1}}],["`sequenceconfig`",{"2":{"117":2}}],["`something",{"2":{"40":2}}],["`https",{"2":{"45":3}}],["`block",{"2":{"40":1}}],["`unauthorized",{"2":{"40":1}}],["`unauthorized`",{"2":{"40":1}}],["`unexpected",{"2":{"26":2,"32":1}}],["`$",{"2":{"40":1,"52":2,"422":2,"424":2,"425":2,"426":2,"427":2,"428":2,"438":2,"439":2}}],["`your",{"2":{"37":1}}],["`",{"2":{"26":2,"32":1,"37":1,"40":5,"45":2,"52":2,"174":1,"181":1,"422":2,"424":2,"425":2,"426":3,"427":2,"428":2,"438":2,"439":2,"461":1,"467":1}}],["$",{"2":{"26":2,"32":1,"37":1,"40":4,"45":2,"174":2,"426":1,"461":2}}],["uri",{"0":{"336":1}}],["url",{"0":{"331":1},"2":{"36":2,"44":1,"45":2,"72":1,"105":1,"107":2,"110":1,"113":2,"114":2,"115":2,"117":3,"160":1,"254":2,"331":1,"335":1,"336":2}}],["ubiquitous",{"2":{"279":1}}],["utf",{"2":{"117":2}}],["utility",{"2":{"86":1,"182":1,"468":1}}],["utilized",{"2":{"194":1,"480":1}}],["utilize",{"2":{"62":1,"64":1}}],["utils",{"2":{"26":1,"32":1,"33":4,"37":2,"45":1,"180":2,"182":1,"184":1,"186":2,"187":2,"188":2,"189":3,"376":7,"381":2,"402":1,"466":2,"468":1,"470":1,"472":2,"473":2,"474":2,"475":3}}],["uint80",{"2":{"369":1}}],["uint8",{"2":{"276":1,"402":1}}],["uint",{"2":{"276":1}}],["uint256",{"2":{"26":1,"32":1,"45":2,"128":1,"186":2,"187":2,"188":4,"189":4,"274":1,"303":2,"337":2,"472":2,"473":2,"474":4,"475":4}}],["ui",{"0":{"133":1,"135":1},"1":{"134":1,"135":1,"136":2,"137":2},"2":{"109":1,"111":2,"133":6,"134":1,"135":2,"136":1,"137":1}}],["umd",{"2":{"93":3,"444":3}}],["upgradeability",{"2":{"351":1}}],["upgraded",{"2":{"350":1}}],["uploaded",{"2":{"331":1,"337":1}}],["upload",{"0":{"330":1},"2":{"286":1,"329":1,"330":2}}],["upon",{"2":{"184":1,"204":1,"224":1,"470":1}}],["upi",{"2":{"98":1,"345":1,"452":1}}],["up",{"0":{"62":1,"63":1,"139":1,"329":1,"332":1,"424":1,"425":1},"1":{"140":1,"141":1,"142":1,"425":1,"426":1},"2":{"105":1,"113":1,"117":1,"138":2,"144":1,"224":1,"281":1,"286":1,"292":1,"293":1,"300":1,"302":1,"304":1,"310":1,"312":1,"314":1,"320":1,"322":1,"324":1,"332":1,"337":1,"424":1,"426":1}}],["updating",{"0":{"339":1},"2":{"41":1,"108":1,"109":1,"378":1,"382":1,"394":1}}],["updateimagehash",{"0":{"387":1},"1":{"388":1,"390":1,"391":1,"392":1,"393":1,"394":1},"2":{"387":1,"389":2,"394":1,"395":2}}],["updateimplementation",{"2":{"379":3,"389":1,"394":1}}],["updateconfiguration",{"0":{"379":1},"1":{"380":1}}],["updated",{"2":{"170":1,"372":1,"386":1,"389":1,"394":3,"395":2,"396":1,"397":2}}],["updates",{"0":{"395":1},"2":{"133":1,"375":1,"387":1}}],["update",{"0":{"37":1,"38":1,"335":1,"377":1,"389":1},"1":{"38":1,"39":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":2,"391":2,"392":2,"393":2,"394":2,"395":2,"396":2,"397":2},"2":{"34":1,"37":2,"38":1,"108":1,"329":1,"339":1,"379":1,"389":3,"391":1,"426":1}}],["ultimate",{"2":{"57":1,"196":1,"445":1}}],["ux",{"2":{"47":1,"417":1}}],["unusable",{"2":{"388":1,"391":1,"394":1}}],["unsanitized",{"2":{"365":1,"388":1}}],["unsafe",{"2":{"242":1}}],["unsupported",{"2":{"40":1}}],["unreal",{"2":{"151":1}}],["unparalleled",{"2":{"126":1}}],["unpkg",{"2":{"93":1,"444":1}}],["unfamiliar",{"2":{"119":1,"120":1,"131":1,"132":1}}],["unexpected",{"2":{"110":1}}],["unnoticed",{"2":{"109":1}}],["unauthorized",{"2":{"101":1,"455":1}}],["unlimited",{"2":{"368":1,"394":2}}],["unlike",{"2":{"318":1,"355":1}}],["unless",{"2":{"105":1,"128":1,"256":1}}],["unleash",{"2":{"58":1,"197":1,"446":1}}],["unlock",{"2":{"57":1,"100":2,"196":1,"445":1,"454":2}}],["unit",{"2":{"319":2}}],["unityactivity",{"2":{"117":2}}],["unitythemeselector",{"2":{"117":2}}],["unityplayer",{"2":{"117":2}}],["unityplayeractivity",{"2":{"117":2}}],["unitypackage",{"2":{"109":2}}],["unity3d",{"2":{"117":3}}],["unity",{"2":{"50":3,"92":3,"104":3,"105":1,"107":2,"108":3,"109":3,"117":4,"119":1,"120":1,"130":2,"131":1,"132":3,"135":1,"136":2,"151":1,"242":3,"420":3}}],["uniswap",{"2":{"170":1}}],["unique",{"2":{"85":1,"110":1,"299":1,"309":1,"319":1,"328":1,"381":1}}],["universaldeployer",{"2":{"359":3,"366":1}}],["universaldeployer2",{"0":{"359":1},"2":{"359":3,"360":1}}],["universal",{"0":{"353":1},"1":{"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1},"2":{"58":1,"90":1,"197":1,"355":1,"441":1,"446":1}}],["until",{"2":{"52":1,"240":1,"422":1,"432":1}}],["unknown",{"2":{"40":1,"388":1}}],["underwent",{"2":{"407":1}}],["underlying",{"2":{"350":1,"377":1,"379":1}}],["understand",{"2":{"243":1,"276":1,"319":1}}],["understands",{"2":{"137":1}}],["understanding",{"0":{"276":1},"2":{"128":1}}],["under",{"2":{"37":1,"108":1,"110":1,"111":3,"117":1,"122":1,"133":2,"336":1,"337":1,"371":1}}],["undefined",{"2":{"26":1,"32":1,"40":5,"77":1,"426":1}}],["unbuffered",{"2":{"33":1}}],["unwanted",{"2":{"26":1}}],["usual",{"2":{"425":2}}],["usually",{"2":{"128":1,"337":1}}],["usable",{"2":{"365":1,"424":1}}],["usage",{"0":{"201":1,"211":1,"221":1,"228":1,"236":1},"1":{"229":1,"230":1},"2":{"195":1,"372":1,"411":1}}],["us",{"2":{"128":1,"137":1,"174":1,"309":1,"413":1,"461":1}}],["usdc",{"2":{"26":4,"165":1,"351":1}}],["useismounted",{"2":{"240":2}}],["useeffect",{"2":{"240":1,"426":3}}],["useweb3react",{"2":{"230":2}}],["usestate",{"2":{"426":4}}],["usesessionhash",{"2":{"426":5}}],["uses",{"2":{"103":1,"110":1,"113":1,"207":3,"216":3,"364":1,"377":1,"457":1}}],["usecheckoutmodal",{"2":{"80":3}}],["usefulness",{"2":{"126":1}}],["useful",{"2":{"69":1,"108":2,"121":1,"132":1,"167":1,"177":1,"463":1}}],["useopenwalletmodal",{"2":{"65":3}}],["useopenconnectmodal",{"2":{"64":3}}],["useaccount",{"2":{"64":3}}],["userid",{"2":{"427":2}}],["useraddress",{"2":{"179":1,"182":1,"465":1,"468":1}}],["user",{"2":{"34":1,"52":1,"64":2,"99":2,"100":4,"102":2,"103":4,"112":3,"113":1,"119":1,"147":1,"148":5,"150":1,"158":1,"161":2,"162":3,"163":1,"170":9,"172":1,"173":6,"174":1,"177":4,"181":1,"183":1,"411":1,"413":3,"414":4,"415":2,"422":1,"423":3,"425":6,"426":1,"427":1,"431":2,"433":2,"434":1,"453":2,"454":4,"456":2,"457":4,"459":1,"460":6,"461":1,"463":4,"467":1,"469":1}}],["users",{"0":{"171":1,"458":1},"1":{"172":1,"173":1,"174":1,"459":1,"460":1,"461":1},"2":{"25":1,"57":1,"58":2,"88":1,"96":1,"98":3,"99":1,"101":1,"102":1,"103":3,"109":1,"113":1,"133":1,"147":8,"148":3,"160":1,"164":2,"165":1,"167":3,"173":2,"176":1,"177":2,"196":1,"197":2,"236":1,"242":1,"255":1,"345":3,"415":1,"429":1,"430":1,"431":1,"445":1,"446":2,"450":1,"452":3,"453":1,"455":1,"456":1,"457":3,"460":2,"462":1,"463":2}}],["usedisconnect",{"2":{"64":1}}],["used",{"0":{"239":1},"2":{"26":1,"32":1,"35":1,"52":1,"69":1,"71":1,"103":1,"108":1,"123":1,"125":1,"127":1,"153":1,"199":1,"226":1,"235":1,"240":1,"242":1,"246":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"265":1,"266":1,"268":1,"269":1,"270":1,"271":1,"297":2,"307":1,"318":1,"364":1,"372":1,"376":1,"390":1,"391":1,"422":1,"425":2,"426":5,"457":1}}],["use",{"0":{"40":1,"240":1,"241":1},"1":{"41":1,"42":1,"43":1,"44":1},"2":{"25":1,"26":3,"33":1,"34":1,"35":1,"37":1,"40":1,"66":1,"80":1,"85":2,"86":1,"100":1,"109":1,"111":2,"117":1,"120":1,"121":1,"122":2,"123":1,"124":1,"125":1,"126":1,"127":1,"128":2,"129":1,"131":1,"132":3,"133":1,"136":1,"141":3,"142":2,"148":2,"158":1,"166":1,"173":1,"183":1,"191":1,"194":1,"195":1,"206":1,"207":1,"216":1,"217":1,"236":1,"240":1,"241":4,"246":1,"253":1,"254":2,"255":1,"273":1,"275":5,"277":4,"278":1,"279":2,"280":1,"285":1,"291":1,"309":1,"318":1,"330":1,"337":1,"340":1,"348":1,"353":2,"359":1,"366":1,"390":1,"426":1,"432":1,"435":1,"454":1,"460":1,"469":1,"477":1,"480":1}}],["using",{"0":{"20":1,"27":1,"34":1,"44":1,"86":1,"178":1,"199":1,"206":1,"207":1,"209":1,"216":1,"217":1,"219":1,"226":1,"235":1,"240":1,"241":1,"464":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"236":1,"237":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1},"2":{"26":1,"33":1,"37":2,"40":1,"43":2,"51":1,"52":1,"64":1,"65":1,"67":1,"81":1,"84":1,"86":1,"91":1,"96":1,"99":1,"100":1,"103":1,"105":1,"108":1,"109":1,"111":1,"122":2,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"133":2,"147":2,"148":1,"170":2,"173":1,"174":1,"176":1,"182":1,"195":2,"199":1,"200":1,"205":1,"206":1,"207":3,"208":1,"209":1,"215":1,"216":3,"217":1,"219":1,"235":1,"239":2,"241":4,"245":1,"253":1,"254":3,"307":1,"309":1,"351":1,"356":1,"360":1,"361":1,"363":1,"365":1,"375":1,"380":1,"382":1,"388":1,"389":1,"411":1,"414":1,"421":1,"422":1,"424":1,"425":2,"426":1,"428":1,"431":1,"436":1,"438":1,"442":1,"450":1,"453":1,"454":1,"457":1,"460":1,"461":1,"462":1,"468":1}}],["highly",{"2":{"239":1,"254":1,"256":1,"274":1}}],["hint",{"2":{"152":1}}],["hitting",{"2":{"293":1,"304":1,"314":1,"324":1}}],["hit",{"2":{"145":1,"303":1,"304":1,"313":1,"314":1,"323":1,"324":1}}],["history",{"2":{"133":1}}],["hidden",{"2":{"111":1}}],["human",{"2":{"122":1,"128":1}}],["html",{"2":{"117":1}}],["http",{"2":{"62":2,"63":2,"117":4,"381":1}}],["https",{"2":{"26":1,"27":1,"32":1,"34":2,"36":1,"37":1,"40":2,"41":1,"43":1,"44":1,"55":1,"93":2,"95":1,"96":1,"107":1,"117":2,"130":1,"147":1,"148":2,"160":1,"174":2,"192":1,"199":1,"209":1,"219":1,"235":1,"237":1,"241":1,"336":1,"339":2,"427":4,"444":2,"449":1,"450":1,"461":2,"478":1}}],["h",{"2":{"43":1,"44":1}}],["happen",{"2":{"414":1,"434":1}}],["hardware",{"2":{"413":1}}],["harmoniously",{"2":{"207":1,"216":1}}],["had",{"2":{"103":1,"457":1}}],["hasn",{"2":{"413":1}}],["has",{"2":{"56":1,"88":1,"101":1,"122":2,"165":1,"170":1,"193":1,"280":1,"308":1,"353":1,"367":1,"370":1,"380":1,"381":1,"388":1,"425":2,"435":2,"436":1,"455":1,"479":1}}],["hasheddata",{"2":{"402":2}}],["hashed",{"2":{"372":1}}],["hashes",{"2":{"251":1,"388":1}}],["hash",{"0":{"372":1,"373":1},"1":{"373":1,"376":1},"2":{"34":1,"40":2,"45":1,"251":1,"258":1,"267":1,"270":1,"271":1,"272":1,"364":1,"376":2,"382":1,"383":1,"387":1,"388":1,"396":1,"403":6,"426":3,"438":2}}],["handlegooglelogin",{"2":{"426":3}}],["handlers",{"2":{"148":1}}],["handler",{"2":{"120":1,"131":1,"132":1,"426":3}}],["handlerequest",{"2":{"40":2}}],["handles",{"2":{"120":1,"423":1}}],["handle",{"2":{"40":8,"41":1,"45":6,"119":1,"128":1,"426":1}}],["haven",{"2":{"107":1,"109":1,"281":1}}],["have",{"2":{"26":1,"27":3,"37":1,"40":2,"44":1,"52":1,"88":1,"107":1,"108":1,"117":1,"121":1,"123":1,"125":1,"127":1,"128":1,"137":2,"141":1,"142":1,"146":1,"147":1,"148":1,"173":1,"174":2,"189":1,"246":1,"255":1,"279":1,"280":1,"281":1,"283":1,"285":1,"288":1,"292":1,"293":1,"295":1,"300":2,"301":1,"302":1,"303":2,"305":1,"310":2,"311":1,"312":1,"314":1,"320":2,"321":1,"322":1,"324":1,"328":1,"337":1,"340":1,"372":1,"394":1,"422":1,"460":1,"461":2,"475":1}}],["having",{"2":{"25":1,"33":1,"34":1,"111":1,"148":1}}],["home",{"2":{"240":3}}],["hope",{"2":{"136":1,"137":1}}],["host",{"2":{"152":1}}],["hosting",{"2":{"102":1,"327":1,"456":1}}],["hosted",{"2":{"34":1,"413":1,"414":1}}],["horizon",{"2":{"102":3,"456":3}}],["hooks",{"2":{"240":2}}],["hook",{"2":{"64":2,"65":1,"80":1,"240":1,"426":1,"435":1,"436":2}}],["however",{"2":{"84":1,"88":1,"108":1,"109":1,"133":1,"141":1,"279":1,"308":1,"309":1,"431":1}}],["how",{"0":{"134":1,"240":1,"241":1,"281":1,"296":1,"306":1,"316":1,"326":1},"1":{"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1},"2":{"33":1,"34":1,"67":1,"85":2,"98":1,"103":1,"109":1,"111":1,"119":1,"122":2,"124":1,"126":1,"128":1,"142":1,"147":1,"174":1,"243":1,"256":1,"276":1,"281":1,"300":1,"310":1,"320":1,"339":1,"345":1,"452":1,"457":1,"461":1}}],["he",{"2":{"433":1}}],["hesitate",{"2":{"137":1}}],["head",{"2":{"329":1,"338":1}}],["headers",{"2":{"40":5}}],["heavily",{"2":{"242":1}}],["heard",{"2":{"124":1}}],["hex",{"2":{"401":1,"402":1}}],["hexdataslice",{"2":{"376":1}}],["hexzeropad",{"2":{"376":1}}],["hexadecimal",{"2":{"121":1,"132":1,"253":2,"256":2,"257":1,"259":1,"260":1,"261":1,"262":2,"264":1,"266":1}}],["hexlify",{"2":{"33":2,"180":1,"466":1}}],["held",{"2":{"299":1}}],["helpful",{"2":{"243":1}}],["helper",{"2":{"121":1}}],["help",{"2":{"102":1,"108":1,"111":1,"136":1,"137":1,"138":1,"174":1,"177":1,"195":1,"302":1,"312":1,"322":1,"327":1,"456":1,"461":1,"463":1}}],["hello",{"2":{"35":1,"36":1,"401":1}}],["here",{"2":{"33":1,"45":1,"67":1,"85":1,"130":1,"132":1,"146":1,"148":1,"174":1,"204":1,"208":4,"214":1,"218":3,"225":1,"234":1,"237":1,"241":2,"302":1,"303":1,"426":1,"461":1}}],["1699442705",{"2":{"439":1}}],["1699442705965",{"2":{"439":1}}],["1699443005",{"2":{"439":1}}],["191",{"0":{"401":1},"2":{"401":1}}],["11",{"0":{"338":1},"2":{"427":4}}],["1155",{"0":{"188":1,"298":1,"308":1,"474":1},"2":{"188":2,"297":1,"298":1,"301":2,"303":1,"307":1,"308":1,"309":1,"333":1,"335":1,"474":2}}],["13+",{"2":{"239":1}}],["13",{"0":{"241":1},"2":{"239":1,"241":1}}],["137",{"2":{"26":3,"32":2,"33":2,"62":1,"63":1,"82":1,"86":1,"221":1,"229":1,"439":2}}],["1271",{"2":{"369":1,"388":1,"400":1}}],["12",{"0":{"206":1,"217":1,"339":1},"2":{"206":1,"208":1,"217":1,"376":1}}],["123456",{"2":{"425":1,"433":1}}],["123",{"2":{"155":1,"336":2}}],["1200x400",{"2":{"148":2,"160":1}}],["18",{"2":{"121":2,"122":1}}],["102951017z",{"2":{"427":1}}],["102950917z",{"2":{"427":1}}],["109787921z",{"2":{"427":1}}],["109234880945084120673",{"2":{"427":4}}],["10",{"0":{"337":1},"2":{"427":2,"433":1}}],["10^decimals",{"2":{"121":1}}],["10^18",{"2":{"121":1}}],["100",{"2":{"83":1,"166":1,"366":1}}],["1000000000000000000",{"2":{"121":1,"185":1,"189":3,"471":1,"475":3}}],["10000000000",{"2":{"82":1}}],["1447300",{"2":{"117":1}}],["14",{"2":{"107":1}}],["1",{"0":{"30":1,"35":1,"112":1,"140":1,"144":1,"179":1,"245":1,"282":1,"301":1,"311":1,"321":1,"328":1,"355":1,"358":1,"413":1,"465":1},"1":{"36":1,"283":1},"2":{"26":4,"32":2,"37":1,"45":1,"104":1,"114":1,"115":1,"117":3,"121":4,"128":1,"129":1,"148":2,"153":1,"160":1,"200":1,"205":1,"206":2,"215":1,"217":2,"251":1,"252":1,"273":1,"279":2,"303":1,"328":1,"337":1,"339":1,"370":1,"371":1,"402":2,"414":1,"435":2,"436":2}}],["layout",{"0":{"368":1,"369":1},"1":{"369":1,"370":2,"371":2,"372":1,"373":1}}],["launch",{"2":{"339":1}}],["launcher",{"2":{"117":2}}],["languages",{"0":{"194":1,"480":1}}],["language",{"2":{"174":1,"194":1,"461":1,"480":1}}],["later",{"2":{"105":1,"144":1,"226":1,"275":1,"277":1,"279":1}}],["latest",{"2":{"93":1,"109":1,"200":2,"256":3,"257":1,"260":1,"262":1,"264":1,"266":3,"444":1}}],["lastest",{"2":{"208":1}}],["last",{"2":{"27":1,"35":1}}],["len",{"2":{"401":1}}],["length",{"2":{"251":2,"252":2}}],["lemur",{"2":{"336":1}}],["less",{"2":{"138":1,"353":1}}],["lets",{"2":{"299":1}}],["let",{"2":{"128":1,"138":1,"143":1,"299":1,"309":1}}],["left",{"2":{"67":1,"70":3,"282":1}}],["leaked",{"2":{"415":1}}],["lead",{"2":{"379":1}}],["leads",{"2":{"309":1}}],["leading",{"2":{"58":1,"197":1,"446":1}}],["least",{"2":{"100":1,"454":1}}],["learn",{"2":{"98":1,"122":1,"124":1,"126":1,"128":1,"345":1,"452":1}}],["learning",{"2":{"66":1}}],["leverages",{"2":{"112":1}}],["leveraging",{"2":{"48":1,"90":1,"343":1,"418":1,"441":1}}],["level",{"2":{"26":1,"147":1}}],["little",{"2":{"327":1}}],["live",{"2":{"199":2,"209":2,"219":2,"235":2,"353":1}}],["lives",{"2":{"108":1}}],["limits",{"2":{"414":1}}],["limitations",{"2":{"353":1}}],["limitation",{"2":{"240":2}}],["limited",{"2":{"177":1,"415":1,"463":1}}],["limit",{"2":{"148":1,"163":1,"299":1}}],["libs",{"2":{"406":1}}],["libraries",{"2":{"195":2,"208":1,"216":3,"218":2,"239":4,"240":1}}],["library",{"0":{"52":1,"240":1,"241":1,"422":1},"2":{"52":1,"57":1,"104":1,"123":1,"125":1,"127":1,"194":1,"196":1,"240":1,"241":2,"242":3,"243":1,"246":1,"276":1,"401":1,"402":1,"422":1,"445":1,"480":1}}],["lib",{"2":{"93":1,"444":1}}],["listen",{"0":{"435":1}}],["listsessions",{"2":{"427":1,"428":1}}],["list",{"0":{"427":1},"2":{"75":1,"76":1,"77":2,"83":1,"86":1,"146":1,"164":1,"201":1,"211":1,"260":2,"367":1,"396":1,"427":1}}],["lightweight",{"2":{"242":1}}],["light",{"2":{"67":1,"69":1,"148":1,"159":1}}],["linux",{"2":{"115":2}}],["line",{"2":{"42":2,"414":1}}],["links",{"2":{"142":1}}],["linking",{"2":{"113":1,"117":3}}],["linked",{"0":{"295":1},"2":{"37":1}}],["link",{"2":{"27":1,"50":1,"113":1,"344":1,"420":1,"439":1}}],["likely",{"2":{"290":1}}],["likewise",{"2":{"189":1,"475":1}}],["like",{"2":{"35":1,"40":1,"43":1,"56":1,"58":1,"63":1,"92":1,"99":1,"128":1,"142":1,"144":2,"147":2,"148":2,"173":1,"174":1,"193":1,"194":2,"197":1,"216":1,"275":1,"277":1,"295":1,"301":1,"302":1,"311":1,"312":1,"319":5,"321":1,"322":1,"328":2,"329":1,"336":1,"411":1,"431":1,"435":1,"443":1,"446":1,"453":1,"460":1,"461":1,"479":1,"480":2}}],["loss",{"2":{"365":1,"379":1}}],["lost",{"2":{"100":3,"102":1,"454":3,"456":1}}],["long",{"2":{"148":1,"337":1,"425":1}}],["locking",{"2":{"167":1}}],["lockfundingcurrencytodefault",{"0":{"167":1},"2":{"148":2}}],["located",{"2":{"110":1}}],["locate",{"2":{"110":1,"111":1,"136":1}}],["location",{"2":{"70":1}}],["localhost",{"2":{"381":1}}],["localstorage",{"2":{"180":1,"466":1}}],["locally",{"2":{"37":1}}],["local",{"2":{"35":4,"37":1,"44":1,"177":1,"180":1,"184":1,"401":1,"402":1,"463":1,"466":1,"470":1}}],["loading",{"2":{"184":1,"426":1,"470":1}}],["load",{"2":{"110":2,"285":1,"300":1,"310":1,"320":1}}],["love",{"2":{"87":1}}],["looking",{"2":{"292":1}}],["look",{"2":{"40":1,"59":1,"63":1,"92":1,"128":1,"173":1,"198":1,"275":1,"277":1,"328":1,"329":1,"336":2,"443":1,"447":1,"460":1}}],["logs",{"2":{"426":1,"438":3}}],["logic",{"2":{"350":1}}],["logically",{"2":{"243":1}}],["loginpanel",{"2":{"111":5}}],["logins",{"2":{"58":1,"100":1,"197":1,"425":2,"432":2,"446":1,"454":1}}],["login",{"0":{"100":1,"149":1,"430":1,"431":1,"454":1},"1":{"101":1,"102":1,"103":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"455":1,"456":1,"457":1},"2":{"35":3,"43":1,"99":1,"100":2,"103":1,"113":1,"119":1,"413":3,"415":1,"426":5,"429":1,"432":1,"453":1,"454":2,"457":1}}],["logging",{"2":{"160":1,"430":1,"431":1}}],["logged",{"2":{"35":1}}],["logolight",{"2":{"85":2}}],["logodark",{"2":{"85":2}}],["logo",{"2":{"72":1}}],["logourl",{"0":{"72":1}}],["log",{"2":{"26":3,"32":2,"37":1,"40":1,"82":1,"148":2,"172":1,"174":2,"182":2,"184":2,"185":1,"186":2,"187":2,"188":2,"189":2,"381":1,"424":1,"425":1,"426":1,"427":1,"431":1,"432":1,"435":1,"436":1,"438":1,"439":1,"459":1,"461":2,"468":2,"470":2,"471":1,"472":2,"473":2,"474":2,"475":2}}],["ll",{"2":{"34":1,"38":1,"42":1,"51":1,"52":1,"110":1,"119":1,"123":3,"125":3,"127":3,"132":2,"133":1,"173":1,"256":1,"275":5,"277":3,"302":1,"328":1,"421":1,"422":1,"460":1}}],["lt",{"0":{"206":1,"217":1},"2":{"26":2,"32":1,"36":2,"37":1,"40":4,"43":2,"44":4,"45":3,"62":8,"63":19,"64":4,"65":2,"67":3,"79":9,"80":2,"86":8,"92":1,"93":4,"117":38,"148":1,"173":4,"174":1,"206":1,"208":1,"217":1,"240":3,"241":5,"260":2,"277":5,"339":3,"356":1,"426":11,"443":1,"444":4,"460":4,"461":1}}],["pixel",{"2":{"427":1}}],["pinata",{"0":{"329":1},"2":{"327":1,"329":2,"330":1,"331":1,"336":1,"337":1}}],["pick",{"2":{"105":1,"148":1,"163":1}}],["python",{"2":{"194":1,"480":1}}],["png",{"2":{"148":2,"160":1}}],["pnpm",{"2":{"35":2,"40":1,"45":1,"50":1,"61":1,"79":1,"92":2,"420":1,"443":1}}],["pc",{"0":{"116":1},"2":{"105":1}}],["philosophy",{"2":{"99":1,"453":1}}],["phone",{"2":{"95":1,"96":1,"147":2,"414":1,"449":1,"450":1}}],["publicly",{"2":{"413":1}}],["publicclient",{"2":{"201":1}}],["publically",{"2":{"120":1}}],["public",{"2":{"119":1,"120":3,"131":2,"132":3,"363":1,"403":1}}],["publishing",{"2":{"117":1}}],["purchasing",{"2":{"167":1}}],["purchase",{"2":{"98":2,"166":1,"167":2,"345":2,"452":2}}],["purposes",{"2":{"318":1}}],["purpose",{"2":{"104":1,"120":1}}],["pull",{"2":{"87":1}}],["putting",{"2":{"128":1}}],["put",{"2":{"40":1,"109":1,"303":1,"313":1,"323":1}}],["plugin",{"2":{"210":3,"211":1}}],["plugins",{"2":{"117":1}}],["please",{"2":{"50":1,"62":1,"92":1,"109":1,"111":1,"117":3,"119":1,"121":1,"122":1,"128":1,"133":1,"136":1,"137":1,"168":1,"195":2,"226":1,"420":1,"431":1}}],["plain",{"2":{"173":1,"460":1}}],["plan",{"2":{"128":1,"285":1}}],["player",{"2":{"114":2,"115":2,"117":3,"299":2,"317":1}}],["play",{"2":{"107":1,"108":1,"109":1,"181":1,"467":1}}],["playground",{"2":{"69":1}}],["places",{"2":{"133":1,"318":1}}],["place",{"2":{"79":1,"110":1,"414":1,"415":1}}],["placed",{"2":{"40":1,"241":1}}],["platformspecificsetup",{"2":{"105":1}}],["platforms",{"0":{"94":1,"448":1},"1":{"95":1,"96":1,"97":1,"449":1,"450":1,"451":1},"2":{"112":1,"113":1}}],["platform",{"2":{"35":1,"113":1,"413":1}}],["pkey",{"2":{"40":4,"41":1,"45":1}}],["person",{"2":{"402":1}}],["perspective",{"2":{"170":1}}],["per",{"2":{"355":1}}],["perfectly",{"2":{"191":1,"477":1}}],["perfect",{"2":{"136":2}}],["performs",{"2":{"414":1}}],["performed",{"2":{"255":1,"436":1}}],["perform",{"2":{"35":1,"36":1,"40":1,"43":1,"136":1,"154":1,"183":1,"434":1,"469":1}}],["permission",{"2":{"37":1}}],["popups",{"2":{"148":1}}],["popup",{"2":{"148":2}}],["popular",{"0":{"349":1},"2":{"57":1,"58":1,"196":1,"197":1,"242":1,"354":1,"357":1,"445":1,"446":1}}],["pop",{"2":{"144":1,"293":1,"304":1,"314":1,"324":1}}],["policy",{"2":{"142":1}}],["polygonindexer",{"2":{"130":1}}],["polygon",{"2":{"26":2,"32":1,"43":1,"62":2,"63":2,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":2,"129":1,"130":1,"131":1,"132":1,"148":1,"174":1,"201":1,"211":1,"253":1,"254":1,"439":1,"461":1}}],["potentially",{"2":{"242":1,"255":1}}],["potential",{"2":{"58":1,"197":1,"446":1}}],["powered",{"2":{"117":5}}],["power",{"2":{"58":1,"197":1,"446":1}}],["position",{"0":{"70":1},"2":{"70":1}}],["possible",{"2":{"69":1,"70":1,"148":1,"170":1,"176":2,"277":1,"412":1,"415":1,"462":2}}],["possibilities",{"2":{"57":1,"129":1,"196":1,"445":1}}],["post",{"2":{"34":1,"40":5,"43":1,"44":1,"45":1,"107":1,"119":1,"120":1,"131":1,"132":1}}],["points",{"2":{"133":1,"363":1}}],["point",{"2":{"35":1,"85":1,"121":1,"255":1,"256":1,"309":1,"335":1,"364":1}}],["pair",{"2":{"347":1}}],["paid",{"2":{"27":1,"32":1,"264":1}}],["path",{"2":{"117":1,"148":3,"426":2}}],["path=",{"2":{"107":1}}],["patch",{"2":{"104":2}}],["pasting",{"2":{"128":1}}],["pasted",{"2":{"170":1}}],["paste",{"2":{"107":1,"117":1,"132":1,"329":1,"336":1}}],["password",{"2":{"425":1}}],["passes",{"2":{"251":1,"252":1}}],["passed",{"2":{"40":1,"75":2,"76":2,"155":1,"203":1,"204":1,"213":1,"382":1}}],["passing",{"2":{"67":1,"69":1,"77":1}}],["pass",{"2":{"41":1,"80":1,"86":1,"129":1,"148":3,"173":1,"251":1,"252":1,"424":1,"460":1}}],["palette",{"2":{"69":1}}],["parentheses",{"2":{"128":1}}],["param",{"2":{"403":2}}],["parametersasobjectarray",{"2":{"128":2,"129":1}}],["parameters",{"0":{"202":1,"212":1,"222":1,"364":1,"380":1,"384":1,"388":1},"1":{"203":1,"204":1,"205":1,"213":1,"214":1,"215":1,"223":1,"224":1},"2":{"128":5,"149":1,"365":1}}],["parameter",{"2":{"70":1,"119":1,"121":1,"122":1,"128":1,"203":1,"213":1,"254":1,"256":1,"274":1}}],["parallel",{"0":{"33":1},"2":{"33":1}}],["partner",{"2":{"415":3}}],["party",{"2":{"413":1,"414":1}}],["particularly",{"2":{"177":1,"239":1,"242":1,"308":1,"463":1}}],["partial",{"2":{"45":2,"391":1,"415":1}}],["part",{"2":{"56":1,"193":1,"479":1}}],["parse",{"2":{"40":1}}],["pageprops",{"2":{"241":2}}],["pages",{"0":{"240":1},"2":{"207":3,"208":1,"216":3,"218":1,"239":2}}],["page",{"2":{"37":1,"44":1,"63":1,"75":1,"76":1,"79":1,"112":1,"165":1,"239":1,"240":2,"256":1}}],["packages",{"0":{"61":1},"2":{"45":1,"61":1,"92":2,"443":2}}],["package",{"0":{"107":1},"1":{"108":1},"2":{"35":1,"61":2,"84":1,"92":4,"107":5,"108":1,"109":6,"136":1,"147":1,"191":1,"200":2,"210":1,"219":1,"227":1,"426":1,"443":4,"477":1}}],["payload",{"2":{"185":1,"471":1}}],["paypal",{"2":{"147":1}}],["payable",{"2":{"128":3,"363":1}}],["paytrie",{"2":{"98":1,"345":1,"452":1}}],["payments",{"2":{"78":1}}],["payment",{"2":{"34":1,"98":1,"164":2,"165":2,"345":1,"452":1}}],["pay",{"2":{"26":5,"351":1,"358":1}}],["practice",{"2":{"242":1}}],["pr",{"2":{"133":1,"137":1}}],["prudent",{"2":{"101":1,"455":1}}],["primitive",{"2":{"347":1}}],["primary",{"2":{"177":2,"463":2}}],["price",{"2":{"268":1}}],["prices",{"2":{"133":1}}],["privacy",{"2":{"142":1}}],["privatekeystring",{"2":{"245":1}}],["privatekey",{"2":{"37":4}}],["private",{"2":{"37":2,"40":1,"41":1,"45":1,"88":2,"99":3,"100":1,"103":1,"177":1,"180":1,"245":2,"453":3,"454":1,"457":1,"463":1,"466":1}}],["priority",{"2":{"269":1}}],["prior",{"2":{"45":1,"117":2}}],["print",{"2":{"36":1,"37":1}}],["prepared",{"2":{"350":1}}],["prepare",{"0":{"328":1}}],["prerequisite",{"0":{"300":1,"310":1,"320":1}}],["pre",{"2":{"279":1,"280":1,"355":2,"358":2}}],["presented",{"2":{"142":1}}],["press",{"2":{"35":1,"44":1,"107":1}}],["prefixedmessage",{"2":{"401":2}}],["prefilling",{"2":{"166":1}}],["prefer",{"2":{"254":1}}],["preference",{"2":{"103":1,"457":1}}],["prefabs",{"2":{"111":1,"133":1}}],["prefab",{"2":{"111":2,"133":1}}],["preview",{"2":{"336":1}}],["previously",{"2":{"45":1,"170":1,"245":1}}],["previous",{"2":{"26":1,"185":1,"359":1,"471":1}}],["prevent",{"0":{"40":1},"1":{"41":1,"42":1,"43":1,"44":1},"2":{"34":1,"42":1,"167":1,"426":1}}],["pro",{"2":{"424":1,"425":1,"426":1,"427":2,"428":1}}],["proper",{"2":{"388":1}}],["property",{"2":{"366":1}}],["properties",{"2":{"319":1}}],["program",{"2":{"377":1}}],["progressively",{"2":{"147":1}}],["progress",{"2":{"133":1}}],["proxy",{"2":{"363":1,"364":1,"365":2,"376":2,"379":1}}],["pros",{"0":{"348":1,"351":1}}],["protocols",{"2":{"170":1,"340":1}}],["protocol",{"2":{"147":1,"151":1}}],["protected",{"2":{"413":1}}],["protects",{"2":{"412":1,"415":1}}],["protect",{"2":{"103":1,"457":1}}],["protection",{"2":{"102":1,"155":1,"415":1,"431":1,"456":1}}],["produce",{"0":{"239":1},"2":{"239":1}}],["produced",{"2":{"37":1}}],["product",{"2":{"133":1}}],["prone",{"2":{"128":1,"353":1}}],["proceed",{"2":{"112":1}}],["process",{"0":{"354":1,"357":1},"1":{"355":1,"356":1,"358":1,"359":1,"360":1},"2":{"26":1,"40":1,"52":2,"58":1,"107":1,"128":3,"136":1,"148":1,"177":1,"197":1,"297":1,"317":1,"337":1,"354":1,"357":1,"422":2,"424":2,"425":2,"426":2,"427":2,"428":2,"438":2,"439":2,"446":1,"463":1}}],["prove",{"2":{"44":1,"173":1,"460":1}}],["providing",{"2":{"37":1,"57":1,"123":1,"125":1,"127":1,"128":1,"196":1,"289":1,"313":1,"323":1,"413":1,"445":1}}],["provides",{"2":{"69":1,"84":1,"104":1,"112":1,"129":1,"242":1,"247":1,"413":1,"415":1}}],["provide",{"0":{"289":1,"303":1,"313":1,"323":1},"2":{"50":1,"58":1,"85":1,"86":1,"88":1,"92":1,"111":1,"128":3,"133":3,"144":1,"177":1,"197":1,"242":1,"256":1,"272":1,"274":2,"275":1,"276":1,"279":1,"285":1,"290":1,"309":1,"336":1,"346":1,"413":1,"420":1,"425":1,"431":1,"446":1,"463":1}}],["provided",{"2":{"26":1,"32":1,"35":1,"51":1,"77":3,"108":1,"121":1,"123":1,"125":1,"127":1,"159":1,"242":1,"253":1,"254":1,"256":3,"275":2,"279":1,"280":1,"363":1,"365":1,"377":1,"383":1,"389":1,"403":4,"421":1,"425":1}}],["providers",{"2":{"37":1,"40":1,"45":3,"61":1,"98":4,"161":1,"164":2,"165":1,"174":1,"345":4,"381":1,"424":1,"431":1,"452":4,"461":1}}],["provider",{"2":{"26":2,"32":1,"37":2,"45":5,"79":1,"98":1,"148":1,"161":2,"165":1,"174":2,"182":1,"241":1,"345":1,"381":2,"424":1,"426":2,"431":2,"452":1,"461":2,"468":1}}],["prompted",{"2":{"170":1,"336":1}}],["prompt",{"2":{"107":1,"109":1,"170":1,"173":1,"224":1,"435":1,"460":1}}],["prompts",{"2":{"35":1}}],["promise",{"2":{"33":1,"40":4,"45":2}}],["projectid",{"2":{"427":2}}],["projectname",{"0":{"73":1}}],["project",{"0":{"51":1,"92":1,"143":1,"144":1,"145":1,"300":1,"310":1,"320":1,"421":1},"1":{"93":1,"144":1,"145":1},"2":{"35":7,"36":1,"37":1,"40":5,"41":1,"45":1,"51":1,"52":1,"73":1,"92":2,"108":5,"109":2,"110":1,"114":1,"115":1,"117":2,"138":2,"143":3,"144":3,"145":2,"146":1,"195":1,"281":1,"282":1,"300":1,"301":1,"310":1,"320":1,"332":1,"414":1,"421":1,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1,"443":2}}],["projectaccesskey",{"2":{"26":2,"32":1,"37":1,"52":1,"62":2,"63":2,"86":1,"148":3,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1}}],["proofstring",{"2":{"40":1,"174":1,"461":1}}],["proof",{"2":{"34":1,"40":5,"43":5,"44":4,"148":2,"153":1,"154":1,"173":2,"174":6,"460":2,"461":6}}],["probably",{"2":{"124":1}}],["probability",{"2":{"33":1}}],["problem",{"2":{"33":1}}],["=0",{"2":{"208":1}}],["===",{"2":{"26":1,"40":10,"184":1,"470":1}}],["=",{"0":{"206":1,"217":1},"2":{"26":20,"32":9,"33":6,"37":8,"40":14,"41":4,"42":1,"45":17,"52":1,"62":8,"63":10,"64":6,"65":5,"67":1,"79":2,"80":6,"81":1,"82":2,"85":4,"86":3,"123":2,"125":2,"127":2,"130":1,"132":2,"148":11,"149":1,"172":2,"173":2,"174":6,"179":3,"180":3,"181":2,"182":3,"183":2,"184":1,"185":3,"186":12,"187":13,"188":13,"189":13,"200":1,"201":2,"206":1,"211":1,"217":1,"221":3,"229":2,"230":5,"240":3,"241":3,"245":2,"246":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":2,"254":1,"256":2,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":2,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":2,"274":1,"275":10,"277":6,"278":2,"279":7,"371":3,"376":6,"381":4,"389":1,"394":1,"395":1,"401":3,"402":4,"403":1,"406":1,"422":1,"424":3,"425":6,"426":14,"427":2,"428":2,"432":1,"433":2,"434":2,"435":1,"436":2,"438":2,"439":2,"459":2,"460":2,"461":6,"465":3,"466":3,"467":2,"468":3,"469":2,"470":1,"471":3,"472":12,"473":13,"474":13,"475":13}}],["gnosis",{"2":{"352":1}}],["grant",{"2":{"299":1}}],["grantrole",{"2":{"37":1}}],["groupname",{"2":{"211":1}}],["groups",{"0":{"175":1},"2":{"303":1}}],["great",{"2":{"119":1,"120":1,"131":1,"132":1,"141":1}}],["guarantee",{"2":{"413":1,"431":1}}],["guarantees",{"2":{"411":1}}],["guard",{"0":{"102":1,"414":1,"456":1},"2":{"100":2,"102":2,"103":1,"414":4,"415":2,"438":1,"454":2,"456":2,"457":1}}],["guestmodule",{"0":{"405":1},"2":{"406":1}}],["guess",{"2":{"328":1}}],["guides",{"2":{"130":1,"146":1}}],["guide",{"2":{"34":1,"35":1,"37":1,"38":1,"39":1,"59":1,"60":1,"84":1,"85":1,"198":1,"281":1,"297":1,"300":1,"307":2,"310":1,"317":1,"320":1,"327":1,"447":1}}],["give",{"2":{"136":2,"289":2,"303":2,"439":1}}],["given",{"2":{"110":1,"141":1,"249":2,"250":2,"251":2,"252":2,"253":1,"256":2,"262":1,"263":1,"266":2,"267":1,"354":1,"357":1,"381":1,"385":1,"389":1,"391":1}}],["gives",{"2":{"88":1}}],["github",{"2":{"55":1,"66":1,"107":1,"192":1,"199":1,"209":1,"219":1,"235":1,"237":1,"240":1,"241":2,"478":1}}],["git",{"2":{"35":1,"107":3}}],["got",{"2":{"336":1}}],["going",{"2":{"297":1,"317":1}}],["goerli",{"2":{"205":1,"215":1}}],["goes",{"2":{"128":1}}],["good",{"2":{"85":1}}],["googlelogin",{"2":{"426":3}}],["googleoauthprovider",{"2":{"426":3}}],["google",{"0":{"426":1},"2":{"58":1,"75":1,"86":2,"103":1,"113":1,"148":1,"161":2,"163":1,"197":1,"414":1,"424":1,"426":8,"427":4,"431":1,"446":1,"457":1}}],["golang",{"2":{"55":1,"192":1,"478":1}}],["go",{"0":{"55":1,"140":1,"192":1,"282":1,"478":1},"1":{"283":1},"2":{"55":6,"56":2,"109":1,"140":1,"174":3,"192":6,"193":2,"194":1,"274":1,"300":1,"310":1,"320":1,"354":1,"357":1,"429":1,"461":3,"478":6,"479":2,"480":1}}],["general",{"2":{"109":1,"120":1,"132":1,"242":2}}],["generating",{"2":{"37":1}}],["generates",{"2":{"299":1}}],["generated",{"2":{"35":1,"36":1,"37":2,"44":1,"100":2,"103":2,"177":1,"245":1,"328":1,"425":2,"437":1,"454":2,"457":2,"463":1}}],["generate",{"0":{"180":1,"466":1},"2":{"33":2,"37":2,"44":2,"103":1,"245":1,"457":1}}],["getelementbyid",{"2":{"426":1}}],["getimagehash",{"2":{"396":1}}],["getfunction",{"2":{"389":2,"395":1}}],["getsessionhash",{"2":{"424":1,"425":1,"426":2}}],["getstorageat",{"2":{"381":1}}],["getsigner",{"2":{"26":2,"32":1,"33":2,"37":1,"45":1,"179":1,"185":1,"186":2,"187":2,"188":2,"189":2,"465":1,"471":1,"472":2,"473":2,"474":2,"475":2}}],["getchainid",{"2":{"182":1,"468":1}}],["getcomponentinchildren",{"2":{"111":1}}],["getprovider",{"2":{"182":1,"468":1}}],["getaddress",{"0":{"248":1},"2":{"172":1,"179":1,"180":1,"187":1,"188":1,"248":1,"256":2,"266":2,"275":2,"279":1,"376":1,"459":1,"465":1,"466":1,"473":1,"474":1}}],["getwallet",{"2":{"148":5,"172":1,"173":1,"459":1,"460":1}}],["getkitconnectwallets",{"2":{"86":2}}],["getdefaultconnectors",{"2":{"62":2,"63":2,"86":1}}],["getting",{"0":{"49":1,"60":1,"344":1,"419":1},"1":{"50":1,"51":1,"52":1,"61":1,"420":1,"421":1,"422":1},"2":{"59":1,"198":1,"447":1}}],["getblocknumber",{"2":{"40":3,"45":3}}],["get",{"0":{"138":1,"331":1},"1":{"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1},"2":{"26":2,"32":2,"34":1,"40":4,"42":1,"45":2,"48":1,"61":1,"91":1,"95":1,"96":1,"108":1,"128":1,"138":1,"140":1,"141":2,"172":1,"253":1,"256":4,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"264":1,"265":1,"266":1,"268":1,"269":1,"270":1,"271":1,"300":1,"309":1,"310":1,"320":1,"339":1,"343":1,"418":1,"424":2,"442":1,"449":1,"450":1,"459":1}}],["gt",{"2":{"26":6,"32":2,"36":2,"37":2,"40":7,"43":2,"44":4,"45":5,"62":9,"63":21,"64":6,"65":4,"67":3,"79":10,"80":4,"82":1,"85":2,"86":8,"92":1,"93":4,"105":3,"107":2,"109":1,"110":4,"111":1,"114":2,"115":2,"117":42,"133":1,"136":3,"148":1,"174":2,"200":1,"230":2,"240":4,"241":6,"260":2,"276":6,"277":5,"330":1,"339":3,"356":1,"403":1,"426":16,"434":1,"435":1,"436":1,"443":1,"444":4,"461":2}}],["g",{"2":{"26":1,"82":1,"123":1,"125":1,"127":1,"133":1,"177":1,"205":1,"215":1,"274":1,"351":1,"413":1,"463":1}}],["gain",{"2":{"415":2}}],["gained",{"2":{"308":1}}],["gather",{"2":{"328":1,"330":1}}],["gateway",{"2":{"254":1}}],["gate",{"2":{"136":1}}],["gaming",{"0":{"309":1}}],["gameobject",{"2":{"111":1,"136":1}}],["games",{"2":{"104":1,"126":1,"298":1}}],["game",{"0":{"4":1,"6":1,"11":1,"12":1,"17":1,"18":1,"53":1,"296":1,"316":1},"1":{"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1},"2":{"34":1,"108":5,"181":1,"195":1,"297":2,"298":1,"299":1,"307":2,"309":3,"317":2,"333":1,"467":1}}],["gasused",{"2":{"439":1}}],["gaslist",{"2":{"368":1}}],["gaslimit",{"0":{"394":1},"2":{"273":1,"275":1,"389":2,"394":2,"395":1,"439":1}}],["gaslimitestimator",{"2":{"273":1}}],["gasless",{"0":{"34":1},"1":{"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1}}],["gastipcap",{"2":{"269":1}}],["gasprice",{"2":{"268":1,"273":1,"275":1}}],["gas",{"0":{"27":1,"30":1,"31":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1},"2":{"26":3,"32":2,"34":1,"121":3,"129":1,"256":1,"263":2,"264":1,"268":1,"269":1,"273":1,"293":1,"302":1,"308":1,"312":1,"322":1,"366":1,"372":1,"394":1}}],["fly",{"2":{"328":1}}],["flagged",{"2":{"391":1}}],["flag",{"2":{"156":1}}],["flexible",{"2":{"147":1,"351":1}}],["flexibility",{"2":{"109":1,"308":1}}],["floating",{"2":{"121":1}}],["flows",{"2":{"429":1}}],["flow",{"2":{"113":1,"170":1,"357":1}}],["frontend",{"2":{"415":2}}],["from",{"0":{"130":1,"175":1,"374":1},"2":{"26":3,"32":2,"33":2,"34":1,"35":1,"37":5,"40":5,"41":1,"43":1,"44":2,"45":5,"52":1,"62":6,"63":8,"64":3,"65":1,"77":1,"79":1,"80":1,"86":1,"87":1,"95":1,"96":1,"99":1,"101":1,"102":1,"107":3,"112":1,"117":1,"119":1,"120":2,"122":1,"126":1,"128":2,"130":1,"131":2,"132":3,"146":2,"147":1,"148":2,"167":1,"170":4,"173":3,"174":5,"177":2,"179":2,"185":1,"187":2,"188":2,"189":2,"194":2,"201":1,"211":2,"221":1,"229":1,"230":3,"240":2,"241":1,"253":1,"254":1,"260":1,"275":1,"277":1,"280":1,"285":1,"297":1,"300":1,"301":1,"302":1,"305":3,"307":2,"310":1,"311":1,"312":1,"314":1,"315":1,"317":1,"320":1,"321":1,"322":1,"324":1,"327":1,"328":1,"329":1,"336":1,"366":1,"377":1,"380":1,"381":1,"388":1,"401":1,"402":2,"412":1,"413":1,"414":2,"415":1,"422":1,"424":1,"425":2,"426":10,"427":1,"428":2,"436":1,"438":1,"439":1,"449":1,"450":1,"453":1,"455":1,"456":1,"460":3,"461":5,"463":2,"465":2,"471":1,"473":2,"474":2,"475":2,"480":2}}],["freshly",{"2":{"335":1}}],["frequent",{"2":{"177":1,"463":1}}],["free",{"2":{"87":1,"111":1,"133":1,"146":1,"195":1,"366":1}}],["friendlyname",{"2":{"427":2}}],["friendly",{"2":{"88":1}}],["fashion",{"2":{"402":1}}],["fast",{"2":{"340":1}}],["false",{"0":{"390":1},"2":{"148":2,"167":1,"389":2,"395":1,"426":1,"427":1,"432":1,"433":2,"434":1,"436":1,"439":1}}],["failing",{"2":{"439":1}}],["fails",{"2":{"251":1,"252":1,"391":1,"439":2}}],["failedtransactionresponse",{"2":{"439":1}}],["failedtransactionreturn",{"2":{"120":1}}],["failed",{"0":{"439":1},"2":{"437":2,"438":1}}],["failedcontractdeploymentreturn",{"2":{"132":1}}],["fail",{"2":{"129":1,"242":1,"251":1,"252":1}}],["failure",{"2":{"110":1,"274":1}}],["familiar",{"2":{"59":1,"128":1,"147":1,"198":1,"411":1,"447":1}}],["facet",{"2":{"412":1}}],["facebook",{"2":{"58":1,"75":1,"86":1,"113":1,"161":1,"197":1,"424":1,"431":1,"446":1}}],["facilitate",{"2":{"78":1}}],["factual",{"0":{"366":1},"2":{"364":1,"366":1,"376":1,"382":1,"397":1}}],["factory",{"0":{"355":1,"361":1,"362":1},"1":{"362":1,"363":2,"364":2,"365":2,"366":1},"2":{"355":6,"356":1,"361":1,"365":1,"375":1,"376":2,"377":1,"378":1,"382":1,"389":2,"406":1}}],["factors",{"2":{"294":1,"304":1,"314":1,"324":1}}],["fact",{"2":{"55":1,"99":1,"192":1,"453":1,"478":1}}],["feb",{"2":{"408":1}}],["feature",{"2":{"79":1,"239":1,"241":2,"330":1}}],["features",{"0":{"58":1,"197":1,"446":1},"2":{"104":1,"108":1,"194":2,"340":1,"480":2}}],["few",{"2":{"58":1,"108":1,"134":1,"136":1,"141":1,"197":1,"285":1,"294":1,"304":1,"314":1,"324":1,"446":1}}],["fetching",{"2":{"133":1}}],["fetch",{"2":{"40":1}}],["feehistoryresult",{"2":{"264":2}}],["feehistory",{"0":{"264":1},"2":{"264":2}}],["feel",{"2":{"87":1,"109":1,"111":1,"133":1,"146":1,"195":1}}],["fee",{"2":{"26":1,"27":1,"269":1,"293":2}}],["feeoption",{"2":{"26":1,"32":1}}],["fees",{"2":{"26":3,"32":1,"264":1,"351":1}}],["fixedbyte",{"2":{"276":1}}],["fixed",{"2":{"276":1,"382":1}}],["fixing",{"2":{"239":1}}],["firm",{"2":{"126":1}}],["first",{"0":{"389":1},"1":{"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":1},"2":{"35":1,"37":2,"44":1,"86":1,"100":1,"105":1,"117":1,"123":1,"125":1,"127":1,"132":1,"138":1,"141":1,"148":1,"300":1,"303":2,"310":1,"320":1,"328":2,"366":1,"389":1,"394":2,"454":1}}],["filter",{"2":{"117":9}}],["filled",{"2":{"303":1}}],["fill",{"2":{"110":1,"303":2,"337":1}}],["files",{"0":{"330":1},"2":{"108":2,"328":1,"329":3,"330":1,"331":1,"335":1}}],["file",{"2":{"42":1,"109":1,"117":2,"328":1,"329":1,"337":1,"426":1}}],["fit",{"2":{"109":2,"243":1}}],["fiat",{"0":{"98":1,"345":1,"452":1}}],["fields",{"2":{"85":1,"303":3,"438":1}}],["field",{"2":{"82":1,"83":1,"86":1,"114":1,"115":1}}],["finalizeauth",{"2":{"425":1}}],["finalize",{"0":{"338":1}}],["finally",{"2":{"36":1,"39":1,"44":1,"45":1,"337":1}}],["finishvalidatesession",{"2":{"433":2}}],["finishes",{"2":{"394":2}}],["finished",{"2":{"170":1}}],["finish",{"2":{"145":1}}],["findobjectoftype",{"2":{"111":1}}],["finding",{"2":{"108":1}}],["findsupportednetwork",{"2":{"40":2,"45":4}}],["find",{"2":{"26":5,"32":1,"37":1,"173":1,"282":1,"396":1,"397":1,"460":1}}],["further",{"2":{"148":1}}],["fully",{"2":{"130":1,"236":1,"274":1,"340":1,"411":1}}],["full",{"2":{"33":1,"45":1,"75":1,"76":1,"88":1,"104":1,"156":1,"168":1,"240":1,"241":1,"438":1,"439":1}}],["future",{"2":{"26":1}}],["fungibility",{"0":{"319":1}}],["fungible",{"2":{"122":1,"124":1,"126":1,"298":3,"307":1,"308":2,"318":1,"319":2}}],["fungability",{"0":{"319":1}}],["funding",{"2":{"166":1,"167":1}}],["funds",{"2":{"148":1,"355":4,"358":4,"365":1,"366":1,"379":1,"393":1}}],["fund",{"2":{"27":1,"355":1}}],["funded",{"2":{"26":1,"355":1,"358":1}}],["functional",{"2":{"340":1,"411":1,"426":1}}],["functionality",{"2":{"130":1,"170":1,"186":1,"187":1,"188":1,"195":1,"346":1,"350":1,"390":1,"472":1,"473":1,"474":1}}],["functionnameasstring",{"2":{"128":2,"129":1}}],["functions",{"0":{"275":1},"2":{"120":1,"123":1,"125":1,"127":1,"132":1,"182":1,"207":1,"216":1,"468":1}}],["function",{"2":{"26":1,"32":1,"40":1,"45":1,"62":1,"63":1,"85":1,"86":1,"119":1,"121":1,"128":5,"131":1,"173":1,"186":2,"187":2,"188":2,"189":3,"194":1,"241":1,"274":3,"275":1,"363":1,"366":1,"379":1,"383":2,"387":1,"389":1,"403":1,"426":5,"427":1,"460":1,"472":2,"473":2,"474":2,"475":3,"480":1}}],["focus",{"2":{"309":1,"335":1}}],["folder",{"0":{"331":1},"2":{"35":2,"36":1,"107":2,"108":2,"110":4,"239":3,"241":2,"330":4,"331":2,"336":1,"337":1}}],["follows",{"2":{"45":1,"104":1,"170":1,"318":1,"401":1}}],["follow",{"2":{"27":1,"35":1,"37":1,"39":1,"43":1,"62":1,"79":1,"146":1,"160":1}}],["following",{"2":{"26":1,"27":1,"32":1,"34":2,"37":2,"38":1,"42":1,"45":1,"117":1,"119":1,"136":1,"174":1,"200":1,"206":1,"217":1,"327":1,"354":1,"355":1,"357":1,"358":1,"359":1,"394":1,"415":1,"423":1,"461":1}}],["found",{"2":{"26":9,"108":1,"110":1,"133":2,"184":1,"240":1,"241":2,"255":1,"353":1,"355":1,"356":1,"357":1,"358":1,"470":1}}],["force",{"2":{"156":1}}],["forget",{"2":{"136":1}}],["formerly",{"2":{"407":1}}],["forms",{"2":{"346":1}}],["form",{"2":{"121":1,"133":1,"347":1}}],["format",{"2":{"112":1,"121":1,"122":2,"128":4,"253":2,"256":2,"257":1,"259":1,"260":1,"261":1,"262":2,"264":1,"265":1,"266":1,"339":1}}],["forum",{"2":{"117":1}}],["foreach",{"2":{"62":1,"63":1}}],["for",{"0":{"37":1,"92":1,"139":1,"172":1,"194":1,"284":1,"301":1,"303":1,"309":1,"311":1,"313":1,"321":1,"323":1,"435":1,"459":1,"480":1},"1":{"38":1,"39":1,"93":1,"140":1,"141":1,"142":1,"285":1,"286":1},"2":{"25":1,"26":7,"27":2,"32":3,"33":4,"34":1,"35":1,"37":1,"38":1,"40":1,"41":2,"45":1,"50":2,"55":1,"56":2,"57":1,"61":2,"62":3,"66":1,"69":2,"75":1,"76":1,"82":1,"85":3,"88":3,"92":2,"99":1,"100":3,"103":2,"104":2,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"117":2,"119":1,"120":3,"121":2,"123":3,"125":3,"126":1,"127":3,"128":1,"129":2,"131":2,"132":2,"133":2,"138":1,"141":1,"142":1,"144":1,"147":4,"148":1,"151":1,"152":1,"153":1,"155":1,"166":1,"168":1,"170":2,"173":1,"174":3,"177":3,"191":1,"192":1,"193":2,"194":2,"195":4,"196":1,"205":2,"207":2,"208":4,"214":1,"215":2,"216":2,"218":5,"226":1,"234":1,"237":1,"239":4,"241":1,"242":2,"245":1,"247":1,"248":1,"250":1,"252":1,"254":1,"255":1,"256":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"269":1,"272":1,"273":2,"274":2,"275":1,"276":2,"279":2,"280":3,"281":1,"289":1,"290":1,"292":1,"295":1,"297":2,"298":1,"300":1,"302":1,"303":3,"307":2,"308":3,"309":1,"310":1,"312":1,"313":1,"318":1,"319":1,"320":1,"322":1,"323":1,"327":2,"328":1,"329":2,"330":1,"335":2,"336":2,"337":1,"339":1,"344":1,"350":1,"353":2,"354":2,"357":2,"358":1,"360":1,"364":3,"366":1,"368":1,"376":1,"382":1,"388":3,"394":2,"396":1,"397":1,"401":1,"402":1,"403":1,"411":1,"414":1,"420":2,"424":1,"425":1,"427":1,"430":1,"432":2,"435":2,"436":1,"438":1,"445":1,"453":1,"454":3,"457":2,"460":1,"461":3,"463":3,"477":1,"478":1,"479":2,"480":2}}],["ipfs",{"2":{"327":1,"328":1,"329":3,"336":1}}],["iethclient",{"2":{"254":2,"255":1}}],["ie",{"2":{"156":1}}],["ignored",{"2":{"148":1,"161":1,"162":1,"163":1,"371":1}}],["iwallet",{"2":{"133":1,"244":2,"245":2,"246":2,"247":1}}],["iindexer",{"2":{"130":2}}],["icon",{"2":{"107":1,"109":1}}],["ios",{"0":{"114":1},"2":{"105":1,"107":1,"114":2}}],["io",{"2":{"93":1,"174":1,"444":1,"461":1}}],["imagination",{"2":{"299":1}}],["imagehashbytes32hash",{"2":{"384":1,"388":1}}],["imagehash",{"0":{"372":1},"1":{"373":1,"376":1},"2":{"364":1,"372":2,"375":1,"376":1,"383":3,"385":1,"387":2,"388":3,"394":3,"397":4}}],["images",{"0":{"328":1},"2":{"328":1,"329":1,"338":1}}],["image",{"0":{"373":1},"2":{"148":2,"160":3,"328":1,"329":1}}],["immediately",{"2":{"33":1}}],["imperative",{"2":{"394":1}}],["improperly",{"2":{"242":1}}],["improved",{"2":{"99":1,"453":1}}],["implicit",{"2":{"113":1}}],["implementing",{"2":{"280":1}}],["implement",{"0":{"42":1,"374":1},"2":{"45":1,"111":1,"348":1,"350":2,"353":1,"382":1,"423":1}}],["implementationaddressaddress",{"2":{"380":1}}],["implementations",{"2":{"244":1}}],["implementation",{"0":{"378":1,"381":1},"1":{"379":1,"380":1,"381":1},"2":{"34":1,"45":1,"130":1,"364":2,"365":1,"377":1,"379":4,"380":1,"381":4,"389":1}}],["implemented",{"2":{"34":1,"123":1,"125":1,"127":1,"255":1,"346":1,"350":1,"382":1}}],["implements",{"2":{"32":1}}],["important",{"0":{"243":1},"2":{"110":1,"111":1,"134":1,"247":1,"276":1}}],["imported",{"2":{"110":2,"136":1,"201":1,"211":1,"241":1}}],["importing",{"2":{"108":1}}],["import",{"2":{"26":2,"32":1,"37":2,"40":2,"45":2,"52":1,"62":6,"63":8,"64":2,"65":1,"79":1,"80":1,"86":1,"107":4,"108":2,"109":3,"148":2,"173":1,"174":5,"179":2,"201":1,"211":2,"221":1,"229":1,"230":2,"240":2,"241":2,"381":1,"401":1,"402":2,"422":1,"424":1,"425":1,"426":8,"427":1,"428":1,"438":1,"439":1,"460":1,"461":5,"465":2}}],["i",{"0":{"240":1,"241":1},"2":{"32":1,"88":1,"117":1,"305":2}}],["isthis",{"2":{"427":2}}],["issenttransactionresponse",{"2":{"438":3,"439":2}}],["issessionvalid",{"2":{"432":2}}],["issignedin",{"2":{"426":1}}],["issued",{"2":{"439":1}}],["issuer",{"2":{"427":2}}],["issue",{"2":{"239":1}}],["ismounted",{"2":{"240":2}}],["isn",{"2":{"109":1,"136":1}}],["isconnected",{"2":{"64":2}}],["isvalidsignature",{"2":{"403":3}}],["isvalidbooltrue",{"2":{"385":1}}],["isvalidimage",{"0":{"383":1},"1":{"384":1,"385":1},"2":{"383":1}}],["isvalidmessagesignature",{"2":{"182":1,"468":1}}],["isvalidethauthproof",{"2":{"40":1}}],["isvalid",{"2":{"40":2,"182":2,"383":1,"403":2,"432":2,"468":2}}],["is",{"0":{"298":1,"318":1},"2":{"26":2,"32":2,"33":2,"34":1,"35":1,"37":2,"40":6,"44":2,"51":2,"52":1,"55":4,"56":1,"57":1,"61":1,"62":1,"71":1,"85":1,"88":2,"92":1,"99":2,"100":3,"102":1,"103":3,"108":4,"109":2,"110":2,"111":3,"113":1,"117":1,"119":2,"120":3,"121":4,"122":3,"124":1,"126":1,"128":2,"129":2,"130":3,"131":2,"132":4,"133":3,"134":1,"135":1,"136":1,"138":1,"141":2,"143":2,"146":1,"147":6,"148":2,"153":2,"155":1,"157":1,"161":1,"162":1,"163":1,"166":1,"170":6,"173":3,"174":3,"176":2,"186":1,"187":3,"188":3,"189":1,"191":1,"192":4,"193":1,"194":2,"195":1,"196":1,"199":1,"200":1,"201":1,"203":1,"204":1,"206":1,"208":3,"209":1,"210":1,"211":1,"213":1,"214":1,"217":1,"218":3,"219":1,"220":1,"225":1,"226":1,"234":1,"235":1,"236":2,"237":1,"239":4,"240":5,"241":5,"242":2,"244":1,"245":2,"246":2,"251":5,"252":5,"253":1,"254":1,"256":4,"261":1,"265":1,"273":1,"274":3,"276":1,"279":2,"288":1,"289":3,"293":1,"294":1,"295":2,"298":1,"299":2,"305":1,"309":1,"314":1,"318":2,"319":3,"324":1,"334":1,"335":1,"337":2,"339":1,"340":1,"346":1,"354":1,"355":3,"357":1,"358":2,"359":1,"363":1,"365":2,"366":4,"371":1,"372":4,"377":1,"381":1,"382":2,"383":2,"386":1,"387":1,"388":4,"389":4,"390":2,"391":1,"392":1,"393":2,"394":4,"395":1,"396":1,"397":3,"401":2,"402":2,"403":5,"413":3,"414":2,"415":4,"421":2,"422":1,"424":1,"425":3,"426":7,"430":1,"432":1,"433":1,"434":4,"436":1,"438":1,"439":3,"443":1,"445":1,"453":2,"454":3,"456":1,"457":3,"460":3,"461":3,"462":2,"472":1,"473":3,"474":3,"475":1,"477":1,"478":4,"479":1,"480":2}}],["if",{"2":{"26":7,"27":1,"32":3,"33":2,"40":9,"42":1,"43":1,"45":1,"59":1,"77":1,"85":2,"92":1,"99":1,"100":2,"102":2,"103":2,"107":2,"108":1,"109":4,"110":1,"117":2,"119":2,"120":2,"122":2,"123":1,"125":1,"127":1,"128":3,"131":2,"132":2,"141":1,"144":1,"147":3,"148":4,"161":1,"162":1,"163":1,"166":1,"167":1,"170":2,"174":3,"177":1,"182":1,"184":2,"185":1,"194":3,"195":2,"198":1,"200":1,"206":1,"217":1,"240":1,"251":4,"252":4,"253":2,"254":1,"256":1,"274":1,"275":2,"276":2,"277":2,"278":1,"281":1,"285":1,"289":1,"292":1,"300":1,"305":1,"309":1,"310":1,"320":1,"336":1,"339":1,"350":1,"354":1,"357":1,"365":2,"380":1,"383":1,"385":1,"388":1,"391":1,"394":1,"396":1,"397":1,"401":1,"402":1,"403":3,"415":1,"424":1,"426":1,"431":1,"433":2,"434":2,"438":2,"439":2,"443":1,"447":1,"453":1,"454":2,"456":2,"457":2,"461":3,"463":1,"468":1,"470":2,"471":1,"480":3}}],["identifier",{"2":{"329":1,"359":1,"439":1}}],["identity",{"2":{"173":1,"174":1,"414":1,"415":1,"430":1,"431":1,"460":1,"461":1}}],["ideas",{"2":{"137":2}}],["ideal",{"2":{"109":1}}],["ids",{"2":{"126":1}}],["idtoken",{"2":{"111":1,"112":1,"113":1,"119":1,"424":2,"425":6,"426":2,"427":1,"428":1,"438":1,"439":1}}],["id",{"2":{"26":1,"32":1,"62":2,"63":2,"75":1,"76":1,"85":2,"86":1,"188":2,"189":1,"204":1,"214":1,"232":1,"253":3,"261":1,"265":1,"303":2,"328":1,"335":1,"336":2,"337":1,"339":1,"414":1,"426":1,"427":2,"428":2,"438":1,"474":2,"475":1}}],["iterate",{"2":{"401":2,"402":2,"403":1}}],["items",{"0":{"296":1,"305":1},"1":{"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1},"2":{"297":1,"299":2,"302":1,"303":2,"304":1,"305":4,"307":1,"309":1,"319":1,"327":1}}],["item",{"0":{"281":1,"284":1,"301":1,"326":1},"1":{"282":1,"283":1,"284":1,"285":2,"286":2,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1},"2":{"285":1,"300":1,"301":1,"310":1,"320":1,"328":1,"333":1}}],["itself",{"2":{"103":1,"187":1,"188":1,"380":1,"381":1,"388":1,"392":2,"425":1,"457":1,"473":1,"474":1}}],["its",{"2":{"86":1,"126":1,"148":1,"173":1,"241":1,"291":1,"302":1,"303":1,"308":1,"312":1,"322":1,"460":1}}],["it",{"0":{"134":1,"299":1},"2":{"26":3,"37":2,"40":2,"42":1,"43":1,"44":3,"52":1,"56":1,"86":1,"95":1,"96":1,"108":3,"109":3,"110":1,"111":3,"117":3,"119":1,"122":1,"128":5,"129":1,"133":1,"135":2,"136":2,"141":1,"147":1,"148":1,"173":1,"176":1,"180":1,"193":1,"195":1,"199":1,"205":1,"207":1,"209":1,"215":1,"216":1,"219":1,"235":1,"241":1,"243":1,"246":1,"249":1,"250":1,"256":1,"273":1,"274":3,"275":1,"276":1,"277":2,"279":1,"289":1,"293":3,"295":1,"299":1,"301":1,"302":1,"303":2,"311":1,"312":1,"318":3,"321":1,"322":1,"329":2,"334":1,"335":1,"336":3,"337":3,"339":1,"350":1,"353":2,"361":1,"369":1,"377":3,"378":1,"380":1,"388":2,"391":1,"394":3,"395":1,"396":1,"413":2,"414":5,"415":3,"422":1,"424":1,"433":2,"434":2,"438":1,"439":2,"449":1,"450":1,"460":1,"462":1,"466":1,"479":1}}],["inactive",{"2":{"415":1}}],["inherit",{"2":{"240":1,"280":1}}],["insert",{"2":{"344":1}}],["ins",{"2":{"141":1}}],["inspector",{"2":{"136":2}}],["instead",{"2":{"86":1,"99":1,"117":1,"173":1,"206":1,"217":1,"254":1,"275":1,"372":2,"389":1,"423":1,"453":1,"460":1}}],["instantiating",{"2":{"148":1}}],["instantiate",{"2":{"45":1}}],["instances",{"2":{"355":1,"435":1}}],["instance",{"2":{"52":1,"130":1,"148":2,"355":1,"359":1,"422":1,"425":2}}],["installing",{"0":{"61":1},"2":{"60":1,"109":1}}],["installation",{"0":{"50":1,"106":1,"200":1,"210":1,"220":1,"227":1,"420":1},"1":{"107":1,"108":1,"109":1}}],["install",{"0":{"92":1,"443":1},"1":{"93":1,"444":1},"2":{"35":1,"40":2,"45":2,"50":2,"61":5,"63":1,"79":3,"92":4,"97":1,"108":1,"147":1,"148":2,"169":1,"200":1,"206":2,"210":1,"217":2,"220":1,"227":1,"420":2,"443":2,"451":1}}],["installed",{"2":{"35":1,"93":1,"107":1,"147":1,"200":2,"210":1,"227":1,"444":1}}],["incorrect",{"2":{"388":1}}],["increase",{"2":{"147":1}}],["increment",{"2":{"104":3}}],["including",{"2":{"86":1,"126":1,"204":1,"214":1,"273":1,"285":1}}],["included",{"2":{"255":1,"302":1,"438":1}}],["includedpaymentproviders",{"0":{"164":1},"2":{"148":2,"164":1}}],["include",{"2":{"27":1,"69":1,"70":1,"121":1,"122":1,"129":1,"275":1,"293":1,"388":1}}],["includes",{"2":{"26":1,"147":1,"427":1,"438":1}}],["indicating",{"2":{"241":1}}],["individual",{"2":{"99":1,"319":1,"453":1}}],["indexer",{"2":{"104":1,"130":3,"302":1,"312":1,"322":1}}],["indexeddb",{"2":{"101":2,"455":2}}],["index",{"2":{"40":1,"438":1}}],["independently",{"2":{"413":1,"414":1,"415":1}}],["independent",{"2":{"33":1,"99":2,"407":1,"453":2}}],["inputs",{"2":{"313":1,"323":1}}],["input",{"2":{"74":1,"121":1,"365":1,"388":1}}],["inputted",{"2":{"37":1}}],["inline",{"2":{"74":1}}],["involve",{"2":{"437":1}}],["involves",{"2":{"132":1}}],["invoking",{"0":{"65":1}}],["invoke",{"2":{"64":1}}],["invalid",{"2":{"43":1,"184":1,"365":1,"371":1,"379":1,"470":1}}],["infura",{"2":{"174":2,"461":2}}],["infrastructure",{"2":{"55":1,"192":1,"478":1}}],["informs",{"2":{"241":1}}],["informed",{"2":{"103":1,"457":1}}],["information",{"2":{"50":1,"92":1,"102":1,"241":1,"355":1,"420":1,"456":1}}],["info",{"2":{"25":1,"27":1,"34":1,"35":1,"103":1,"117":2,"148":1,"353":1,"354":1,"357":1,"382":1,"457":1}}],["initial",{"0":{"375":1},"1":{"376":1},"2":{"364":1,"375":1,"377":1,"378":1}}],["initially",{"2":{"363":1}}],["initialization",{"0":{"229":1},"2":{"364":1}}],["initializes",{"2":{"241":1}}],["initialized",{"2":{"85":1,"229":1,"230":1,"241":1}}],["initialize",{"0":{"179":1,"465":1},"2":{"26":1,"35":2,"363":1,"389":1}}],["initiateauth",{"2":{"425":1}}],["initiated",{"2":{"170":1}}],["initiating",{"2":{"233":1}}],["initwallet",{"2":{"148":2}}],["init",{"2":{"35":3}}],["int256",{"2":{"276":1}}],["int",{"2":{"122":1,"264":1,"276":1}}],["into",{"0":{"196":1,"445":1},"1":{"197":1,"446":1},"2":{"35":1,"36":1,"40":1,"57":1,"59":2,"92":1,"108":1,"109":1,"117":1,"128":1,"129":1,"132":1,"160":1,"196":1,"198":2,"207":1,"216":1,"241":1,"251":1,"252":1,"256":1,"276":1,"319":1,"330":1,"443":1,"445":1,"447":2}}],["integers",{"2":{"276":1}}],["integer",{"2":{"166":1,"265":1,"276":2}}],["integrity",{"2":{"152":1,"173":1,"460":1}}],["integration",{"0":{"79":1,"239":1},"1":{"80":1,"81":1,"82":1,"83":1},"2":{"58":1,"87":1,"88":1,"104":1,"149":1,"197":1,"225":1,"446":1}}],["integrating",{"2":{"57":1,"98":1,"148":1,"196":1,"345":1,"445":1,"452":1}}],["integrated",{"2":{"104":1,"164":1,"165":1}}],["integrate",{"0":{"8":1,"13":1,"14":1,"19":1,"22":1,"23":1,"196":1,"445":1},"1":{"197":1,"446":1},"2":{"58":1,"59":1,"79":1,"84":1,"96":1,"194":1,"197":1,"198":1,"411":1,"446":1,"447":1,"450":1,"480":1}}],["intent",{"2":{"117":19,"148":3,"414":1}}],["intend",{"2":{"103":1,"457":1}}],["internally",{"2":{"383":1}}],["internal",{"2":{"383":1,"413":1}}],["internet",{"2":{"318":1}}],["interchangeable",{"2":{"319":1}}],["interchangeably",{"2":{"246":1}}],["interesting",{"2":{"317":1}}],["interpret",{"2":{"177":1,"463":1}}],["interoperability",{"2":{"147":1}}],["interfacing",{"2":{"61":1}}],["interface",{"2":{"26":1,"32":1,"40":1,"45":2,"130":1,"170":1,"186":2,"187":2,"188":2,"189":3,"244":2,"246":1,"247":1,"254":1,"255":1,"280":1,"382":3,"472":2,"473":2,"474":2,"475":3}}],["interacting",{"2":{"82":1,"121":1,"128":1,"276":1,"279":1}}],["interactions",{"0":{"123":1,"125":1,"127":1},"2":{"123":1,"125":1,"127":1,"177":1,"317":1,"463":1}}],["interaction",{"2":{"34":1,"183":1,"469":1}}],["interact",{"2":{"44":1,"52":1,"280":1,"302":1,"312":1,"322":1,"340":1,"413":1,"422":1,"423":1}}],["introduces",{"2":{"308":1}}],["introduction",{"0":{"104":1,"242":1,"297":1,"307":1,"317":1,"327":1},"1":{"105":1,"243":1,"298":1,"299":1,"300":1,"308":1,"309":1,"310":1,"318":1,"319":1,"320":1}}],["intro",{"0":{"0":1},"2":{"1":1}}],["in",{"0":{"4":1,"6":1,"11":1,"12":1,"17":1,"18":1,"42":1,"53":1,"71":1,"84":1,"112":1,"113":1,"141":1,"142":1,"295":1,"296":2,"306":1,"316":2,"326":1,"424":1,"425":1},"1":{"72":1,"73":1,"74":1,"75":1,"76":1,"85":1,"114":1,"115":1,"116":1,"117":1,"118":1,"297":2,"298":2,"299":2,"300":2,"301":2,"302":2,"303":2,"304":2,"305":2,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"317":2,"318":2,"319":2,"320":2,"321":2,"322":2,"323":2,"324":2,"325":2,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"425":1,"426":1},"2":{"26":2,"27":1,"33":5,"34":2,"35":7,"36":1,"37":6,"39":1,"40":6,"41":2,"45":1,"55":3,"57":1,"60":2,"64":2,"69":1,"71":1,"72":2,"73":2,"74":2,"75":4,"76":3,"77":4,"79":1,"83":1,"85":1,"86":1,"98":1,"100":1,"101":2,"102":1,"103":1,"104":1,"105":3,"107":4,"108":2,"109":6,"110":5,"111":1,"112":2,"113":5,"114":2,"115":2,"117":7,"119":3,"120":1,"121":2,"122":1,"124":1,"126":4,"128":6,"129":2,"131":1,"132":4,"133":3,"136":7,"138":1,"141":3,"142":2,"143":1,"148":2,"153":2,"158":2,"161":2,"162":2,"163":2,"164":1,"165":1,"170":1,"173":3,"174":3,"176":1,"177":2,"180":1,"184":1,"186":1,"187":2,"188":2,"189":1,"191":1,"192":3,"194":2,"195":1,"196":1,"204":1,"214":1,"224":1,"236":1,"239":2,"240":4,"241":7,"242":7,"244":2,"251":1,"252":1,"253":1,"254":2,"255":2,"256":2,"257":1,"259":1,"260":2,"261":1,"262":2,"264":1,"265":1,"266":1,"271":1,"272":1,"273":1,"274":1,"275":3,"276":1,"282":1,"291":1,"292":2,"293":2,"297":2,"298":2,"299":3,"301":2,"303":2,"304":1,"305":2,"307":2,"308":4,"309":3,"311":1,"313":1,"314":1,"315":1,"317":3,"318":1,"321":1,"323":1,"324":1,"327":1,"328":1,"329":1,"332":1,"337":1,"339":1,"342":1,"345":1,"348":1,"353":2,"355":1,"356":2,"357":1,"359":2,"360":1,"361":1,"365":1,"366":1,"376":1,"379":1,"382":1,"383":1,"388":1,"390":1,"391":1,"397":2,"402":1,"407":1,"412":1,"413":1,"414":1,"415":4,"424":3,"425":2,"426":1,"430":1,"431":2,"438":1,"445":1,"452":1,"454":1,"455":2,"456":1,"457":1,"460":3,"461":3,"462":1,"463":2,"466":1,"470":1,"472":1,"473":2,"474":2,"475":1,"477":1,"478":3,"480":2}}],["nitro",{"2":{"413":1,"425":1}}],["nick",{"2":{"353":1,"358":1}}],["npx",{"2":{"241":1}}],["npm",{"2":{"34":1,"61":1,"79":1,"92":2,"147":1,"200":2,"206":1,"210":2,"217":1,"220":2,"227":2,"443":2}}],["n",{"2":{"114":1,"115":1,"276":1,"401":1}}],["null",{"2":{"240":1,"438":1,"439":1}}],["nuget",{"2":{"109":1}}],["numbers",{"2":{"121":2}}],["number",{"2":{"40":3,"45":3,"77":1,"153":1,"155":1,"177":1,"205":1,"215":1,"232":1,"247":1,"255":1,"257":1,"259":1,"271":1,"275":1,"305":1,"337":1,"414":1,"463":1}}],["nanouniversaldeployer",{"0":{"358":1},"2":{"358":4}}],["navigating",{"2":{"136":1}}],["navigate",{"0":{"302":1,"312":1,"322":1},"2":{"37":1,"110":1,"117":1,"332":1,"335":1,"426":2}}],["nametyperangedescription",{"2":{"369":1}}],["nametyperangedescriptionthresholduint161",{"2":{"368":1}}],["nametypedescription",{"2":{"364":1,"365":1,"380":1,"384":1,"385":1,"388":1}}],["named",{"2":{"328":1}}],["name=",{"2":{"117":14}}],["name",{"0":{"289":1},"2":{"40":1,"41":1,"73":1,"85":2,"92":2,"109":1,"117":1,"128":1,"136":1,"144":1,"148":3,"150":1,"159":1,"173":1,"204":1,"214":1,"224":1,"274":1,"289":1,"328":2,"329":2,"331":1,"333":1,"339":1,"402":4,"438":1,"439":1,"443":2,"460":1}}],["names",{"2":{"35":1,"128":2,"338":1}}],["nativereceipt",{"2":{"438":1}}],["native",{"0":{"93":1,"444":1},"2":{"26":1,"130":1,"186":1,"187":1,"188":1,"189":1,"293":1,"412":1,"472":1,"473":1,"474":1,"475":1}}],["nested",{"0":{"404":1}}],["never",{"2":{"372":2,"439":1}}],["necessitating",{"2":{"308":1}}],["necessary",{"2":{"61":1,"289":1}}],["nethereum",{"2":{"104":1,"242":1}}],["networkid",{"0":{"265":1},"2":{"265":2}}],["networks",{"2":{"40":1,"45":1,"353":1,"354":2,"357":2}}],["network",{"0":{"223":1,"288":1},"2":{"26":2,"32":2,"37":1,"40":3,"44":1,"52":1,"103":2,"121":1,"128":2,"129":1,"144":1,"185":1,"204":1,"205":2,"214":1,"215":2,"221":1,"223":1,"267":1,"273":1,"288":2,"291":1,"293":3,"294":2,"302":1,"304":2,"312":1,"314":2,"322":1,"324":2,"332":1,"354":1,"356":1,"357":1,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":2,"439":5,"457":2,"471":1}}],["newimagehash",{"2":{"389":1,"395":1}}],["newestblock",{"2":{"264":2}}],["newer",{"2":{"108":1}}],["newlydeployedcontractaddress",{"2":{"132":1,"278":1}}],["newly",{"2":{"110":1,"136":1,"275":1,"295":1}}],["newtonsoft",{"2":{"109":2}}],["new",{"0":{"29":1,"283":1},"2":{"26":6,"32":2,"37":3,"40":12,"45":4,"52":2,"62":1,"63":1,"103":1,"104":1,"114":1,"115":1,"117":2,"119":1,"121":2,"122":2,"123":4,"124":2,"125":4,"126":4,"127":4,"128":7,"129":12,"130":1,"136":1,"145":1,"147":1,"174":4,"179":1,"180":2,"184":1,"186":2,"187":2,"188":2,"189":3,"201":1,"229":1,"241":1,"245":2,"246":1,"254":1,"264":1,"274":1,"275":4,"277":2,"279":2,"283":1,"289":1,"317":1,"331":1,"332":1,"354":1,"357":1,"364":1,"380":1,"381":1,"388":1,"422":2,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1,"457":1,"461":4,"465":1,"466":2,"470":1,"472":2,"473":2,"474":2,"475":3}}],["nextjs",{"0":{"207":1,"216":1,"238":1,"240":1},"1":{"239":1,"240":1,"241":1},"2":{"207":2,"208":2,"216":2,"218":2,"239":3,"240":1,"241":6}}],["next",{"0":{"59":1,"198":1,"239":1,"240":1,"241":1,"447":1},"2":{"26":1,"35":1,"38":1,"86":1,"108":1,"110":1,"112":1,"239":2,"241":2,"256":1,"329":1}}],["needs",{"2":{"137":1,"170":1,"309":1,"389":1,"397":1}}],["needing",{"2":{"33":1}}],["needed",{"2":{"26":1,"85":1,"100":1,"109":1,"119":1,"177":1,"454":1,"463":1}}],["need",{"2":{"26":1,"34":1,"38":1,"51":1,"52":1,"86":1,"88":1,"99":1,"108":1,"110":1,"123":1,"125":1,"127":1,"128":1,"132":1,"136":1,"170":1,"195":1,"242":1,"255":1,"274":1,"279":1,"289":1,"291":1,"292":1,"300":1,"304":1,"310":1,"314":1,"320":1,"324":1,"328":1,"340":1,"359":1,"366":1,"390":1,"392":1,"413":1,"421":1,"422":1,"423":2,"425":1,"431":1,"453":1}}],["normally",{"2":{"241":1}}],["normalizeasbiginteger",{"2":{"123":1,"129":1,"279":2}}],["normalize",{"2":{"121":2,"122":1,"128":2,"129":1,"273":1}}],["nobody",{"2":{"137":1,"413":1}}],["none",{"2":{"184":1,"256":1,"470":1}}],["non",{"0":{"319":1},"2":{"88":1,"103":1,"104":1,"119":1,"124":1,"128":1,"298":1,"307":1,"308":1,"319":1,"397":3,"411":1,"457":1}}],["nonce=",{"2":{"426":1}}],["nonceat",{"0":{"266":1},"2":{"266":2}}],["noncespace",{"2":{"33":2}}],["nonce",{"2":{"33":4,"155":1,"266":4,"273":1,"275":1,"424":1}}],["nodeurl",{"2":{"45":4}}],["nodes",{"2":{"37":1,"45":2,"255":1}}],["node",{"2":{"35":1,"42":1,"254":1}}],["nodejs",{"0":{"26":1,"27":1,"191":1,"477":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1},"2":{"32":1,"191":1,"477":1}}],["no",{"0":{"176":1,"462":1},"2":{"33":1,"35":1,"77":1,"104":1,"111":1,"116":1,"128":1,"133":1,"147":1,"256":1,"363":1,"389":1,"390":1,"414":1}}],["now",{"2":{"27":1,"33":1,"40":1,"43":1,"142":1,"145":2,"146":1,"295":1,"305":1,"330":1,"335":1,"339":1}}],["notable",{"2":{"187":1,"188":1,"473":1,"474":1}}],["nothing",{"2":{"170":1}}],["notice",{"2":{"133":1,"275":1,"353":1,"354":1,"357":1,"403":1}}],["note",{"2":{"52":1,"107":1,"108":1,"109":3,"111":1,"113":1,"117":2,"121":1,"122":1,"126":1,"136":1,"148":1,"173":1,"184":1,"185":1,"226":1,"253":1,"255":1,"256":1,"257":1,"260":1,"262":1,"264":1,"266":1,"275":1,"407":1,"422":1,"424":1,"460":1,"470":1,"471":1}}],["noted",{"2":{"42":1,"44":1}}],["not",{"2":{"26":4,"27":1,"32":1,"33":1,"34":1,"44":1,"110":1,"111":1,"113":1,"121":2,"122":2,"123":1,"125":1,"127":1,"128":1,"166":1,"174":1,"182":1,"242":1,"253":1,"255":1,"274":1,"279":1,"289":1,"292":1,"300":1,"310":1,"319":1,"320":1,"350":1,"353":1,"354":1,"355":1,"357":1,"358":1,"365":2,"388":2,"394":1,"397":1,"414":2,"430":1,"434":1,"439":1,"461":1,"468":1}}],["nfts",{"2":{"124":1,"307":1,"308":1}}],["nft",{"0":{"22":1,"187":1,"473":1},"2":{"187":2,"299":1,"308":1,"318":1,"335":1,"414":1,"473":2}}],["ecdsa",{"2":{"347":1}}],["economies",{"2":{"317":1}}],["ecosystem",{"2":{"87":1}}],["euros",{"2":{"319":1}}],["etc",{"2":{"204":1,"205":1,"215":1,"328":1,"413":1,"414":1,"424":1}}],["ethtransaction",{"2":{"249":1,"250":1,"251":2,"252":2,"273":1,"275":4,"279":2}}],["ethwallet",{"2":{"245":4,"246":1,"251":2,"252":2}}],["ethauth",{"2":{"153":1,"154":1,"155":1,"173":1,"174":7,"460":1,"461":7}}],["ethauthproofstring",{"2":{"40":2}}],["ethauthproof",{"0":{"40":1,"44":1},"1":{"41":1,"42":1,"43":1,"44":1},"2":{"34":1,"44":1}}],["eth",{"2":{"121":3,"148":1,"273":1}}],["ethkit",{"0":{"56":1,"193":1,"479":1},"2":{"56":2,"193":2,"479":2}}],["ether",{"2":{"402":1}}],["ethereum",{"0":{"169":1,"401":1},"2":{"26":1,"32":1,"56":1,"88":1,"96":1,"147":3,"148":1,"193":1,"194":1,"195":1,"242":1,"255":1,"346":1,"347":1,"401":1,"411":1,"450":1,"479":1,"480":1}}],["etherscan",{"2":{"128":1}}],["ethers",{"0":{"168":1,"393":1,"394":1},"2":{"26":4,"32":2,"33":6,"37":7,"40":2,"45":8,"56":1,"61":3,"92":4,"93":2,"147":1,"174":3,"179":2,"180":3,"184":1,"186":2,"187":2,"188":2,"189":3,"193":1,"200":2,"206":3,"210":2,"217":3,"220":2,"227":1,"376":7,"381":4,"389":4,"395":2,"443":4,"444":2,"461":3,"465":2,"466":3,"470":1,"472":2,"473":2,"474":2,"475":3,"479":1}}],["equal",{"2":{"251":1,"252":1}}],["equally",{"2":{"189":1,"475":1}}],["equivalent",{"2":{"55":1,"192":1,"478":1}}],["ephemeral",{"2":{"176":1,"177":1,"180":1,"462":1,"463":1,"466":1}}],["eip1271",{"2":{"174":1,"194":1,"461":1,"480":1}}],["eip",{"2":{"174":1,"355":1,"369":1,"388":1,"461":1}}],["eip712",{"2":{"154":1,"173":4,"460":4}}],["either",{"2":{"37":1,"44":1,"86":1,"99":1,"119":1,"128":1,"129":1,"189":1,"251":1,"252":1,"378":1,"414":1,"436":1,"437":1,"453":1,"475":1}}],["ever",{"2":{"274":1}}],["every",{"2":{"176":1,"299":1,"319":1,"367":1,"369":1,"372":1,"377":1,"381":1,"462":1}}],["everywhere",{"2":{"147":1}}],["everything",{"2":{"143":1,"242":1,"302":1,"312":1,"322":1}}],["events",{"2":{"119":1,"120":2,"131":1,"132":3,"435":1}}],["event",{"2":{"119":1,"131":1,"148":1}}],["even",{"2":{"99":1,"103":1,"108":1,"189":1,"276":1,"380":1,"388":1,"453":1,"457":1,"475":1}}],["evm",{"2":{"121":1,"122":1,"128":2,"148":1,"242":2,"245":1,"276":1,"353":2,"411":1}}],["element",{"2":{"114":1,"115":1,"426":2}}],["elements",{"2":{"111":1}}],["elsewhere",{"2":{"239":1}}],["else",{"2":{"40":2,"182":1,"184":1,"413":1,"439":1,"468":1,"470":1}}],["essence",{"2":{"361":1}}],["essentially",{"2":{"130":1,"132":1,"336":1}}],["essentials",{"2":{"107":1,"109":1}}],["estimations",{"2":{"293":1}}],["estimate",{"2":{"263":1}}],["estimategas",{"0":{"263":1},"2":{"263":1}}],["established",{"2":{"431":1}}],["establish",{"2":{"112":1}}],["establishing",{"2":{"111":1}}],["edit",{"2":{"109":1,"114":1,"115":1,"117":1,"136":1}}],["editor",{"2":{"107":1,"113":1}}],["efficient",{"2":{"308":1,"309":1}}],["efforts",{"2":{"133":1}}],["effortlessly",{"2":{"57":1,"58":1,"196":1,"197":1,"445":1,"446":1}}],["effectively",{"2":{"101":1,"455":1}}],["ealiest",{"2":{"257":1,"260":1,"262":1,"264":1,"266":1}}],["earliest",{"2":{"256":2}}],["earlier",{"2":{"108":1,"305":1,"308":1,"336":1}}],["ease",{"2":{"308":1}}],["easiest",{"2":{"143":1}}],["easier",{"2":{"137":1,"353":1}}],["easily",{"2":{"78":1,"109":1,"122":2,"124":1,"126":1,"173":1,"194":1,"235":1,"245":1,"246":1,"319":1,"327":1,"460":1,"480":1}}],["easy",{"2":{"111":1,"129":1,"138":1,"189":1,"318":1,"340":1,"348":1,"475":1}}],["each",{"2":{"33":1,"99":2,"129":2,"142":2,"143":1,"177":1,"251":1,"252":1,"299":1,"303":2,"319":2,"328":1,"329":3,"353":2,"356":1,"411":2,"412":1,"453":2,"463":1}}],["emitted",{"2":{"438":1}}],["empower",{"2":{"109":1}}],["emailed",{"2":{"112":1}}],["email",{"0":{"112":1,"425":1,"430":1},"2":{"74":1,"100":2,"103":2,"112":1,"119":1,"141":1,"158":1,"162":3,"163":1,"413":1,"414":1,"424":1,"425":13,"430":1,"431":1,"432":2,"433":1,"454":2,"457":2}}],["embedded",{"0":{"13":1,"19":1,"63":1,"65":1,"411":1},"1":{"412":1,"413":1,"414":1,"415":1},"2":{"47":1,"48":1,"50":2,"51":3,"52":1,"58":2,"60":1,"61":1,"63":1,"65":1,"77":1,"92":2,"104":2,"111":2,"197":2,"328":1,"411":2,"412":1,"417":1,"418":1,"420":2,"421":3,"422":1,"423":1,"425":1,"429":1,"439":1,"446":2}}],["err",{"2":{"40":7,"45":2,"174":2,"461":2}}],["errors",{"2":{"239":1}}],["error",{"0":{"239":1},"2":{"26":2,"37":1,"128":1,"426":6,"439":3}}],["erc1271",{"2":{"403":1}}],["erc1155data",{"2":{"189":2,"475":2}}],["erc1155contractaddress",{"2":{"188":2,"189":1,"474":2,"475":1}}],["erc1155interface",{"2":{"188":5,"189":2,"474":5,"475":2}}],["erc1155tokenaddress",{"2":{"126":1,"129":1,"188":1,"474":1}}],["erc1155s",{"2":{"108":1}}],["erc1155",{"0":{"37":1,"127":1},"1":{"38":1,"39":1},"2":{"34":1,"40":1,"41":1,"126":5,"127":9,"279":1,"280":1,"285":1,"289":1}}],["erc21",{"2":{"125":1}}],["erc20contract",{"2":{"275":6,"277":4}}],["erc20data",{"2":{"189":2,"475":2}}],["erc20tokenaddress",{"2":{"122":1,"129":2}}],["erc20",{"0":{"123":1},"2":{"122":5,"123":9,"128":1,"129":1,"274":1,"275":2,"277":2,"279":8,"280":1,"285":1,"289":1,"351":1}}],["erc20interface",{"2":{"33":2,"186":5,"189":2,"472":5,"475":2}}],["erc",{"0":{"186":1,"187":1,"188":1,"298":1,"308":2,"318":1,"401":1,"402":1,"472":1,"473":1,"474":1},"2":{"26":1,"186":3,"187":3,"188":3,"297":1,"298":1,"301":2,"303":1,"307":2,"308":3,"309":3,"311":1,"317":1,"318":2,"319":2,"321":1,"333":1,"335":1,"400":1,"401":1,"402":1,"472":3,"473":3,"474":3}}],["erc721data",{"2":{"189":2,"475":2}}],["erc721contractaddress",{"2":{"187":2,"189":1,"473":2,"475":1}}],["erc721",{"0":{"125":1},"2":{"40":1,"41":1,"124":3,"125":8,"279":1,"280":1,"285":1,"289":1}}],["erc721tokenaddress",{"2":{"26":1,"32":1,"124":1,"129":1,"187":1,"473":1}}],["erc721interface",{"2":{"26":2,"32":2,"187":5,"189":2,"473":5,"475":2}}],["examine",{"2":{"128":1}}],["examples",{"0":{"208":1,"218":1,"349":1,"352":1},"2":{"148":1}}],["example",{"0":{"66":1,"225":1,"234":1,"237":1,"370":1},"2":{"27":1,"32":2,"33":1,"45":1,"66":1,"82":1,"83":1,"85":2,"100":1,"120":1,"121":2,"123":1,"125":1,"127":1,"128":1,"129":1,"131":1,"148":1,"150":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"170":1,"173":1,"174":1,"185":1,"194":1,"195":1,"199":1,"207":2,"208":1,"209":1,"216":2,"219":1,"225":1,"235":1,"237":1,"240":3,"241":4,"275":3,"276":1,"277":3,"279":3,"295":1,"301":1,"303":1,"305":1,"313":1,"315":1,"323":1,"357":1,"370":1,"414":1,"425":1,"454":1,"460":1,"461":1,"471":1,"480":1}}],["exists",{"2":{"354":1,"357":1}}],["exist",{"2":{"117":2,"424":1}}],["existing",{"0":{"92":1},"1":{"93":1},"2":{"37":1,"85":1,"113":1}}],["exchangeable",{"2":{"319":1}}],["excellent",{"2":{"147":1}}],["exception",{"2":{"255":1,"276":1}}],["exceptions",{"2":{"242":3}}],["except",{"2":{"113":1,"425":1}}],["exclude",{"2":{"128":1}}],["excluding",{"2":{"105":1}}],["extra",{"2":{"194":2,"242":1,"480":2}}],["extremely",{"2":{"111":1,"129":1}}],["external",{"2":{"379":1,"387":1,"413":1}}],["externally",{"0":{"347":1},"1":{"348":1,"349":1},"2":{"88":1,"346":1,"347":1,"392":1}}],["extend",{"2":{"109":1,"390":1}}],["extensions",{"2":{"148":1}}],["extension",{"0":{"97":1,"169":1,"451":1},"2":{"97":1,"147":2,"168":1,"169":1,"451":1}}],["executing",{"2":{"355":1,"358":1,"394":2,"437":1}}],["executioncontext",{"2":{"40":2}}],["execute",{"2":{"293":1,"304":1,"314":1,"324":1}}],["executed",{"2":{"25":1,"33":2,"186":1,"187":1,"188":1,"363":1,"438":1,"439":2,"472":1,"473":1,"474":1}}],["expires",{"2":{"439":1}}],["expiresat",{"2":{"427":2}}],["expiry",{"0":{"153":1},"2":{"153":2}}],["explicitly",{"2":{"241":1}}],["explanation",{"2":{"207":2,"216":2}}],["exploring",{"2":{"146":1}}],["explorer",{"2":{"128":1}}],["explore",{"2":{"58":1,"197":1,"446":1}}],["expose",{"2":{"130":1}}],["exposes",{"2":{"120":1}}],["exported=",{"2":{"117":1}}],["export",{"2":{"40":2,"85":1,"229":1,"240":1,"241":1,"406":1,"426":3}}],["expanding",{"2":{"87":1}}],["expand",{"2":{"37":1,"114":1,"115":1,"303":1,"313":1,"323":1,"336":1,"337":1}}],["experimental",{"2":{"239":1,"241":1}}],["experiment",{"2":{"136":1}}],["experiences",{"2":{"413":1}}],["experience",{"2":{"34":1,"57":1,"58":1,"67":1,"103":1,"147":1,"173":1,"177":1,"196":1,"197":1,"242":1,"445":1,"446":1,"457":1,"460":1,"463":1}}],["expects",{"2":{"276":1}}],["expect",{"2":{"132":1,"133":1}}],["expected",{"2":{"26":1,"253":1,"364":1}}],["enclave",{"2":{"413":1}}],["encrypted",{"2":{"413":1}}],["encourage",{"2":{"135":1,"280":1}}],["encodetypeddatadigest",{"2":{"402":2}}],["encode",{"2":{"128":1,"186":2,"187":2,"188":2,"381":1,"402":1,"403":1,"472":2,"473":2,"474":2}}],["encoded",{"2":{"128":1,"401":2,"402":1,"403":1}}],["encodefunctiondata",{"2":{"26":1,"32":1,"33":2,"45":1,"186":3,"187":3,"188":3,"189":3,"389":2,"395":1,"472":3,"473":3,"474":3,"475":3}}],["encoding",{"0":{"399":1,"400":1},"1":{"401":1,"402":1,"403":1},"2":{"128":2,"274":1}}],["encoding=",{"2":{"117":2}}],["endingblocknumber",{"2":{"260":1}}],["endpoints",{"2":{"344":1}}],["endpoint",{"2":{"43":1,"339":2}}],["entirely",{"2":{"135":1}}],["entire",{"2":{"128":1,"241":1,"274":1,"330":1}}],["entered",{"2":{"112":1}}],["enter",{"0":{"144":1},"2":{"35":1,"36":1,"107":1,"112":1,"114":1,"115":1,"144":1,"303":3,"313":2,"323":2,"337":1}}],["ensure",{"2":{"103":2,"107":1,"173":1,"359":1,"388":1,"457":2,"460":1}}],["ensures",{"2":{"32":1}}],["enable",{"2":{"113":1,"117":1}}],["enables",{"2":{"78":1,"411":1}}],["enabling",{"2":{"58":1,"197":1,"241":1,"413":1,"446":1}}],["enjoy",{"2":{"58":1,"87":1,"197":1,"446":1}}],["env",{"2":{"40":20,"45":11,"52":2,"422":2,"424":2,"425":2,"426":2,"427":2,"428":2,"438":2,"439":2}}],["environment",{"0":{"35":1,"41":1},"1":{"36":1},"2":{"34":1,"35":1,"40":5,"41":1,"42":1,"356":1}}],["enforce",{"2":{"26":3,"414":1}}],["e",{"2":{"26":1,"32":1,"82":1,"88":1,"117":1,"123":1,"125":1,"127":1,"133":1,"177":1,"205":1,"215":1,"274":1,"351":1,"413":1,"463":1}}],["eoawallet",{"2":{"245":2}}],["eoas",{"2":{"88":1,"346":1,"347":1,"350":1}}],["eoa",{"0":{"40":1},"1":{"41":1,"42":1,"43":1,"44":1},"2":{"26":7,"32":2,"34":1,"37":5,"40":1,"41":1,"45":1,"56":1,"193":1,"245":1,"246":1,"369":1,"479":1}}],["otp",{"2":{"414":1,"425":4}}],["otherrainbowkitwallets",{"2":{"211":1}}],["otherconnectors",{"2":{"201":1}}],["others",{"2":{"87":1}}],["other",{"0":{"194":1,"480":1},"2":{"61":1,"85":1,"86":1,"111":1,"114":1,"115":1,"167":1,"174":1,"194":1,"195":1,"201":1,"203":1,"211":1,"213":1,"229":1,"230":1,"294":1,"304":1,"314":1,"318":1,"319":1,"324":1,"337":1,"377":1,"380":1,"388":1,"414":2,"461":1,"480":1}}],["otherwise",{"2":{"37":1,"256":1,"401":1,"402":1,"403":1,"433":2}}],["oauth",{"2":{"414":1,"426":4}}],["omit",{"2":{"253":1}}],["omitted",{"2":{"152":1}}],["older",{"0":{"206":1,"217":1},"2":{"206":1,"207":1,"208":2,"216":1,"217":1,"218":1}}],["os",{"2":{"170":2}}],["obvious",{"2":{"128":1}}],["obtained",{"2":{"425":1,"426":1}}],["obtain",{"2":{"111":1,"120":1,"131":1,"132":1,"364":1,"366":1,"425":2,"426":2}}],["objects",{"2":{"126":1}}],["objectdark",{"2":{"69":1}}],["object",{"0":{"42":1},"2":{"27":1,"42":1,"45":1,"69":2,"71":1,"80":1,"81":1,"107":2,"109":1,"120":1,"123":1,"125":1,"127":1,"128":1,"131":1,"132":1,"136":3,"149":1,"173":2,"253":1,"254":1,"274":2,"275":3,"297":1,"438":2,"439":1,"460":2}}],["oidc",{"2":{"111":1,"113":1}}],["over",{"2":{"88":1,"102":1,"103":1,"329":1,"338":1,"456":1,"457":1}}],["overview",{"0":{"78":1,"340":1,"412":1},"1":{"413":1,"414":1},"2":{"344":1}}],["override",{"2":{"69":1,"379":1,"383":1,"387":1,"403":1}}],["overwritten",{"2":{"69":1,"109":1}}],["ownable",{"0":{"280":1},"2":{"280":4}}],["owned",{"0":{"347":1},"1":{"348":1,"349":1},"2":{"77":1,"88":1,"102":1,"346":1,"347":1,"456":1}}],["ownership",{"2":{"26":1,"44":1}}],["owner",{"0":{"290":1},"2":{"26":1,"88":1,"290":1,"295":1,"411":1}}],["own",{"0":{"286":1},"2":{"58":1,"85":1,"99":1,"104":1,"133":1,"135":1,"137":1,"197":1,"242":1,"254":1,"279":1,"286":1,"297":1,"299":1,"303":2,"313":1,"317":1,"323":1,"324":1,"339":1,"344":1,"446":1,"453":1}}],["outside",{"2":{"123":1,"125":1,"127":1,"148":1}}],["outlined",{"2":{"45":1}}],["out",{"2":{"40":1,"45":1,"47":1,"58":1,"59":1,"82":1,"90":1,"108":2,"119":1,"120":1,"131":1,"132":1,"136":1,"137":1,"148":1,"174":1,"195":1,"197":1,"198":1,"303":3,"342":1,"344":1,"401":1,"402":1,"417":1,"441":1,"446":1,"447":1,"461":1}}],["our",{"2":{"26":1,"47":2,"48":1,"56":1,"57":1,"58":1,"59":1,"90":1,"104":1,"105":1,"108":3,"109":1,"111":2,"113":1,"122":2,"123":1,"124":2,"125":1,"126":2,"127":1,"129":1,"130":1,"136":2,"137":1,"193":1,"195":3,"196":1,"197":1,"198":1,"241":1,"242":1,"254":1,"255":1,"274":1,"275":2,"277":2,"279":1,"285":1,"307":1,"342":1,"343":1,"417":2,"418":1,"441":1,"445":1,"446":1,"447":1,"479":1}}],["o",{"2":{"26":2}}],["opcode",{"2":{"376":1}}],["opcodes",{"2":{"353":1}}],["operated",{"2":{"413":1}}],["operate",{"2":{"412":1}}],["operation",{"2":{"379":1,"391":1,"394":1,"424":1}}],["operations",{"2":{"205":1,"215":1,"308":1}}],["operational",{"2":{"52":1,"422":1}}],["openwithoptions",{"2":{"148":2}}],["openwalletintent",{"2":{"148":1}}],["openwallet",{"2":{"148":3}}],["opened",{"2":{"133":1,"424":1,"425":1}}],["openidauthentication",{"2":{"105":1}}],["opening",{"0":{"80":1},"2":{"108":1,"129":1,"152":1,"312":1,"322":1}}],["openning",{"2":{"26":2}}],["open",{"2":{"26":2,"32":1,"37":2,"56":1,"65":2,"80":1,"107":1,"111":2,"114":1,"115":1,"133":1,"148":2,"157":1,"165":1,"193":1,"195":1,"283":1,"286":1,"302":1,"331":1,"425":2,"426":1,"479":1}}],["option",{"2":{"26":2,"44":1,"141":1,"147":2,"149":1,"162":1,"167":1,"170":1,"241":1,"279":1}}],["options",{"0":{"67":1,"68":1,"149":1,"204":1,"205":1,"231":1},"1":{"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"232":1,"233":1},"2":{"26":2,"32":1,"40":1,"59":1,"67":2,"75":2,"76":2,"85":2,"98":2,"99":1,"141":1,"148":2,"163":1,"198":1,"201":1,"204":1,"214":2,"229":2,"285":1,"302":4,"312":4,"322":4,"345":2,"447":1,"452":2,"453":1}}],["optionally",{"2":{"93":1,"121":1,"123":1,"125":1,"127":1,"148":1,"444":1}}],["optional",{"0":{"204":1,"205":1,"214":1,"215":1,"223":1,"224":1,"233":1},"2":{"26":2,"32":1,"63":1,"122":1,"155":1,"253":1}}],["origin",{"0":{"152":1},"2":{"40":1,"152":1}}],["or",{"0":{"168":1},"2":{"26":4,"32":1,"34":2,"37":4,"38":1,"40":3,"41":1,"44":1,"59":1,"61":2,"69":1,"79":2,"82":1,"85":1,"86":1,"92":2,"95":1,"96":1,"99":1,"100":3,"103":3,"105":1,"107":3,"109":1,"111":1,"113":1,"117":2,"119":1,"120":1,"121":2,"128":3,"129":1,"131":1,"132":3,"137":1,"141":1,"146":1,"147":1,"148":1,"160":1,"167":1,"174":2,"176":1,"177":1,"182":1,"184":1,"189":1,"191":1,"194":2,"195":3,"198":1,"200":1,"206":1,"207":1,"210":1,"216":3,"217":1,"220":1,"251":2,"252":2,"257":1,"260":1,"262":1,"264":1,"266":1,"273":1,"274":1,"275":2,"276":1,"277":1,"279":1,"289":1,"299":1,"302":1,"303":1,"312":1,"318":1,"319":3,"322":1,"337":1,"346":1,"353":1,"360":1,"365":1,"366":1,"369":1,"378":1,"382":1,"397":1,"411":1,"413":1,"414":1,"415":2,"431":1,"434":2,"436":2,"437":1,"438":1,"439":1,"443":2,"447":1,"449":1,"450":1,"453":1,"454":3,"457":3,"461":2,"462":1,"463":1,"468":1,"470":1,"475":1,"477":1,"480":2}}],["orderbook",{"2":{"343":1,"344":1}}],["ordersummaryitems",{"0":{"83":1},"2":{"81":1,"83":2}}],["order",{"0":{"83":1},"2":{"26":1,"33":1,"34":1,"35":1,"37":1,"39":1,"40":1,"75":1,"76":1,"83":1,"108":1,"113":1,"128":1,"272":1,"273":1,"275":1,"291":1,"304":1,"314":1,"324":1,"359":1,"376":1,"412":1,"424":1}}],["orgs",{"2":{"25":1,"34":1}}],["offers",{"2":{"308":1,"340":1,"411":1}}],["offer",{"2":{"147":1,"195":1,"413":1}}],["offered",{"2":{"130":1}}],["official",{"2":{"75":1,"76":1,"84":1,"85":1,"240":1}}],["often",{"2":{"126":1,"307":1,"318":1}}],["of",{"0":{"189":1,"206":1,"217":1,"240":1,"371":1,"475":1},"2":{"26":3,"32":1,"33":2,"34":1,"35":1,"37":2,"40":2,"44":1,"47":1,"52":1,"55":2,"56":2,"57":2,"58":2,"70":1,"72":1,"73":1,"75":1,"76":1,"77":1,"83":1,"85":2,"86":2,"87":1,"88":1,"92":1,"99":3,"100":2,"101":1,"102":1,"103":2,"108":4,"109":1,"110":1,"120":2,"121":4,"123":3,"124":1,"125":3,"126":1,"127":3,"128":4,"129":4,"130":3,"132":1,"133":2,"134":1,"136":1,"137":1,"141":1,"142":2,"146":1,"147":7,"148":1,"150":1,"152":1,"159":2,"160":1,"164":1,"165":1,"168":1,"170":1,"173":1,"177":1,"186":1,"187":1,"188":1,"192":2,"193":2,"195":3,"196":2,"197":2,"200":2,"201":1,"204":1,"206":3,"207":1,"208":3,"211":1,"214":2,"216":1,"217":3,"224":1,"225":2,"226":1,"233":1,"239":1,"240":3,"241":5,"243":1,"244":2,"246":1,"247":2,"251":2,"252":2,"253":1,"254":1,"255":3,"256":2,"263":1,"271":1,"274":1,"275":2,"277":1,"279":5,"285":2,"286":1,"291":1,"292":1,"293":2,"295":2,"297":1,"298":2,"302":1,"303":7,"305":2,"309":1,"312":2,"313":1,"315":1,"317":1,"318":1,"322":2,"323":1,"329":1,"331":2,"332":1,"335":3,"337":1,"344":1,"347":2,"350":2,"353":1,"355":2,"356":1,"357":1,"358":2,"359":1,"361":1,"365":2,"366":2,"367":1,"368":2,"369":3,"370":1,"371":4,"372":2,"375":2,"376":2,"377":3,"379":3,"380":2,"381":1,"382":5,"383":1,"384":1,"386":1,"388":5,"389":2,"393":1,"394":3,"396":1,"397":1,"400":1,"401":1,"402":1,"407":1,"411":3,"412":4,"414":4,"415":3,"417":1,"422":1,"423":1,"424":1,"427":1,"428":1,"431":1,"432":1,"438":2,"443":1,"445":2,"446":2,"453":3,"454":2,"455":1,"456":1,"457":2,"460":1,"463":1,"472":1,"473":1,"474":1,"478":2,"479":2}}],["onvalidationrequired",{"0":{"434":1},"2":{"434":2,"435":2,"436":3}}],["onboard",{"0":{"219":1},"1":{"220":1,"221":1,"222":1,"223":1,"224":1,"225":1},"2":{"147":1,"195":1,"219":3,"220":2,"221":3,"225":1}}],["onboarding",{"2":{"57":1,"58":1,"110":1,"147":1,"196":1,"197":1,"445":1,"446":1}}],["ondeploycontractfailedhandler",{"2":{"132":2}}],["ondeploycontractfailed",{"2":{"132":2}}],["ondeploycontractcompletehandler",{"2":{"132":2}}],["ondeploycontractcomplete",{"2":{"132":2}}],["onsuccess=",{"2":{"426":1}}],["onsessionstatechanged",{"2":{"426":2}}],["onsendtransactionfailedhandler",{"2":{"120":2}}],["onsendtransactionfailed",{"2":{"120":2,"132":1}}],["onsendtransactioncompletehandler",{"2":{"120":2}}],["onsendtransactioncomplete",{"2":{"120":2,"132":1}}],["onsignmessagecompletehandler",{"2":{"131":2}}],["onsignmessagecomplete",{"2":{"131":2}}],["onwaaswalletcreatedhander",{"2":{"120":1,"131":1,"132":1}}],["onwaaswalletcreatedhandler",{"2":{"119":3}}],["onwaaswalletcreated",{"2":{"119":2}}],["onmeta",{"2":{"98":1,"345":1,"452":1}}],["onmigration",{"2":{"26":1}}],["onchainreader",{"2":{"174":1,"461":1}}],["onclick=",{"2":{"64":1,"65":1,"80":1}}],["onclick",{"2":{"64":2,"65":2,"80":2,"148":1}}],["once",{"2":{"26":1,"35":1,"45":1,"51":1,"64":1,"100":1,"112":1,"113":1,"119":1,"142":1,"145":1,"148":1,"170":1,"240":1,"246":1,"251":1,"252":1,"283":1,"293":1,"301":1,"303":1,"311":1,"314":1,"321":1,"324":1,"334":1,"355":1,"358":1,"395":1,"421":1,"425":1,"433":1,"454":1}}],["onlyself",{"2":{"379":1,"380":1,"387":1,"388":1}}],["only",{"0":{"241":1},"2":{"37":2,"51":1,"61":1,"77":1,"92":1,"98":1,"99":2,"103":1,"105":2,"109":2,"119":1,"129":1,"161":1,"167":1,"184":1,"185":2,"187":1,"188":1,"239":1,"240":1,"251":1,"252":1,"274":1,"279":1,"345":1,"353":1,"366":1,"378":1,"380":1,"382":1,"388":1,"411":1,"414":3,"421":1,"427":1,"439":1,"443":1,"452":1,"453":2,"457":1,"470":1,"471":2,"473":1,"474":1}}],["one",{"0":{"430":1},"2":{"26":3,"32":1,"35":1,"37":3,"88":1,"99":1,"100":1,"117":1,"121":1,"129":1,"132":1,"143":1,"146":1,"159":1,"170":1,"186":1,"187":1,"188":1,"195":1,"240":1,"241":1,"251":1,"252":1,"285":1,"298":1,"303":1,"335":1,"378":1,"383":1,"396":1,"412":1,"425":1,"430":1,"431":1,"453":1,"454":1,"472":1,"473":1,"474":1}}],["onramp",{"0":{"23":1}}],["on",{"0":{"21":1,"22":1,"23":1,"98":1,"329":1,"332":1,"345":1,"405":1,"452":1},"2":{"26":1,"33":1,"34":1,"35":1,"43":1,"44":1,"50":1,"57":1,"70":1,"85":2,"86":1,"88":1,"92":3,"95":1,"96":2,"98":5,"99":2,"105":1,"107":5,"108":2,"109":1,"110":1,"111":1,"112":2,"113":1,"121":1,"122":1,"128":5,"133":1,"135":1,"136":1,"140":1,"142":1,"144":1,"146":1,"147":5,"148":3,"150":1,"167":1,"168":1,"174":4,"177":1,"182":1,"184":1,"186":1,"187":1,"188":1,"191":1,"194":1,"195":1,"196":1,"206":1,"207":3,"216":3,"217":1,"239":4,"240":2,"241":1,"242":2,"256":3,"279":1,"280":1,"281":1,"282":1,"291":1,"293":2,"294":1,"302":1,"303":1,"304":2,"307":2,"309":2,"312":2,"314":2,"318":1,"319":1,"322":2,"324":2,"328":1,"330":1,"331":2,"332":2,"333":1,"334":1,"335":2,"336":1,"345":5,"347":1,"353":2,"354":1,"357":1,"365":1,"366":1,"372":1,"377":1,"381":1,"382":1,"390":1,"392":1,"394":1,"403":1,"411":1,"413":1,"415":1,"420":1,"429":1,"439":2,"443":2,"445":1,"449":1,"450":2,"452":5,"453":2,"461":4,"463":1,"468":1,"470":1,"472":1,"473":1,"474":1,"477":1,"480":1}}],["blob",{"2":{"241":1}}],["blockcount",{"2":{"264":2}}],["blockchains",{"2":{"242":1}}],["blockchain",{"0":{"120":1,"130":1},"1":{"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1},"2":{"58":1,"88":1,"99":1,"120":3,"130":1,"148":1,"197":1,"411":1,"446":1,"453":1}}],["blockrange",{"0":{"260":1},"2":{"260":2}}],["blockhash",{"2":{"258":1,"271":1}}],["blockbyhash",{"0":{"258":1},"2":{"258":1}}],["blockbynumber",{"0":{"257":1},"2":{"257":1}}],["blocks",{"2":{"242":2,"260":1,"264":1}}],["blocknative",{"2":{"219":1}}],["blocknumbers",{"2":{"260":1}}],["blocknumber",{"0":{"259":1},"2":{"34":1,"256":5,"257":2,"259":2,"260":1,"262":3,"264":2,"266":3}}],["blocking",{"2":{"148":2}}],["block",{"2":{"45":1,"128":1,"148":1,"256":3,"257":4,"258":4,"259":1,"260":2,"271":2,"438":1}}],["brave",{"2":{"427":1}}],["branded",{"2":{"414":1}}],["brackets",{"2":{"274":1}}],["breaches",{"2":{"403":1}}],["breaking",{"2":{"104":3,"226":1}}],["bring",{"0":{"286":1},"2":{"137":1}}],["browsable",{"2":{"117":2}}],["browse",{"2":{"45":1,"117":1}}],["browsers",{"2":{"95":1,"148":3,"449":1}}],["browser",{"0":{"97":1,"451":1},"2":{"36":1,"96":1,"101":1,"147":3,"148":1,"191":1,"239":1,"241":4,"450":1,"455":1,"477":1}}],["bob",{"2":{"402":1}}],["bounded",{"2":{"368":1}}],["bounds",{"2":{"350":1}}],["boot",{"2":{"361":1}}],["bool",{"2":{"276":2,"383":1,"403":1}}],["boolean",{"2":{"40":1}}],["boss",{"2":{"299":1}}],["bonus",{"0":{"280":1},"2":{"133":1}}],["both",{"2":{"100":1,"305":1,"308":2,"315":1,"394":2,"412":1,"413":1,"454":1}}],["bottom",{"2":{"70":3,"286":1}}],["body",{"2":{"40":3}}],["biginteger",{"2":{"266":1,"276":1}}],["bigintegar",{"2":{"256":2,"263":1,"266":1,"268":1,"269":1,"271":1,"277":6,"279":1}}],["bignumber",{"2":{"33":2}}],["binary",{"2":{"128":1}}],["bin",{"2":{"35":1}}],["baked",{"2":{"299":1}}],["balances",{"2":{"305":1,"325":1}}],["balancequery",{"2":{"277":3}}],["balanceof",{"2":{"277":2,"279":1}}],["balance",{"2":{"256":5,"277":3,"279":1}}],["balanceat",{"0":{"256":1},"2":{"255":1,"256":2}}],["banner",{"2":{"148":2,"160":3}}],["bannerurl",{"0":{"160":1},"2":{"148":2,"160":1}}],["bar",{"2":{"110":1,"136":1}}],["backup",{"2":{"348":1}}],["backend",{"0":{"194":1,"480":1},"2":{"194":3,"239":1,"415":1,"480":3}}],["backends",{"0":{"190":1,"476":1},"1":{"191":1,"192":1,"193":1,"194":1,"477":1,"478":1,"479":1,"480":1},"2":{"55":1,"56":1,"191":1,"192":1,"193":1,"477":1,"478":1,"479":1}}],["back",{"2":{"100":1,"170":1,"300":1,"310":1,"320":1,"454":1}}],["base",{"0":{"336":1},"2":{"335":1,"336":1}}],["based",{"2":{"128":1,"206":1,"216":3,"217":1,"218":2,"239":1,"240":1,"242":1,"429":1}}],["basis",{"2":{"85":1,"319":1}}],["basics",{"2":{"328":1}}],["basic",{"2":{"34":1,"62":1,"121":2,"123":1,"125":1,"127":1,"136":1}}],["bash",{"2":{"35":1}}],["batched",{"2":{"33":1,"129":1,"251":1,"252":1}}],["batching",{"0":{"404":1},"2":{"33":1,"129":1,"186":1,"187":1,"188":1,"472":1,"473":1,"474":1}}],["batch",{"0":{"129":1,"189":1,"475":1},"2":{"33":3,"129":3,"308":1}}],["b",{"0":{"29":1},"2":{"107":1,"110":2,"117":1}}],["byte",{"2":{"276":1,"403":1}}],["bytecode",{"2":{"132":5,"262":1}}],["bytes4",{"2":{"403":4}}],["bytes1",{"2":{"376":1}}],["bytesn",{"2":{"276":1}}],["bytes",{"2":{"45":1,"188":2,"189":1,"276":2,"303":1,"337":1,"376":1,"403":3,"474":2,"475":1}}],["bytes32",{"2":{"37":1,"363":1,"376":3,"381":1,"383":1,"387":1,"397":1,"403":3}}],["by",{"2":{"25":1,"26":4,"27":1,"32":3,"34":1,"35":1,"37":4,"38":1,"41":1,"42":1,"43":1,"58":1,"67":1,"69":1,"77":1,"86":1,"87":2,"88":2,"99":1,"100":1,"102":1,"103":1,"108":2,"109":1,"110":1,"111":2,"117":6,"121":1,"123":2,"125":2,"126":1,"127":2,"128":1,"129":1,"130":1,"136":1,"148":3,"159":1,"164":1,"165":1,"167":1,"170":2,"173":1,"177":1,"195":1,"197":1,"203":1,"213":1,"233":1,"236":1,"240":1,"241":2,"244":1,"254":1,"255":2,"256":1,"258":1,"260":1,"270":1,"271":1,"292":1,"293":1,"297":1,"301":1,"302":1,"304":1,"305":1,"307":1,"311":1,"314":2,"321":1,"324":2,"350":1,"355":1,"358":1,"366":1,"367":1,"368":1,"376":2,"378":2,"380":1,"381":1,"382":1,"388":1,"389":1,"390":1,"391":1,"395":1,"396":1,"403":1,"407":1,"413":3,"414":3,"415":1,"425":2,"426":1,"431":1,"436":1,"438":1,"439":1,"446":1,"453":1,"454":1,"456":1,"457":1,"460":1,"463":1}}],["beyond",{"2":{"390":1}}],["been",{"2":{"292":1,"353":1,"372":1,"413":1,"425":1,"435":2,"436":1}}],["behind",{"2":{"273":1}}],["behalf",{"2":{"177":1,"463":1}}],["behaves",{"2":{"170":1}}],["behaviour",{"2":{"110":1,"379":1,"386":1}}],["beauty",{"2":{"147":1}}],["beautify",{"2":{"135":1}}],["beautifully",{"2":{"95":1,"96":1,"449":1,"450":1}}],["being",{"2":{"129":1,"239":1,"291":1,"308":1,"354":1,"357":1,"392":1}}],["bespoke",{"2":{"129":1}}],["best",{"2":{"44":1,"148":2,"160":1,"194":1,"242":1,"480":1}}],["beneficial",{"2":{"129":1}}],["benefits",{"2":{"147":1}}],["benefit",{"2":{"34":1,"87":1}}],["bells",{"2":{"242":1}}],["believers",{"2":{"126":1}}],["believe",{"2":{"108":1}}],["below",{"2":{"27":1,"43":1,"62":1,"63":1,"79":1,"149":1,"195":2,"208":1,"240":1,"241":1,"302":1,"312":1,"322":1,"388":1,"426":1}}],["become",{"2":{"109":1}}],["becomes",{"2":{"99":1,"453":1}}],["because",{"2":{"108":1,"109":1,"350":1,"353":1,"377":1,"415":1}}],["begin",{"2":{"426":1}}],["beginning",{"2":{"27":1}}],["began",{"2":{"108":1}}],["better",{"2":{"128":1,"137":2,"309":1}}],["beta",{"2":{"51":1,"421":1}}],["between",{"2":{"33":1,"111":1,"148":1}}],["before",{"2":{"27":2,"40":1,"129":1,"240":2,"299":1,"300":1,"310":1,"320":1,"353":1,"366":2,"394":2,"438":1,"439":2}}],["be",{"2":{"25":2,"26":7,"32":1,"33":3,"34":2,"35":1,"37":1,"38":1,"42":1,"44":1,"51":1,"52":1,"69":1,"72":1,"73":1,"74":1,"75":3,"76":3,"77":3,"88":4,"93":1,"98":3,"99":2,"101":1,"102":1,"103":5,"104":1,"108":3,"109":2,"110":1,"119":1,"120":1,"122":1,"123":1,"125":1,"127":1,"128":3,"133":2,"136":1,"141":1,"142":1,"144":1,"145":1,"148":1,"150":1,"152":2,"155":1,"158":1,"159":1,"161":1,"162":1,"163":1,"164":1,"165":1,"167":2,"170":2,"173":1,"177":1,"184":1,"189":2,"200":1,"203":1,"204":1,"205":1,"209":1,"213":1,"215":1,"219":1,"226":1,"227":1,"229":1,"230":1,"233":1,"235":1,"239":1,"240":2,"241":9,"242":1,"243":1,"246":1,"251":3,"252":3,"253":1,"255":2,"257":1,"260":1,"262":1,"264":1,"266":1,"276":1,"279":1,"289":1,"290":1,"294":1,"295":1,"297":1,"299":1,"303":1,"305":1,"309":1,"313":1,"318":1,"319":1,"323":1,"336":2,"337":1,"340":1,"345":3,"350":1,"353":1,"355":2,"356":1,"357":1,"358":1,"364":1,"365":1,"366":2,"368":1,"369":1,"375":1,"376":1,"378":2,"380":2,"382":1,"384":1,"386":1,"388":4,"391":1,"392":1,"394":5,"395":1,"396":2,"397":2,"401":1,"402":1,"403":1,"411":2,"412":1,"414":2,"415":3,"421":1,"422":1,"424":1,"425":3,"428":2,"431":1,"434":1,"436":1,"438":1,"439":4,"444":1,"452":3,"453":2,"455":1,"456":1,"457":5,"460":1,"463":1,"470":1,"475":2}}],["bundling",{"2":{"189":1,"475":1}}],["bundle",{"2":{"186":1,"187":1,"188":1,"391":1,"394":3,"472":1,"473":1,"474":1}}],["bunch",{"2":{"147":1}}],["bug",{"2":{"117":1,"241":1}}],["bugfixes",{"2":{"104":1}}],["built",{"2":{"55":1,"56":1,"57":1,"104":1,"135":1,"147":1,"192":1,"193":1,"196":1,"445":1,"478":1,"479":1}}],["builds",{"2":{"104":1,"105":1}}],["build",{"0":{"140":1,"142":1,"146":1},"2":{"27":1,"34":1,"40":1,"41":2,"95":1,"96":1,"107":2,"109":1,"111":1,"117":1,"140":1,"176":1,"195":1,"242":1,"328":1,"340":2,"449":1,"450":1,"462":1}}],["building",{"0":{"25":1,"190":1,"476":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"191":1,"192":1,"193":1,"194":1,"477":1,"478":1,"479":1,"480":1},"2":{"140":1,"194":1,"195":1,"480":1}}],["builder",{"0":{"0":1,"20":1,"27":1,"37":1,"139":1,"296":1,"306":1,"316":1,"326":1,"332":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1,"38":1,"39":1,"140":1,"141":1,"142":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1},"2":{"32":1,"34":2,"37":2,"69":1,"110":2,"122":3,"124":2,"126":2,"132":1,"138":2,"141":1,"142":1,"143":1,"254":1,"281":2,"292":2,"295":1,"300":1,"310":1,"320":1,"327":1,"332":1,"333":1}}],["button",{"2":{"37":1,"44":1,"64":2,"65":2,"80":2,"140":1,"145":1,"236":1,"283":1,"286":2,"293":1}}],["but",{"2":{"32":2,"52":1,"55":1,"56":1,"109":1,"120":1,"128":1,"133":1,"136":1,"147":2,"174":1,"192":1,"193":1,"195":1,"255":1,"280":1,"297":1,"308":1,"372":1,"386":1,"392":1,"413":1,"414":1,"415":1,"422":1,"438":1,"461":1,"478":1,"479":1}}],["burn",{"0":{"12":1,"18":1},"2":{"129":1}}],["turn",{"2":{"241":1}}],["turned",{"2":{"239":1}}],["tutorial",{"2":{"138":1}}],["typically",{"2":{"120":1,"173":1,"177":1,"460":1,"463":1}}],["typical",{"2":{"120":1}}],["typeddata",{"2":{"402":2}}],["typed",{"2":{"402":1}}],["typedefault",{"2":{"77":1}}],["typedefaultbooleantrue",{"2":{"74":1}}],["typedefaultstringundefined",{"2":{"72":1,"73":1}}],["typedefaultstringcenter",{"2":{"70":1}}],["typedefaultstring",{"2":{"69":1,"75":1,"76":1}}],["types",{"2":{"120":1,"274":1}}],["typescript",{"2":{"35":1,"50":2,"92":2,"174":1,"191":1,"420":2,"461":1,"477":1}}],["type",{"0":{"276":1},"2":{"40":2,"43":1,"44":1,"129":2,"148":1,"277":1,"302":1,"303":1,"312":1,"322":1,"402":3,"438":1,"439":1}}],["tmp",{"2":{"107":1,"109":1}}],["tip",{"2":{"148":1,"199":1,"209":1,"219":1,"235":1,"366":1}}],["tips",{"2":{"103":1,"457":1}}],["times",{"2":{"35":1,"136":1}}],["time",{"0":{"337":1,"430":1},"2":{"34":1,"45":1,"100":1,"104":1,"136":1,"173":1,"176":1,"177":1,"275":1,"277":1,"293":1,"299":1,"337":1,"340":1,"372":1,"378":1,"394":1,"415":1,"425":1,"430":1,"431":1,"454":1,"460":1,"462":1,"463":1}}],["twitter",{"2":{"424":1}}],["twitch",{"2":{"75":1,"161":1}}],["two",{"2":{"51":1,"100":2,"111":1,"186":1,"187":1,"188":1,"256":1,"335":1,"346":1,"366":1,"407":1,"414":1,"421":1,"429":1,"454":2,"472":1,"473":1,"474":1}}],["t",{"2":{"52":1,"86":1,"105":1,"107":1,"109":2,"117":2,"128":1,"136":2,"137":1,"170":1,"189":1,"275":1,"277":3,"281":1,"355":1,"358":1,"372":1,"375":1,"377":1,"382":1,"388":1,"389":1,"393":1,"394":1,"397":1,"413":2,"415":1,"422":1,"423":1,"424":1,"431":1,"475":1}}],["technique",{"2":{"207":1,"216":1}}],["text",{"2":{"173":1,"460":1}}],["textmeshpro",{"2":{"107":1,"109":1}}],["terms",{"2":{"103":1,"142":2,"457":1}}],["team",{"2":{"51":1,"56":1,"110":1,"193":1,"195":1,"413":1,"421":1,"479":1}}],["template",{"0":{"42":1,"48":1,"91":1,"343":1,"418":1,"442":1},"2":{"48":1,"91":1,"108":3,"343":1,"418":1,"442":1}}],["tested",{"2":{"242":1}}],["testing",{"0":{"43":1},"2":{"35":2,"66":1,"105":1}}],["test",{"0":{"35":1,"36":1},"1":{"36":1},"2":{"34":1,"43":1,"45":1,"52":1,"357":1,"360":1,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1}}],["tsx",{"2":{"241":1,"426":1}}],["ts",{"2":{"40":1,"426":1,"439":1}}],["tampered",{"2":{"413":1}}],["taking",{"2":{"170":1}}],["takes",{"2":{"148":1,"433":1}}],["take",{"2":{"59":1,"99":1,"120":1,"131":1,"132":1,"136":1,"138":1,"198":1,"207":1,"216":1,"274":1,"294":1,"304":1,"314":1,"324":1,"346":1,"353":1,"414":1,"447":1,"453":1}}],["taken",{"2":{"32":1,"394":1}}],["tag",{"2":{"165":1}}],["tasks",{"2":{"242":1}}],["task",{"2":{"120":2,"131":2,"132":2,"275":1}}],["targets",{"2":{"111":1}}],["tanstack",{"2":{"61":3,"62":1,"63":1}}],["tank",{"0":{"30":1},"2":{"32":2}}],["table",{"0":{"374":1}}],["tablet",{"2":{"95":1,"96":1,"449":1,"450":1}}],["tab",{"2":{"37":1,"282":1,"331":1}}],["tries",{"2":{"434":1}}],["triggered",{"2":{"82":1,"148":1,"434":3,"435":2,"436":1}}],["triggertransaction",{"2":{"82":1}}],["triggercheckout",{"2":{"80":2}}],["triggering",{"0":{"64":1},"2":{"60":1}}],["trigger",{"0":{"433":1},"1":{"434":1},"2":{"26":1,"433":1}}],["triggers",{"2":{"26":1}}],["trust",{"2":{"174":1,"349":1,"413":1,"461":1}}],["trusted",{"2":{"40":1,"430":1,"431":1,"432":1}}],["true",{"0":{"391":1},"2":{"42":1,"45":2,"64":1,"65":1,"117":3,"148":1,"154":1,"156":1,"157":1,"158":1,"167":1,"173":2,"201":1,"239":1,"241":1,"389":2,"394":1,"395":1,"427":1,"432":2,"433":4,"434":2,"436":2,"439":1,"460":2}}],["trying",{"2":{"58":1,"197":1,"446":1}}],["try",{"0":{"47":1,"90":1,"342":1,"417":1,"441":1},"2":{"40":3,"42":1,"47":1,"90":1,"95":1,"96":1,"174":1,"199":2,"209":2,"219":2,"235":2,"242":2,"417":1,"426":1,"439":2,"441":1,"449":1,"450":1,"461":1}}],["tranfereth",{"2":{"273":1}}],["transports",{"2":{"62":3,"63":3,"86":1}}],["transferring",{"2":{"393":1}}],["transferred",{"2":{"366":1}}],["transfereth",{"2":{"273":1}}],["transfertransaction",{"2":{"273":2}}],["transfers",{"0":{"273":1},"2":{"123":1,"125":1,"127":1,"186":2,"187":2,"188":2,"472":2,"473":2,"474":2}}],["transfer",{"2":{"26":1,"33":2,"186":7,"187":1,"188":1,"189":2,"273":1,"274":2,"275":4,"279":1,"472":7,"473":1,"474":1,"475":2}}],["transactionfailed",{"2":{"439":1}}],["transactioncreator",{"2":{"275":4,"279":2}}],["transactioncount",{"0":{"271":1},"2":{"271":2}}],["transactioncall",{"2":{"263":2}}],["transactionbyhash",{"0":{"270":1},"2":{"270":1}}],["transactionhashes",{"2":{"251":1}}],["transactionhash",{"2":{"249":1,"267":1,"270":1,"272":1}}],["transaction2",{"2":{"186":2,"187":2,"188":2,"189":2,"472":2,"473":2,"474":2,"475":2}}],["transaction1",{"2":{"186":2,"187":2,"188":2,"189":2,"472":2,"473":2,"474":2,"475":2}}],["transactionreceipt",{"2":{"250":2,"252":4,"272":2,"273":1,"275":4,"279":2,"438":1}}],["transactionreturn",{"2":{"120":1}}],["transactionresponse",{"2":{"40":1,"45":1}}],["transaction",{"0":{"291":1,"304":1,"314":1,"324":1,"399":1,"404":1,"437":1,"438":1,"439":1},"1":{"292":1,"293":1,"438":1,"439":1},"2":{"25":1,"26":5,"27":2,"32":5,"34":2,"37":1,"45":2,"82":1,"120":3,"121":4,"122":2,"123":1,"124":2,"125":1,"126":4,"127":1,"128":4,"129":6,"132":1,"133":1,"185":4,"186":4,"187":4,"188":4,"189":1,"194":1,"249":1,"250":1,"251":3,"252":2,"263":1,"267":3,"270":4,"272":1,"273":1,"275":4,"279":3,"291":2,"293":4,"294":3,"302":1,"303":1,"304":5,"305":1,"313":1,"314":6,"323":1,"324":6,"334":1,"338":1,"355":2,"358":2,"359":1,"366":1,"380":1,"383":1,"388":1,"391":2,"393":3,"394":4,"395":1,"434":1,"435":1,"437":3,"438":8,"439":4,"471":4,"472":4,"473":4,"474":4,"475":1,"480":1}}],["transactions",{"0":{"33":1,"129":1,"185":1,"189":1,"471":1,"475":1},"2":{"25":3,"26":2,"27":2,"33":8,"120":1,"129":5,"186":1,"187":1,"188":1,"189":4,"251":3,"252":3,"271":1,"317":1,"351":1,"389":1,"394":2,"395":1,"400":1,"414":2,"424":1,"437":1,"438":1,"439":3,"472":1,"473":1,"474":1,"475":4}}],["trackers",{"2":{"174":2,"461":2}}],["tracked",{"2":{"35":1}}],["tradable",{"2":{"309":1}}],["tradeoff",{"2":{"103":1,"457":1}}],["traditional",{"2":{"99":1,"413":1,"453":1}}],["txhash",{"2":{"438":2}}],["tx",{"2":{"434":1,"436":1,"438":3,"439":4}}],["txs",{"2":{"26":1,"32":1}}],["txns",{"2":{"33":1}}],["txn2",{"2":{"33":2}}],["txn1",{"2":{"33":2}}],["txnreceipt",{"2":{"26":4,"32":2}}],["txnresponse",{"2":{"26":2,"32":1,"185":2,"186":4,"187":4,"188":4,"471":2,"472":4,"473":4,"474":4}}],["txn",{"2":{"26":2,"32":2,"45":2}}],["thought",{"2":{"120":1}}],["those",{"2":{"92":1,"299":1,"302":1,"312":1,"322":1,"443":1}}],["threat",{"0":{"415":1}}],["threats",{"2":{"412":1}}],["threads",{"2":{"117":1}}],["threshold",{"2":{"103":1,"367":1,"370":2,"371":2,"382":1,"383":1,"387":1,"388":1,"401":1,"402":1,"403":1,"457":1}}],["three",{"2":{"100":3,"454":3}}],["throughout",{"2":{"246":1}}],["through",{"2":{"34":1,"60":1,"84":1,"111":1,"128":1,"142":1,"147":1,"177":1,"199":1,"209":1,"219":1,"220":1,"239":1,"241":1,"281":1,"297":1,"300":1,"307":1,"310":1,"317":2,"320":1,"401":2,"402":2,"403":1,"429":1,"463":1}}],["throughput",{"2":{"25":1,"34":1}}],["throwing",{"2":{"242":1}}],["throw",{"2":{"26":2,"242":2}}],["than",{"2":{"88":1,"137":1,"138":1,"174":1,"194":1,"461":1,"480":1}}],["that",{"2":{"26":1,"32":2,"33":3,"35":2,"37":1,"40":4,"52":1,"66":1,"77":1,"88":2,"92":1,"98":1,"99":3,"100":1,"102":1,"103":2,"104":1,"107":1,"108":3,"109":3,"110":1,"111":1,"120":1,"121":1,"122":1,"123":2,"125":2,"127":2,"128":2,"129":1,"132":1,"133":1,"136":1,"141":1,"146":1,"147":2,"148":1,"153":1,"161":1,"170":2,"177":2,"185":1,"204":1,"207":1,"216":1,"223":1,"226":1,"232":1,"241":3,"242":3,"246":2,"251":1,"252":1,"255":1,"274":1,"275":1,"276":1,"283":1,"288":1,"291":2,"295":1,"298":2,"300":1,"301":1,"302":2,"305":2,"310":1,"311":1,"312":1,"315":2,"318":1,"320":1,"321":1,"322":1,"325":1,"337":1,"339":1,"345":1,"350":2,"353":2,"355":1,"365":1,"366":2,"368":1,"372":1,"379":1,"380":1,"381":1,"386":1,"387":1,"388":2,"389":1,"391":1,"394":1,"403":2,"411":1,"413":1,"414":3,"415":1,"422":1,"425":2,"426":2,"427":1,"430":1,"433":1,"434":1,"437":1,"438":2,"443":1,"452":1,"453":3,"454":1,"456":1,"457":2,"463":2,"471":1}}],["third",{"2":{"108":1,"413":1}}],["think",{"2":{"56":1,"147":1,"193":1,"479":1}}],["things",{"0":{"146":1},"2":{"256":1,"328":1}}],["thing",{"2":{"44":1}}],["this",{"2":{"26":5,"27":1,"32":2,"33":1,"34":1,"35":2,"36":1,"37":5,"38":1,"39":1,"40":1,"42":3,"43":1,"44":3,"45":2,"51":1,"60":1,"63":1,"77":1,"84":1,"87":1,"92":1,"96":1,"100":1,"102":3,"103":1,"104":1,"107":5,"108":4,"109":3,"110":3,"111":5,"113":1,"117":3,"119":3,"120":1,"121":3,"122":2,"123":1,"124":1,"125":1,"126":1,"127":1,"128":7,"130":1,"131":1,"132":2,"133":2,"136":2,"138":1,"141":1,"144":1,"147":5,"148":1,"152":1,"173":7,"176":1,"181":2,"195":1,"203":1,"205":1,"207":2,"213":1,"215":1,"216":2,"239":2,"240":3,"241":5,"244":1,"245":1,"254":2,"256":1,"273":1,"274":1,"280":1,"281":1,"286":1,"288":2,"289":1,"290":1,"292":2,"297":1,"298":1,"300":1,"301":1,"302":2,"303":4,"307":1,"308":1,"309":1,"310":1,"312":1,"313":1,"317":1,"319":1,"320":1,"322":1,"323":1,"327":1,"328":2,"329":2,"330":1,"331":2,"335":3,"336":3,"337":3,"339":1,"350":1,"353":1,"354":1,"357":2,"366":2,"370":1,"372":1,"376":1,"379":1,"380":2,"382":2,"383":1,"387":1,"388":3,"389":2,"390":1,"391":1,"394":1,"396":1,"397":2,"401":1,"402":1,"403":1,"413":3,"414":3,"415":4,"421":1,"423":1,"425":2,"427":1,"430":1,"431":1,"432":1,"433":1,"434":1,"436":1,"438":1,"439":5,"443":1,"450":1,"454":1,"456":3,"457":1,"460":7,"462":1,"467":2}}],["their",{"2":{"58":1,"98":1,"99":3,"100":5,"101":3,"102":1,"103":4,"113":1,"128":1,"147":3,"148":1,"170":2,"173":3,"176":1,"177":3,"197":1,"240":1,"241":1,"279":1,"308":1,"338":1,"345":1,"367":1,"368":1,"414":1,"430":1,"431":1,"446":1,"452":1,"453":3,"454":5,"455":3,"456":1,"457":4,"460":3,"462":1,"463":3}}],["these",{"2":{"45":1,"62":1,"67":1,"79":1,"88":2,"103":1,"105":1,"108":2,"109":1,"110":1,"129":1,"133":1,"136":1,"146":1,"255":2,"279":2,"297":1,"303":2,"304":1,"313":1,"314":1,"318":2,"328":2,"350":1,"376":1,"380":1,"388":1,"407":1,"411":1,"414":1,"415":1,"457":1}}],["then",{"2":{"37":1,"40":1,"41":1,"44":2,"63":1,"114":2,"115":2,"138":1,"147":1,"156":1,"173":3,"174":1,"177":1,"194":1,"201":1,"211":1,"241":2,"250":1,"252":1,"289":1,"292":2,"304":1,"313":1,"323":1,"330":1,"339":1,"389":1,"424":1,"425":1,"460":3,"461":1,"463":1,"480":1}}],["they",{"2":{"33":1,"75":1,"76":1,"100":1,"109":1,"128":1,"148":1,"158":2,"170":1,"173":1,"177":3,"242":1,"243":1,"275":1,"319":1,"350":1,"376":1,"439":1,"454":1,"460":1,"463":3}}],["therefore",{"2":{"132":1,"236":1,"239":1,"372":1}}],["there",{"2":{"33":1,"108":2,"109":1,"113":1,"132":1,"136":1,"146":1,"207":1,"216":1,"241":1,"244":1,"255":1,"256":1,"289":1,"295":1,"389":1,"390":1}}],["themselves",{"2":{"103":1,"390":1,"413":1,"457":1}}],["theme=",{"2":{"117":2}}],["theme",{"0":{"159":1},"2":{"69":1,"148":2,"159":2}}],["them",{"2":{"33":3,"58":1,"103":1,"119":1,"124":1,"133":1,"177":1,"197":1,"242":1,"251":1,"252":1,"255":1,"305":1,"314":1,"324":1,"353":1,"412":1,"446":1,"457":1,"463":1}}],["the",{"0":{"43":1,"44":1,"62":1,"63":1,"64":1,"65":1,"80":1,"81":1,"144":1,"145":1,"169":1,"172":1,"240":1,"241":1,"282":1,"288":1,"291":1,"301":1,"303":1,"311":1,"313":1,"321":1,"323":1,"331":1,"336":1,"371":1,"396":1,"397":1,"459":1},"1":{"82":1,"83":1,"283":1,"292":1,"293":1,"397":1},"2":{"26":20,"27":5,"32":8,"33":2,"34":5,"35":14,"36":4,"37":16,"38":1,"39":1,"40":10,"41":2,"42":3,"43":1,"44":9,"45":8,"50":4,"51":2,"52":2,"55":1,"56":1,"57":3,"58":2,"59":2,"60":2,"61":5,"62":4,"63":4,"64":6,"65":2,"66":1,"67":3,"69":5,"70":4,"71":2,"72":2,"73":2,"74":2,"75":7,"76":7,"77":5,"78":1,"79":4,"80":2,"81":2,"82":1,"83":3,"84":1,"85":3,"86":4,"87":2,"88":3,"90":1,"92":6,"96":1,"98":5,"99":7,"100":9,"101":1,"102":3,"103":9,"104":1,"107":3,"108":16,"109":11,"110":13,"111":7,"112":8,"113":4,"114":5,"115":5,"117":10,"119":4,"120":5,"121":6,"122":5,"123":4,"124":1,"125":4,"126":4,"127":4,"128":24,"129":5,"130":5,"131":4,"132":7,"133":5,"134":1,"135":1,"136":16,"137":1,"140":1,"141":1,"142":3,"143":1,"144":2,"145":1,"147":7,"148":11,"149":1,"150":1,"152":2,"154":2,"157":3,"158":1,"159":2,"160":1,"161":1,"162":1,"163":1,"165":5,"166":2,"167":6,"168":1,"170":25,"172":1,"173":12,"174":8,"177":4,"180":1,"181":2,"182":2,"183":1,"184":4,"185":6,"186":2,"187":4,"188":4,"189":2,"191":1,"192":1,"193":1,"194":5,"195":5,"196":3,"197":2,"198":2,"199":2,"200":6,"201":3,"203":1,"204":1,"205":1,"206":3,"207":11,"208":3,"209":2,"210":2,"211":3,"213":1,"214":5,"215":1,"216":9,"217":3,"218":2,"219":2,"220":1,"223":2,"224":2,"226":2,"227":2,"229":1,"230":2,"232":2,"233":2,"235":1,"236":3,"237":1,"239":7,"240":13,"241":24,"242":4,"243":2,"244":3,"246":3,"247":2,"248":2,"249":2,"250":3,"251":8,"252":9,"253":8,"254":4,"255":2,"256":13,"257":1,"258":1,"259":1,"260":1,"261":3,"262":1,"263":2,"265":3,"266":1,"267":2,"269":1,"271":1,"272":1,"273":4,"274":4,"275":12,"276":2,"277":6,"278":1,"279":5,"280":2,"282":3,"283":1,"286":3,"288":2,"290":1,"291":4,"292":1,"293":5,"294":5,"295":1,"297":1,"298":1,"299":3,"300":1,"301":4,"302":5,"303":4,"304":6,"305":7,"308":1,"309":2,"310":1,"311":3,"312":4,"313":3,"314":8,"315":5,"317":1,"318":2,"319":2,"320":1,"321":3,"322":4,"323":3,"324":8,"325":2,"328":1,"329":3,"330":2,"331":2,"332":2,"334":2,"335":4,"336":5,"337":5,"338":2,"339":4,"340":3,"344":2,"345":5,"346":2,"347":1,"350":3,"353":7,"354":3,"355":17,"356":7,"357":4,"358":9,"359":9,"360":5,"361":2,"363":2,"364":4,"365":3,"366":13,"369":2,"371":2,"372":11,"375":8,"376":11,"377":8,"378":2,"379":8,"380":4,"381":5,"382":11,"383":6,"385":2,"386":3,"387":3,"388":17,"389":16,"390":4,"391":3,"392":4,"393":3,"394":14,"395":3,"396":6,"397":8,"401":7,"402":8,"403":13,"411":5,"412":4,"413":1,"414":11,"415":11,"420":4,"421":2,"422":2,"423":2,"424":4,"425":16,"426":18,"427":1,"428":2,"429":1,"431":1,"432":3,"433":9,"434":5,"435":1,"436":3,"437":1,"438":13,"439":8,"441":1,"443":2,"445":3,"446":2,"447":2,"450":1,"452":5,"453":7,"454":9,"455":1,"456":3,"457":9,"459":1,"460":12,"461":8,"463":4,"466":1,"467":2,"468":2,"469":1,"470":4,"471":6,"472":2,"473":4,"474":4,"475":2,"477":1,"478":1,"479":1,"480":5}}],["total",{"2":{"305":1,"368":1}}],["together",{"2":{"128":1,"129":2,"243":1,"251":1,"252":1}}],["toaddress",{"2":{"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":4,"275":4,"279":2}}],["tower",{"2":{"108":2}}],["too",{"2":{"147":2,"148":1,"195":1,"199":1,"209":1,"219":1,"235":1,"288":1}}],["took",{"2":{"102":1,"456":1}}],["toolkit",{"2":{"56":1,"57":1,"193":1,"196":1,"445":1,"479":1}}],["tools=",{"2":{"117":2}}],["tools",{"0":{"137":1},"2":{"56":1,"57":1,"117":2,"137":1,"193":1,"195":1,"196":1,"445":1,"479":1}}],["torus",{"0":{"103":1,"457":1},"2":{"100":3,"103":7,"454":3,"457":7}}],["toying",{"2":{"69":1}}],["topics",{"2":{"438":2}}],["top",{"2":{"67":1,"70":3,"110":1,"136":1,"292":1}}],["todo",{"0":{"175":1,"374":1},"2":{"50":1,"146":1,"344":1,"420":1,"439":1}}],["toml",{"2":{"41":1,"42":1}}],["toutf8bytes",{"2":{"37":1}}],["to",{"0":{"40":1,"45":1,"120":1,"140":1,"142":1,"169":1,"281":1,"282":1,"296":1,"302":1,"306":1,"312":1,"316":1,"322":1,"326":1,"334":1,"392":1},"1":{"41":1,"42":1,"43":1,"44":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"282":1,"283":2,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1},"2":{"25":2,"26":16,"27":3,"32":2,"33":8,"34":6,"35":11,"36":1,"37":6,"38":1,"39":2,"40":6,"42":4,"43":1,"44":3,"45":4,"50":1,"51":2,"52":3,"58":1,"59":1,"61":2,"62":3,"63":1,"64":1,"67":1,"71":1,"72":1,"73":1,"75":2,"76":2,"77":1,"78":1,"79":1,"80":1,"84":1,"85":6,"86":3,"87":1,"88":3,"92":4,"95":1,"96":2,"98":5,"99":4,"100":2,"101":1,"102":1,"103":7,"107":2,"108":10,"109":8,"110":6,"111":7,"112":3,"113":5,"114":2,"115":2,"117":6,"119":2,"120":5,"121":5,"122":5,"123":4,"124":1,"125":4,"126":2,"127":4,"128":16,"129":3,"130":1,"131":3,"132":6,"133":7,"135":2,"136":10,"137":4,"138":1,"140":2,"141":5,"142":4,"143":2,"144":2,"146":1,"147":9,"148":10,"150":1,"154":1,"155":1,"157":1,"158":3,"161":1,"162":1,"163":1,"164":1,"165":2,"166":1,"167":5,"170":7,"172":1,"173":11,"174":4,"176":1,"177":3,"181":2,"183":1,"185":5,"186":7,"187":7,"188":7,"189":11,"194":2,"195":6,"197":1,"198":1,"201":1,"203":1,"204":1,"205":3,"206":1,"207":2,"209":1,"211":1,"213":1,"214":1,"215":3,"216":2,"217":1,"223":2,"224":1,"226":1,"229":1,"230":1,"232":2,"236":1,"239":1,"240":3,"241":2,"242":2,"243":1,"246":1,"251":1,"252":1,"253":2,"254":1,"255":2,"256":5,"257":1,"258":1,"259":1,"260":1,"261":2,"262":1,"265":2,"266":2,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":2,"274":5,"275":7,"276":3,"277":4,"278":1,"279":4,"280":3,"281":1,"285":4,"286":1,"288":1,"289":1,"291":4,"292":1,"293":3,"294":1,"295":2,"297":1,"299":1,"300":3,"301":1,"302":5,"303":8,"304":3,"305":2,"308":2,"309":4,"310":3,"311":1,"312":2,"313":5,"314":3,"315":1,"317":2,"318":1,"319":1,"320":3,"321":1,"322":2,"323":5,"324":3,"325":1,"329":2,"330":1,"332":1,"334":1,"335":5,"336":4,"337":6,"338":2,"339":3,"340":6,"342":1,"344":1,"345":5,"346":1,"348":3,"350":2,"353":5,"354":4,"355":3,"357":4,"358":2,"359":5,"360":1,"363":1,"364":4,"366":1,"368":1,"372":1,"376":2,"377":1,"378":2,"379":2,"380":1,"381":1,"382":3,"383":2,"384":1,"385":1,"386":1,"388":4,"389":8,"390":2,"391":1,"392":2,"394":2,"395":2,"396":3,"397":3,"400":1,"401":1,"403":2,"411":1,"412":2,"413":6,"414":1,"415":5,"420":1,"421":2,"422":3,"423":2,"424":2,"425":9,"426":7,"430":1,"431":4,"432":1,"433":1,"434":2,"435":2,"436":1,"438":3,"439":7,"443":3,"446":1,"447":1,"449":1,"450":2,"452":5,"453":4,"454":2,"455":1,"456":1,"457":7,"459":1,"460":11,"461":4,"462":1,"463":3,"467":2,"469":1,"471":5,"472":7,"473":7,"474":7,"475":11,"480":2}}],["tokenresponse",{"2":{"426":2}}],["tokenbaseuri",{"2":{"336":2}}],["token4id",{"2":{"189":1,"475":1}}],["token2id",{"2":{"188":1,"474":1}}],["token1id",{"2":{"188":1,"474":1}}],["tokencontract",{"2":{"33":2}}],["tokenidasstring",{"2":{"124":1,"126":1,"129":2}}],["tokenid",{"2":{"26":1,"32":1,"40":3,"43":1,"44":1,"45":3,"83":1,"127":1,"187":4,"188":1,"189":1,"303":1,"337":2,"473":4,"474":1,"475":1}}],["token",{"0":{"24":1,"318":1,"328":1},"2":{"26":1,"98":1,"121":1,"122":4,"124":2,"126":4,"186":4,"187":3,"188":3,"189":2,"289":4,"298":1,"318":2,"319":1,"327":1,"328":5,"329":4,"336":2,"337":2,"338":1,"339":2,"345":1,"414":1,"434":1,"452":1,"472":4,"473":3,"474":3,"475":2}}],["tokens",{"0":{"11":1,"12":1,"17":1,"18":1,"20":1,"186":1,"187":1,"188":1,"279":1,"472":1,"473":1,"474":1},"2":{"26":1,"122":1,"123":1,"124":1,"125":1,"126":2,"127":1,"167":1,"279":1,"280":1,"289":1,"293":1,"298":2,"299":1,"303":1,"305":1,"307":1,"308":2,"315":1,"317":1,"318":2,"319":4,"335":1,"337":1,"338":2,"339":4,"351":1}}],["dropsession",{"2":{"428":1}}],["drop",{"2":{"302":1}}],["drag",{"2":{"109":1,"111":1}}],["due",{"2":{"136":1,"226":1,"240":1,"354":1,"357":1,"431":1}}],["during",{"2":{"110":1,"372":1,"382":1}}],["d",{"2":{"43":1,"44":1,"128":1,"174":1,"194":2,"195":1,"439":1,"461":1,"480":2}}],["ddos",{"0":{"40":1},"1":{"41":1,"42":1,"43":1,"44":1},"2":{"34":1}}],["dom",{"2":{"426":1}}],["double",{"2":{"353":1}}],["doubt",{"2":{"128":1}}],["dollars",{"2":{"319":1}}],["doing",{"2":{"279":1}}],["don",{"2":{"128":1,"136":1,"137":1,"170":1,"189":1,"275":1,"372":1,"375":1,"423":1,"431":1,"475":1}}],["done",{"2":{"37":1,"38":1,"51":1,"100":1,"119":2,"130":1,"132":1,"170":1,"281":1,"300":1,"310":1,"320":1,"421":1,"439":1,"454":1}}],["does",{"0":{"239":1},"2":{"113":1,"121":1,"365":1,"414":1,"430":1}}],["doesn",{"2":{"105":1,"117":2,"377":1,"388":1,"389":1,"393":1,"394":1,"424":1}}],["documented",{"2":{"130":1}}],["document",{"2":{"128":1,"426":1}}],["documentation",{"2":{"50":1,"62":1,"92":1,"108":2,"121":1,"122":1,"124":1,"126":1,"255":1,"256":1,"420":1}}],["docs",{"0":{"374":1},"2":{"40":1,"41":1,"111":1,"117":1,"130":1,"195":1}}],["download",{"2":{"109":1}}],["down",{"2":{"35":1,"75":1,"76":1,"114":1,"115":1,"274":1,"302":1}}],["do",{"0":{"240":1,"241":1,"299":1},"2":{"33":1,"37":2,"44":1,"107":1,"109":2,"110":1,"119":1,"120":2,"131":1,"132":2,"137":1,"138":1,"143":1,"146":1,"173":2,"174":3,"195":1,"240":1,"274":2,"292":1,"300":1,"302":1,"310":1,"320":1,"329":1,"350":1,"355":1,"358":1,"460":2,"461":3}}],["damage",{"2":{"415":1}}],["dangerous",{"2":{"379":1,"394":1}}],["danger",{"2":{"353":1}}],["dark",{"2":{"69":1,"148":1}}],["dashboard",{"0":{"295":1},"2":{"35":1,"145":1,"146":1,"282":1,"301":1,"311":1,"321":1,"414":1}}],["dapps",{"2":{"96":1,"149":1,"170":1,"195":1,"208":1,"450":1}}],["dapp",{"0":{"28":1,"29":1,"44":1,"148":1,"168":1,"169":1},"2":{"37":1,"43":1,"44":1,"92":1,"96":1,"147":3,"148":9,"150":1,"152":1,"154":1,"160":1,"168":2,"170":6,"173":2,"174":1,"194":1,"195":3,"199":2,"209":2,"219":2,"235":2,"237":1,"241":1,"443":1,"450":1,"460":2,"461":1,"480":1}}],["datatypes",{"2":{"276":2}}],["data2",{"2":{"186":2,"187":2,"188":2,"472":2,"473":2,"474":2}}],["data1",{"2":{"186":2,"187":2,"188":2,"472":2,"473":2,"474":2}}],["database",{"2":{"120":2}}],["data",{"0":{"276":1,"401":1,"402":1},"2":{"26":2,"32":2,"33":2,"45":3,"117":4,"121":1,"186":4,"187":4,"188":6,"189":4,"275":1,"277":1,"302":1,"303":1,"337":1,"359":1,"389":2,"395":1,"401":1,"402":2,"403":1,"413":1,"438":3,"439":2,"472":4,"473":4,"474":6,"475":4}}],["daicontractaddress",{"2":{"186":3,"189":1,"472":3,"475":1}}],["dai",{"2":{"26":1,"434":2}}],["diligence",{"0":{"409":1},"2":{"407":1}}],["dimensions",{"2":{"317":1}}],["difficult",{"2":{"242":1}}],["difficulty",{"2":{"34":1}}],["differs",{"2":{"207":1,"216":1,"377":1}}],["difference",{"2":{"187":1,"188":1,"473":1,"474":1}}],["different",{"2":{"148":1,"186":1,"187":1,"188":1,"195":1,"285":1,"289":1,"303":1,"318":1,"319":1,"346":1,"353":1,"412":1,"414":1,"472":1,"473":1,"474":1}}],["digital",{"0":{"306":1,"311":1},"1":{"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1},"2":{"308":1,"309":3,"314":1,"318":1,"319":1}}],["digit",{"2":{"112":1}}],["directive",{"2":{"241":4}}],["direct",{"2":{"149":1,"389":1,"414":1}}],["directly",{"2":{"92":1,"98":1,"120":1,"131":1,"132":1,"177":1,"275":1,"319":1,"345":1,"372":2,"397":1,"414":1,"425":1,"426":1,"443":1,"452":1,"463":1}}],["directory",{"0":{"24":1,"240":1,"241":1},"2":{"35":1,"40":1,"239":2,"241":2}}],["dive",{"2":{"59":1,"198":1,"299":1,"447":1}}],["discuss",{"2":{"431":1}}],["discouraged",{"2":{"239":1}}],["disconnectweb3react",{"2":{"230":1}}],["disconnect",{"2":{"156":1,"170":1}}],["discord",{"2":{"58":1,"113":1,"161":1,"174":1,"197":1,"446":1,"461":1}}],["disabled",{"2":{"111":1}}],["dist",{"2":{"93":1,"444":1}}],["distribution",{"0":{"93":1,"444":1},"2":{"93":1,"444":1}}],["distinction",{"2":{"319":1}}],["distinct",{"2":{"33":2,"308":1,"319":1,"429":1}}],["displayedassets",{"0":{"77":1}}],["displayed",{"2":{"75":1,"76":1,"77":4,"98":1,"170":1,"233":1,"345":1,"452":1}}],["displaying",{"2":{"60":1}}],["dispatched",{"2":{"33":1}}],["dispatch",{"2":{"25":1,"26":2,"33":1,"185":1,"471":1}}],["debugging",{"2":{"242":1}}],["debit",{"2":{"98":1,"345":1,"452":1}}],["deactivate",{"2":{"230":1}}],["deactivated",{"2":{"230":1}}],["deactivation",{"0":{"230":1}}],["deal",{"2":{"128":1}}],["derive",{"2":{"180":1,"466":1}}],["description",{"2":{"204":1,"214":1,"328":2,"329":2}}],["described",{"2":{"149":1,"240":1,"241":1}}],["desktop",{"2":{"147":1}}],["desired",{"2":{"136":1}}],["designed",{"2":{"147":1,"340":1}}],["design",{"2":{"129":1,"351":1,"366":1}}],["demand",{"0":{"405":1},"2":{"147":2,"168":1,"411":1}}],["demonstrated",{"2":{"240":1}}],["demonstrates",{"2":{"174":1,"461":1}}],["demo",{"0":{"47":1,"90":1,"342":1,"417":1,"441":1},"2":{"47":1,"58":1,"62":1,"63":1,"90":1,"108":3,"136":2,"148":2,"168":1,"195":1,"197":1,"199":1,"201":1,"208":4,"209":1,"211":1,"218":3,"219":1,"225":1,"229":1,"234":1,"235":1,"237":2,"241":1,"342":1,"417":1,"426":2,"441":1,"446":1}}],["denoted",{"2":{"128":1}}],["delegatecall",{"0":{"390":1},"2":{"389":2,"390":2,"395":1}}],["delegate",{"2":{"277":1}}],["delete",{"2":{"40":1}}],["delightful",{"2":{"148":1}}],["delayed",{"2":{"128":1}}],["delayedencodedata",{"2":{"128":2,"129":1}}],["delayedencode",{"0":{"128":1},"2":{"128":4,"129":1}}],["decode",{"2":{"381":2}}],["decodeproof",{"2":{"174":1,"461":1}}],["decoding",{"2":{"274":1}}],["declare",{"2":{"241":1}}],["declared",{"2":{"241":1,"394":1}}],["declaration",{"2":{"241":1}}],["decline",{"2":{"35":1}}],["decentralized",{"2":{"177":1,"463":1}}],["decimals",{"2":{"121":3,"122":4}}],["decimalnormalizer",{"2":{"121":2,"122":1,"123":1,"128":2,"129":2,"273":1,"279":2}}],["deep",{"2":{"113":2,"117":3}}],["define",{"2":{"414":1,"425":1}}],["defines",{"2":{"379":1,"387":1}}],["defined",{"2":{"205":1,"215":1,"244":1,"254":1,"279":1,"280":1,"367":1,"376":2,"381":1,"389":1,"390":1,"392":1}}],["definition",{"2":{"128":1}}],["defi",{"2":{"150":1}}],["defense",{"2":{"108":2,"414":1}}],["defaultabicoder",{"2":{"381":2}}],["defaultpurchaseamount",{"0":{"166":1},"2":{"166":1}}],["defaultfundingcurrency",{"0":{"165":1},"2":{"148":2,"165":1,"167":2}}],["defaulting",{"2":{"121":1}}],["defaultnetwork",{"0":{"205":1,"215":1},"2":{"86":1,"148":1,"201":1,"211":1}}],["defaulttheme",{"0":{"69":1},"2":{"69":1}}],["defaultchainid",{"2":{"62":1,"63":1}}],["defaults",{"2":{"52":1,"103":1,"136":1,"266":1,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1,"457":1}}],["default",{"2":{"25":1,"40":1,"103":1,"111":1,"117":3,"133":1,"153":1,"157":1,"164":1,"165":1,"166":2,"167":2,"205":2,"214":1,"215":2,"223":1,"232":1,"236":1,"240":1,"241":1,"256":2,"279":1,"426":1,"457":1}}],["determining",{"2":{"273":1}}],["determined",{"2":{"152":1,"289":1}}],["determine",{"0":{"290":1},"2":{"77":1,"275":1}}],["determines",{"2":{"69":1,"70":1,"74":1,"75":1,"76":1,"375":1,"434":1}}],["detect",{"2":{"64":1}}],["details",{"0":{"5":1,"7":1,"54":1,"144":1,"303":1,"313":1,"323":1,"334":1},"2":{"37":1,"85":1,"144":1,"170":1,"204":1,"293":2,"302":3,"304":1,"312":3,"314":1,"322":3,"324":1,"334":1,"337":1,"414":1}}],["device",{"2":{"99":1,"100":1,"181":1,"428":1,"453":1,"454":1,"467":1}}],["devices",{"2":{"96":1,"101":1,"450":1,"455":1}}],["developing",{"2":{"242":1}}],["developed",{"2":{"147":1,"195":1}}],["developer",{"2":{"98":1,"345":1,"452":1}}],["developers",{"2":{"67":1,"78":1,"147":1}}],["development",{"2":{"35":1,"340":1,"414":1}}],["dev",{"2":{"35":2,"36":1,"43":1,"44":1,"56":1,"193":1,"403":1,"479":1}}],["depth",{"2":{"204":1,"214":1}}],["deprecated",{"2":{"98":1,"452":1}}],["depends",{"2":{"240":1,"309":1}}],["depending",{"2":{"207":1,"216":1,"294":1,"304":1,"314":1,"324":1,"335":1}}],["dependant",{"2":{"136":1}}],["depend",{"2":{"92":1,"239":1,"443":1}}],["dependencies",{"2":{"61":1,"92":1,"443":1}}],["dependency",{"2":{"33":1,"92":1,"443":1}}],["deployer",{"0":{"353":1},"1":{"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1},"2":{"355":3}}],["deployedwalletcontext",{"2":{"174":1,"461":1}}],["deployedcontractaddress",{"2":{"132":1}}],["deployed",{"0":{"294":1},"1":{"295":1},"2":{"27":2,"40":2,"41":1,"88":1,"274":1,"291":1,"294":1,"295":2,"301":1,"302":1,"311":1,"312":1,"321":1,"322":1,"335":1,"354":1,"357":1,"359":1,"366":1,"397":2}}],["deploycontract",{"2":{"132":4}}],["deploying",{"0":{"278":1},"2":{"129":1,"132":2,"144":1,"300":1,"310":1,"320":1,"366":1}}],["deploymentresult",{"2":{"278":2}}],["deployment",{"0":{"132":1,"405":1},"2":{"35":1,"132":1,"289":1,"291":1,"353":1,"355":2,"357":1,"358":1,"378":1}}],["deploy",{"0":{"4":1,"6":1,"9":1,"10":1,"15":1,"16":1,"21":1,"35":1,"36":1,"37":1,"43":1,"53":1,"281":1,"287":1,"300":1,"310":1,"320":1,"333":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"363":1},"1":{"36":1,"38":1,"39":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":2,"289":2,"290":2,"291":1,"292":1,"293":1,"294":1,"295":1,"355":1,"356":1,"358":1,"359":1,"360":1,"364":1,"365":1},"2":{"34":2,"35":1,"36":1,"37":1,"42":1,"43":1,"45":1,"122":1,"124":1,"126":1,"132":2,"278":2,"281":1,"285":1,"286":1,"288":1,"291":1,"293":2,"300":1,"310":1,"320":1,"332":1,"333":1,"353":1,"354":1,"355":2,"356":2,"357":1,"358":1,"359":3,"360":1,"363":1,"366":1}}],["circle",{"2":{"426":1}}],["cid",{"2":{"329":1,"330":1}}],["certain",{"2":{"436":1}}],["certainty",{"2":{"173":1,"460":1}}],["centered",{"2":{"143":1}}],["center",{"2":{"70":3}}],["cs",{"2":{"119":1}}],["custodial",{"2":{"88":1,"103":1,"119":1,"411":1,"457":1}}],["customizable",{"2":{"135":1}}],["customizability",{"0":{"135":1},"1":{"136":1,"137":1}}],["customization",{"0":{"137":1},"2":{"103":1,"457":1}}],["customize",{"2":{"67":1,"85":1,"137":1,"148":1}}],["custom",{"0":{"84":1,"85":1,"86":1,"87":1},"1":{"85":1},"2":{"84":2,"85":6,"86":5,"87":2,"105":1,"113":2,"117":1,"123":1,"125":1,"127":1,"129":1,"151":1,"241":1,"242":1,"340":1,"342":1,"344":1,"431":1,"432":1}}],["curious",{"2":{"119":1,"128":1}}],["current",{"0":{"381":1,"396":1},"1":{"397":1},"2":{"385":1,"396":2,"427":1,"432":1}}],["currently",{"2":{"51":1,"98":1,"100":1,"113":1,"244":1,"345":1,"415":1,"421":1,"452":1,"454":1}}],["currencies",{"2":{"121":1}}],["currency",{"0":{"316":1,"321":1,"325":1},"1":{"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1},"2":{"26":1,"121":2,"165":2,"167":4,"256":1,"273":1,"317":2,"320":1,"321":1,"323":2,"324":2,"325":1}}],["curl",{"2":{"43":2,"44":1,"339":1}}],["ctx",{"2":{"40":3}}],["cdn",{"0":{"93":1,"444":1},"2":{"93":1,"444":1}}],["cd",{"2":{"35":1,"36":1}}],["claim",{"2":{"155":1}}],["class",{"2":{"52":1,"123":1,"125":1,"127":1,"130":2,"279":1,"422":1}}],["close",{"0":{"428":1},"2":{"64":1,"157":1}}],["closed",{"2":{"51":1,"421":1,"428":2}}],["cloud",{"0":{"329":1},"2":{"35":1,"329":1,"336":1,"337":1}}],["cloudflare",{"0":{"21":1,"35":1,"41":1},"1":{"36":1},"2":{"34":3,"35":3,"40":1}}],["clone",{"2":{"35":1,"356":1}}],["click",{"2":{"107":3,"108":3,"109":1,"110":1,"136":2,"140":1,"142":2,"143":1,"241":1,"283":1,"286":2,"293":1,"305":2,"315":1,"325":1,"331":1,"332":1,"334":1,"336":1,"338":1}}],["clicks",{"2":{"58":1,"173":1,"197":1,"446":1,"460":1}}],["clicking",{"2":{"37":1}}],["clipboard",{"2":{"44":1,"170":2}}],["clientid=",{"2":{"426":1}}],["clients",{"0":{"254":1},"1":{"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1}}],["client=",{"2":{"62":1,"63":2,"79":1,"86":1,"241":1}}],["client",{"2":{"43":1,"128":1,"174":1,"177":1,"182":1,"183":1,"184":1,"191":1,"194":2,"240":2,"241":9,"249":2,"250":2,"251":2,"252":2,"254":4,"255":1,"256":2,"257":1,"258":1,"259":1,"260":1,"261":2,"262":1,"263":1,"264":1,"265":2,"266":2,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":2,"275":7,"277":3,"278":1,"279":5,"426":1,"461":1,"463":1,"468":1,"469":1,"470":1,"477":1,"480":2}}],["cli",{"0":{"35":1},"1":{"36":1},"2":{"34":2,"35":1}}],["c",{"0":{"30":1,"31":1,"32":1},"2":{"110":2,"132":1,"276":1}}],["capabilities",{"2":{"194":1,"480":1}}],["category",{"2":{"117":12}}],["catch",{"2":{"26":1,"40":3,"45":1,"174":1,"242":2,"426":1,"435":1,"439":1,"461":1}}],["causes",{"2":{"241":1}}],["cause",{"2":{"104":3,"110":1}}],["caution",{"2":{"26":1,"148":1,"365":1,"388":1}}],["came",{"2":{"40":1}}],["caller",{"2":{"388":1}}],["called",{"2":{"92":1,"148":1,"293":1,"318":1,"361":1,"380":1,"383":1,"388":1,"389":1,"390":1,"392":2,"414":1,"426":1,"443":1}}],["callfunction",{"2":{"275":7}}],["calls",{"2":{"242":2,"380":1,"388":1}}],["calldata",{"2":{"45":1,"188":2,"189":1,"403":1,"474":2,"475":1}}],["calling",{"0":{"275":1},"2":{"40":1,"120":1,"128":3,"131":1,"132":1,"274":1,"275":1,"366":1,"379":1,"395":1,"396":1,"403":1}}],["callcontractfunction",{"2":{"123":1,"125":1,"127":1,"275":4,"279":1}}],["callcontract",{"2":{"40":3,"45":2}}],["call",{"2":{"33":1,"40":3,"120":1,"128":5,"131":1,"132":2,"194":1,"275":1,"302":2,"339":1,"389":1,"480":1}}],["callback",{"0":{"434":1},"2":{"26":2,"434":2}}],["cases",{"2":{"109":1,"132":1,"173":1,"194":1,"388":1,"460":1,"480":1}}],["case",{"2":{"33":1,"77":1,"102":1,"129":1,"275":2,"277":2,"382":1,"390":1,"391":1,"397":2,"456":1}}],["careful",{"2":{"308":1}}],["carefully",{"2":{"147":1}}],["care",{"2":{"32":1}}],["card",{"2":{"27":1,"98":2,"146":1,"345":2,"452":2}}],["cancel",{"2":{"436":1}}],["cancelled",{"2":{"434":1}}],["candidate",{"2":{"397":1}}],["canvas",{"2":{"111":4}}],["cannot",{"2":{"26":1,"113":1,"226":1,"274":1,"415":1,"431":1}}],["can",{"0":{"299":1},"2":{"25":2,"26":4,"27":2,"33":5,"34":1,"35":2,"36":1,"37":4,"38":1,"40":1,"43":2,"44":1,"45":1,"50":1,"52":1,"56":1,"64":1,"66":1,"67":2,"69":1,"77":1,"84":1,"85":3,"86":1,"87":1,"88":1,"92":2,"93":1,"98":3,"99":2,"100":2,"102":1,"103":2,"104":1,"108":3,"109":1,"111":1,"119":1,"120":3,"121":2,"122":3,"123":1,"124":2,"125":1,"126":3,"127":1,"128":2,"131":2,"132":4,"133":2,"136":2,"141":2,"144":1,"146":2,"147":1,"148":6,"149":1,"152":1,"164":1,"167":1,"170":3,"173":2,"174":1,"177":3,"184":1,"186":2,"187":1,"188":1,"189":1,"193":1,"194":2,"195":1,"200":1,"205":1,"209":1,"215":1,"219":1,"230":1,"235":1,"236":1,"239":1,"240":2,"241":6,"242":2,"243":1,"253":1,"254":2,"255":2,"275":2,"277":1,"278":1,"279":1,"286":1,"292":1,"298":1,"302":1,"303":1,"305":2,"315":1,"319":1,"327":1,"328":2,"335":1,"339":2,"345":3,"350":2,"353":1,"355":3,"356":1,"357":1,"358":2,"366":3,"375":1,"377":1,"378":2,"380":1,"382":1,"388":1,"395":1,"396":2,"397":1,"402":1,"403":1,"411":2,"412":1,"413":3,"414":4,"420":1,"422":1,"425":2,"426":2,"428":2,"431":1,"433":1,"434":1,"436":1,"439":1,"443":1,"444":1,"452":3,"453":2,"454":2,"456":1,"457":2,"460":2,"461":1,"463":3,"470":1,"472":2,"473":1,"474":1,"475":1,"479":1,"480":2}}],["cryptographically",{"2":{"245":1,"413":1}}],["cryptography",{"2":{"103":1,"457":1}}],["crypto",{"0":{"82":1},"2":{"413":1}}],["cryptocurrencies",{"2":{"98":1,"345":1,"452":1}}],["cryptocurrency",{"2":{"78":1,"82":1}}],["cryptocheckout",{"0":{"82":1},"2":{"81":1,"82":2}}],["creator",{"2":{"335":1}}],["creators",{"2":{"126":1}}],["creation",{"2":{"298":1,"366":1,"372":1,"376":1,"382":1,"411":1,"413":1,"423":1}}],["creating",{"0":{"85":1},"2":{"84":1,"85":1,"87":1,"119":1,"120":1,"123":1,"125":1,"127":1,"130":1,"138":1,"254":1,"274":2,"297":1,"300":1,"307":2,"309":1,"310":1,"317":1,"320":1}}],["createroot",{"2":{"426":1}}],["createrandom",{"2":{"37":1}}],["createhashrouter",{"2":{"426":2}}],["create2",{"2":{"363":1,"364":1,"376":1}}],["createtransaction",{"2":{"273":2}}],["createclient",{"2":{"241":1}}],["createconnector",{"2":{"85":2}}],["createconfig",{"2":{"62":2,"63":2,"86":1,"201":1}}],["creates",{"2":{"100":1,"361":1,"363":1,"454":1}}],["createdat",{"2":{"427":2}}],["created",{"2":{"100":1,"108":1,"110":1,"123":1,"125":1,"127":1,"136":1,"141":1,"146":1,"245":1,"246":1,"279":1,"281":1,"289":1,"292":1,"300":1,"305":4,"310":1,"314":1,"315":2,"320":1,"324":1,"325":1,"331":1,"335":1,"361":1,"365":1,"389":1,"401":1,"411":2,"424":1,"454":1}}],["create",{"0":{"28":1,"143":1,"145":1,"300":1,"310":1,"320":1},"1":{"144":1,"145":1},"2":{"25":1,"26":5,"32":2,"33":1,"35":4,"37":2,"40":1,"45":5,"52":1,"85":3,"86":1,"99":2,"108":1,"110":4,"117":1,"123":2,"125":2,"127":2,"129":1,"136":2,"138":1,"143":1,"145":1,"174":1,"180":1,"184":1,"241":1,"245":1,"254":2,"273":1,"275":5,"277":1,"279":2,"292":1,"301":1,"304":1,"309":1,"311":1,"313":1,"314":1,"321":1,"323":1,"324":1,"329":1,"332":1,"344":1,"422":1,"453":2,"461":1,"466":1,"470":1}}],["credential",{"2":{"426":1}}],["credentialresponse",{"2":{"426":2}}],["credentials",{"2":{"51":1,"103":1,"421":1,"457":1}}],["credit",{"2":{"27":1,"98":1,"345":1,"452":1}}],["craft",{"2":{"26":1,"32":1}}],["cheap",{"2":{"348":1}}],["checks",{"2":{"389":1}}],["checked",{"2":{"372":1,"438":1}}],["checking",{"2":{"82":1}}],["check",{"2":{"26":2,"32":1,"40":2,"59":1,"119":1,"120":1,"131":1,"132":1,"148":1,"198":1,"256":1,"307":1,"342":1,"344":1,"353":1,"365":1,"432":1,"447":1}}],["checkoutconfig",{"2":{"82":1}}],["checkoutsettings",{"2":{"80":2,"81":2}}],["checkout",{"0":{"22":1,"80":1,"81":1,"82":1},"1":{"82":1,"83":1},"2":{"59":1,"78":1,"79":6,"80":3,"81":1,"198":1,"447":1}}],["child",{"2":{"241":1,"361":1,"363":1}}],["children",{"2":{"241":2}}],["choice",{"2":{"309":1,"332":1,"424":1}}],["choosing",{"0":{"309":1},"2":{"142":1,"335":1}}],["chooses",{"2":{"170":1}}],["choose",{"0":{"141":1,"284":1},"1":{"285":1,"286":1},"2":{"98":1,"103":1,"133":1,"170":1,"285":1,"345":1,"452":1,"457":1}}],["chosen",{"2":{"353":1}}],["chose",{"2":{"109":1,"170":1,"274":1}}],["challenge",{"2":{"112":2}}],["challenging",{"2":{"109":1}}],["change",{"2":{"185":1,"375":1,"377":1,"382":1,"389":1,"471":1}}],["changed",{"2":{"108":1,"144":1,"382":1}}],["changes",{"2":{"104":2,"109":2,"136":1,"147":1,"226":1,"426":1}}],["chainindexer",{"2":{"130":3}}],["chainid",{"0":{"232":1,"261":1},"2":{"26":1,"32":1,"40":4,"45":4,"77":1,"82":1,"182":2,"229":1,"253":2,"261":2,"402":2,"434":1,"435":1,"436":1,"438":1,"439":1,"468":2}}],["chains",{"0":{"203":1,"213":1},"2":{"62":4,"63":4,"86":1,"201":1,"203":1,"211":1,"213":1,"245":1,"353":2,"366":1}}],["chainconfig",{"2":{"40":2}}],["chain",{"2":{"33":1,"40":10,"41":3,"45":6,"62":5,"63":5,"88":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":2,"129":1,"130":1,"131":1,"132":1,"167":1,"186":1,"187":1,"188":1,"232":1,"253":5,"254":2,"256":2,"261":2,"265":2,"333":1,"336":1,"339":1,"353":1,"354":1,"357":1,"472":1,"473":1,"474":1}}],["chrome",{"0":{"169":1},"2":{"97":1,"147":2,"168":1,"169":1,"424":1,"425":1,"426":1,"427":2,"428":1,"451":1}}],["cost",{"2":{"372":1}}],["costs",{"2":{"293":1,"308":1}}],["covering",{"2":{"301":1}}],["cover",{"2":{"293":1}}],["count",{"2":{"402":1}}],["counterfactual",{"2":{"366":1,"389":1}}],["counter",{"0":{"366":1},"2":{"364":1,"366":1,"376":1,"382":1,"397":1}}],["couple",{"2":{"285":1,"303":1}}],["course",{"2":{"147":1}}],["could",{"2":{"26":2,"103":1,"276":1,"297":1,"299":2,"328":1,"365":1,"415":1,"457":1}}],["co",{"2":{"126":1}}],["cognito",{"2":{"112":2,"430":1}}],["coin",{"2":{"318":1}}],["coinquantity",{"2":{"82":1}}],["coinbase",{"2":{"76":1}}],["coins",{"2":{"58":1,"197":1,"446":1}}],["colorschememanager",{"2":{"136":4}}],["colors",{"2":{"69":2,"136":1}}],["color",{"0":{"136":1},"2":{"69":1,"136":3}}],["collections",{"2":{"305":1,"307":1,"315":1}}],["collection",{"0":{"281":1,"284":1,"301":1},"1":{"282":1,"283":1,"284":1,"285":2,"286":2,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1},"2":{"285":1,"300":1,"301":1,"303":3,"305":1,"310":1,"320":1,"333":1}}],["collectibleinterface",{"2":{"45":2}}],["collectible",{"0":{"45":1,"188":1,"294":1,"474":1},"1":{"295":1},"2":{"34":2,"45":1,"188":2,"311":1,"474":2}}],["collectibles",{"0":{"4":1,"6":1,"9":1,"15":1,"34":1,"53":1,"306":1,"311":1,"315":1},"1":{"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1},"2":{"58":1,"83":1,"197":1,"300":1,"307":1,"308":1,"309":3,"310":1,"313":2,"314":2,"315":1,"319":1,"446":1}}],["collision",{"2":{"33":1}}],["copied",{"2":{"44":1}}],["copy",{"2":{"44":1,"128":1,"170":1,"329":1,"330":1,"331":1}}],["corrupt",{"2":{"379":1}}],["corruption",{"2":{"379":1}}],["corresponds",{"2":{"383":1,"385":1,"388":1}}],["corresponding",{"2":{"75":1,"76":1,"367":1,"368":1}}],["correspond",{"2":{"75":1,"76":1,"388":1}}],["correct",{"2":{"26":1,"207":1,"216":1,"388":1,"396":1,"403":1}}],["corner",{"2":{"292":1}}],["core",{"2":{"61":1,"62":1,"79":1,"174":1,"230":1,"379":1,"461":1}}],["cors",{"2":{"40":1}}],["combinations",{"0":{"371":1},"2":{"366":1}}],["combination",{"2":{"241":1,"371":1}}],["combine",{"2":{"195":1}}],["combined",{"2":{"92":1,"100":1,"319":1,"368":1,"371":4,"388":1,"403":1,"443":1,"454":1}}],["comes",{"2":{"99":1,"453":1}}],["commonly",{"2":{"297":1,"307":1}}],["commons",{"2":{"174":2,"461":2}}],["common",{"2":{"173":1,"318":1,"460":1}}],["communicating",{"2":{"414":1}}],["communication",{"2":{"96":1,"414":1,"450":1}}],["communicate",{"2":{"147":1}}],["commands",{"2":{"105":2}}],["command",{"2":{"35":1,"36":1,"200":1,"206":1,"217":1,"241":1}}],["com",{"2":{"55":1,"93":1,"107":1,"109":1,"117":8,"148":2,"160":1,"162":1,"192":1,"199":1,"209":1,"219":1,"235":1,"237":1,"241":1,"425":1,"427":4,"444":1,"478":1}}],["computing",{"2":{"376":1}}],["computed",{"2":{"375":1}}],["compute",{"0":{"373":1,"376":1},"2":{"376":1,"397":1}}],["computer",{"2":{"95":1,"330":1,"449":1}}],["compiled",{"2":{"132":1}}],["compile",{"2":{"132":1,"360":1}}],["complicated",{"2":{"128":2}}],["complexity",{"2":{"120":1,"308":1}}],["complex",{"0":{"123":1,"125":1,"127":1},"2":{"120":1,"128":1,"129":1}}],["completeness",{"2":{"255":1}}],["completes",{"2":{"112":1}}],["completely",{"2":{"108":1}}],["completed",{"2":{"45":1,"376":1}}],["complete",{"2":{"34":2,"35":1,"37":2,"45":1,"55":1,"63":1,"148":1,"192":1,"291":1,"294":1,"305":1,"314":1,"324":1,"353":1,"357":1,"426":1,"432":1,"478":1}}],["compared",{"2":{"99":1,"396":1,"397":1,"453":1}}],["compat",{"2":{"42":1}}],["compatible",{"2":{"42":1,"147":1,"148":1,"195":1,"236":2,"353":1,"411":2}}],["compose",{"2":{"353":1}}],["composed",{"2":{"92":1,"347":1,"443":1}}],["component",{"2":{"111":1,"241":12,"426":1}}],["components",{"0":{"243":1},"2":{"62":1,"63":1,"134":1,"240":1,"241":6,"243":1}}],["comprised",{"2":{"134":1}}],["compromised",{"2":{"88":2,"99":1,"100":2,"102":1,"103":3,"415":3,"453":1,"454":2,"456":1,"457":3}}],["comprehensive",{"2":{"58":1,"197":1,"446":1}}],["coming",{"0":{"137":1},"2":{"40":1,"118":1,"133":1,"177":1,"380":1,"388":1,"413":1,"463":1}}],["codehash",{"2":{"376":2}}],["codebase",{"2":{"360":1}}],["codeat",{"0":{"262":1},"2":{"262":1}}],["code",{"0":{"175":1,"430":1},"2":{"27":1,"32":1,"35":1,"37":1,"40":1,"45":1,"63":1,"112":1,"119":1,"122":1,"124":1,"126":1,"128":3,"132":2,"148":1,"170":3,"199":1,"209":1,"219":1,"235":1,"240":1,"241":1,"262":1,"357":1,"361":1,"363":1,"376":2,"379":1,"413":1,"414":1,"430":1,"431":1,"433":4,"438":1,"439":2}}],["convenient",{"2":{"177":1,"463":1}}],["convenience",{"2":{"123":1,"125":1,"127":1,"137":1,"279":1,"280":2}}],["convention",{"2":{"173":1,"460":1}}],["converted",{"2":{"276":1}}],["convert",{"2":{"122":1,"128":1}}],["congratulations",{"2":{"119":1,"338":1}}],["conflicts",{"2":{"85":1}}],["confirmed",{"2":{"355":1,"358":1,"359":1}}],["confirm",{"0":{"288":1,"305":1,"315":1,"325":1},"2":{"177":1,"288":1,"292":1,"293":1,"294":1,"304":2,"314":2,"324":2,"463":1}}],["confirms",{"2":{"170":1}}],["confirmations",{"2":{"177":1,"463":1}}],["confirmation",{"0":{"176":1,"462":1},"2":{"34":1,"170":1,"176":1,"183":1,"462":1,"469":1}}],["configs",{"2":{"403":1}}],["configjsonrpcprovider",{"2":{"174":1,"461":1}}],["config=",{"2":{"62":1,"63":3,"67":1,"79":1,"86":2}}],["config",{"2":{"52":1,"62":2,"63":3,"79":1,"86":1,"108":1,"110":2,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1}}],["configuring",{"0":{"81":1},"1":{"82":1,"83":1},"2":{"108":1}}],["configure",{"2":{"62":1,"67":1,"71":1,"81":1,"98":1,"345":1,"356":1,"414":1,"452":1}}],["configured",{"2":{"40":4,"114":1,"115":1,"383":1}}],["configurations",{"2":{"62":1,"86":1,"396":1}}],["configuration",{"0":{"67":1,"71":1,"82":1,"83":1,"367":1,"368":1,"372":1,"375":1,"382":1,"389":1,"395":1,"396":1,"397":1,"398":1},"1":{"72":1,"73":1,"74":1,"75":1,"76":1,"368":1,"369":2,"370":2,"371":2,"372":2,"373":3,"374":1,"375":1,"376":3,"383":1,"384":1,"385":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":2},"2":{"51":1,"59":1,"62":1,"67":1,"82":1,"83":1,"86":2,"114":1,"115":1,"198":1,"354":1,"357":1,"364":1,"365":1,"367":1,"372":1,"375":1,"382":2,"383":1,"384":1,"385":1,"386":1,"387":1,"388":3,"389":4,"391":1,"396":2,"412":1,"421":1,"447":1}}],["context",{"0":{"356":1,"360":1,"406":1},"2":{"244":1,"254":1,"354":1,"356":1,"357":1,"360":2,"376":1,"389":1}}],["content",{"2":{"40":1,"43":1,"44":1,"240":1,"241":2,"329":1}}],["continue",{"2":{"142":1,"436":1}}],["contain",{"2":{"117":1}}],["containing",{"2":{"100":1,"241":1,"454":1}}],["contains",{"2":{"66":1,"379":1,"383":1,"414":1}}],["contact",{"2":{"51":1,"421":1,"431":1}}],["contrast",{"2":{"308":1}}],["contractbytecodeasstring",{"2":{"278":1}}],["contractdeploymentresult",{"2":{"278":1}}],["contractdeploymentreturn",{"2":{"132":1}}],["contractdeployer",{"2":{"278":2}}],["contractcall",{"2":{"275":3,"279":1}}],["contractabi",{"2":{"275":2,"277":2}}],["contractabiasstring",{"2":{"128":2,"129":1}}],["contractaddressaddress",{"2":{"365":1}}],["contractaddress",{"2":{"26":1,"45":2,"77":1,"82":1,"83":1,"128":2,"129":1,"262":1,"274":1,"275":2,"277":2,"278":1,"279":1}}],["contracts",{"0":{"274":1,"277":1,"278":1,"282":1,"346":1},"1":{"275":1,"276":1,"277":1,"278":1,"283":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1},"2":{"37":2,"129":1,"132":1,"276":1,"282":1,"285":2,"286":2,"295":1,"308":1,"332":1,"350":2,"353":2,"354":1,"356":2,"357":2,"358":1,"359":1,"360":2,"361":1,"372":1,"407":1,"413":1}}],["contract",{"0":{"4":1,"5":1,"6":1,"7":1,"9":1,"15":1,"37":1,"39":1,"53":1,"54":1,"132":1,"275":1,"281":1,"283":1,"284":1,"285":1,"286":1,"287":1,"289":1,"290":1,"294":1,"295":1,"300":1,"302":1,"310":1,"311":1,"312":1,"320":1,"321":1,"322":1,"333":1,"334":1,"335":1,"350":1,"407":1},"1":{"38":1,"39":1,"282":1,"283":1,"284":1,"285":2,"286":2,"287":1,"288":2,"289":2,"290":2,"291":1,"292":1,"293":1,"294":1,"295":2,"351":1,"408":1,"409":1,"410":1},"2":{"25":1,"26":3,"27":4,"34":1,"37":4,"38":1,"39":2,"40":7,"41":2,"45":2,"82":2,"88":1,"119":1,"122":2,"123":2,"124":1,"125":2,"126":2,"127":2,"128":4,"129":2,"132":5,"187":1,"188":1,"262":1,"274":8,"275":8,"277":9,"278":1,"279":5,"280":1,"281":1,"283":1,"285":1,"286":1,"288":1,"289":3,"290":1,"291":2,"293":1,"294":1,"295":3,"297":1,"298":2,"300":2,"301":2,"302":6,"303":1,"305":1,"307":1,"308":1,"310":2,"311":3,"312":5,"314":1,"317":1,"320":2,"321":3,"322":5,"324":1,"327":1,"332":1,"333":2,"334":1,"335":3,"336":1,"339":1,"346":2,"350":1,"353":2,"355":3,"359":3,"360":1,"361":1,"363":1,"364":1,"365":3,"369":1,"372":2,"376":2,"377":2,"381":1,"382":1,"388":1,"389":1,"400":1,"412":1,"414":1,"473":1,"474":1}}],["contributing",{"2":{"308":1}}],["contribute",{"2":{"87":1}}],["controlling",{"2":{"103":1,"457":1}}],["controlled",{"2":{"26":2,"32":1,"37":1,"88":2,"99":1,"453":1}}],["control",{"2":{"40":3,"85":1,"88":1,"99":1,"101":1,"102":1,"103":1,"109":1,"173":1,"453":1,"455":1,"456":1,"457":1,"460":1}}],["connectweb3react",{"2":{"230":1}}],["connectoptions",{"2":{"149":2}}],["connector",{"0":{"85":1,"240":1,"241":1},"2":{"75":2,"76":2,"85":12,"86":3,"199":1,"200":5,"201":2,"206":3,"207":2,"209":1,"210":1,"211":1,"217":3,"226":2,"227":2,"229":2,"230":1}}],["connectorsforwallets",{"2":{"211":2}}],["connectors",{"0":{"84":1,"86":1,"87":1,"195":1},"1":{"85":1},"2":{"61":4,"62":3,"63":3,"75":2,"76":2,"84":4,"85":5,"86":5,"87":2,"195":4,"201":4,"211":2,"229":1,"230":2,"239":1,"241":3}}],["connectdetails",{"2":{"148":3,"149":1,"158":1,"173":2,"174":1,"460":2,"461":1}}],["connected",{"2":{"119":1,"148":1,"170":1,"173":1,"261":1,"265":1,"460":1}}],["connecttowaas",{"2":{"119":1}}],["connecting",{"0":{"119":1,"148":1,"168":1,"169":1,"170":1},"2":{"62":1,"119":1,"157":2,"158":1,"160":1,"170":1}}],["connection",{"2":{"60":1,"64":1,"170":3,"204":2,"214":1,"230":1,"233":1,"255":1}}],["connections",{"2":{"58":1,"197":1,"446":1}}],["connect",{"0":{"64":1,"147":1,"149":1,"179":1,"204":1,"214":1,"465":1},"1":{"148":1,"149":1,"150":2,"151":2,"152":2,"153":2,"154":2,"155":2,"156":2,"157":2,"158":2,"159":2,"160":2,"161":2,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":1,"169":1,"170":1},"2":{"35":1,"44":2,"58":1,"62":1,"63":1,"64":1,"76":1,"86":1,"98":1,"147":3,"148":7,"149":2,"150":2,"153":1,"154":1,"155":1,"156":3,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"170":1,"173":5,"174":1,"179":1,"197":1,"199":1,"201":1,"204":1,"205":1,"209":1,"211":1,"214":2,"215":1,"219":1,"223":1,"224":1,"232":1,"235":1,"236":2,"345":1,"446":1,"452":1,"460":5,"461":1,"465":1}}],["consensys",{"0":{"409":1},"2":{"407":1}}],["consent",{"2":{"108":1,"411":1}}],["consistency",{"2":{"359":1}}],["considered",{"2":{"368":1,"371":1,"431":1}}],["consider",{"2":{"242":1}}],["considerations",{"2":{"207":1,"216":1,"394":1}}],["consulted",{"2":{"241":1}}],["cons",{"2":{"82":1}}],["console",{"2":{"26":3,"32":2,"37":1,"40":1,"82":1,"148":2,"172":1,"174":2,"182":2,"184":2,"185":1,"186":2,"187":2,"188":2,"189":2,"381":1,"424":1,"426":2,"427":1,"432":1,"435":1,"436":1,"438":1,"439":1,"459":1,"461":2,"468":2,"470":2,"471":1,"472":2,"473":2,"474":2,"475":2}}],["constraints",{"2":{"414":1}}],["constructions",{"2":{"411":1}}],["constructor",{"2":{"279":1}}],["construct",{"2":{"273":1,"277":1,"401":1,"402":1}}],["constants",{"0":{"393":1,"394":1},"2":{"389":4,"395":2}}],["const",{"2":{"26":14,"32":7,"33":6,"37":7,"40":11,"45":3,"52":1,"62":6,"63":7,"64":4,"65":3,"67":1,"79":1,"80":4,"81":1,"85":2,"86":3,"148":11,"149":1,"172":2,"173":2,"174":5,"179":3,"180":3,"181":2,"182":3,"183":2,"184":1,"185":3,"186":12,"187":13,"188":13,"189":13,"201":2,"211":1,"221":3,"229":2,"230":3,"240":2,"241":2,"376":6,"381":4,"389":1,"395":1,"401":4,"402":6,"406":1,"422":1,"424":3,"425":6,"426":9,"427":2,"428":2,"432":1,"433":2,"434":1,"436":1,"438":2,"439":2,"459":2,"460":2,"461":5,"465":3,"466":3,"467":2,"468":3,"469":2,"470":1,"471":3,"472":12,"473":13,"474":13,"475":13}}],["myetherwallet",{"2":{"349":1}}],["mypinata",{"2":{"336":1}}],["mypage",{"2":{"62":3,"63":3}}],["myapp",{"2":{"241":1}}],["mytokenaddress",{"2":{"123":2,"125":2,"127":2}}],["mytoken",{"2":{"123":3,"125":3,"127":3}}],["my",{"0":{"239":1},"2":{"85":2,"86":3,"92":1,"150":1,"221":1,"443":1}}],["mycustomlogolight",{"2":{"85":1}}],["mycustomlogodark",{"2":{"85":1}}],["mycustomconnectoroptions",{"2":{"85":1}}],["mycustomconnector",{"2":{"85":2,"86":1}}],["mycomponent",{"2":{"65":1,"80":1}}],["myreactcomponent",{"2":{"64":1}}],["much",{"2":{"108":1,"146":1}}],["mutable",{"2":{"108":1}}],["mumbai",{"2":{"52":1,"339":1,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1}}],["multisig",{"2":{"412":1}}],["multisigs",{"2":{"412":1}}],["multisignature",{"2":{"99":1,"453":1}}],["multi",{"2":{"40":1,"41":1,"88":1,"126":1,"298":1}}],["multiple",{"2":{"26":1,"33":1,"88":1,"99":2,"126":2,"129":1,"136":1,"147":1,"170":1,"186":2,"187":2,"188":2,"189":1,"351":1,"353":1,"366":1,"453":2,"472":2,"473":2,"474":2,"475":1}}],["must",{"2":{"37":2,"75":1,"76":1,"110":1,"113":1,"120":1,"133":1,"229":1,"239":1,"240":1,"241":1,"376":1,"382":1,"403":1,"415":1,"438":1}}],["move",{"0":{"334":1},"2":{"256":1}}],["mounted",{"2":{"240":2}}],["mocks",{"2":{"133":1}}],["mocked",{"2":{"40":3,"44":1,"45":1}}],["monobehaviour",{"2":{"111":1,"136":1}}],["mono",{"2":{"105":2}}],["moonpay",{"2":{"98":1,"148":2,"164":1,"345":1,"452":1}}],["mobile",{"0":{"96":1,"450":1},"2":{"96":2,"147":2,"148":1,"195":1,"450":2}}],["most",{"2":{"88":1,"109":1,"121":2,"148":1,"247":1,"255":1,"259":1,"347":1,"354":1,"357":1}}],["modifier",{"2":{"380":1,"388":1}}],["modification",{"2":{"185":1,"471":1}}],["modify",{"2":{"109":1,"279":1,"335":1,"336":1}}],["model",{"0":{"415":1},"2":{"415":1}}],["mode",{"2":{"109":1,"111":1,"136":1}}],["moderately",{"2":{"99":1,"453":1}}],["modern",{"2":{"95":1,"147":1,"449":1}}],["moduleauth",{"2":{"382":1}}],["module",{"2":{"79":1,"220":1,"377":1,"378":1,"382":2,"386":1,"390":1,"413":1}}],["modules",{"0":{"377":1},"1":{"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":1},"2":{"35":1,"42":1,"377":3,"378":1,"382":1,"390":1}}],["modular",{"2":{"61":1}}],["modals",{"2":{"70":1}}],["modal",{"0":{"64":1,"65":1,"71":1,"80":1,"81":1,"293":1},"1":{"72":1,"73":1,"74":1,"75":1,"76":1,"82":1,"83":1},"2":{"60":1,"64":2,"69":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"80":1,"81":1,"144":1,"286":2,"293":1,"304":1,"314":1,"324":1}}],["more",{"0":{"137":1},"2":{"26":1,"32":1,"33":1,"50":1,"58":1,"85":1,"88":1,"92":1,"98":1,"99":2,"107":1,"109":1,"111":1,"117":2,"121":1,"137":1,"148":1,"170":1,"173":1,"197":1,"204":1,"207":1,"214":1,"216":1,"241":1,"286":2,"302":1,"307":1,"312":1,"322":1,"345":1,"351":1,"355":1,"358":1,"420":1,"446":1,"452":1,"453":2,"460":1}}],["mkdir",{"2":{"35":1}}],["me",{"2":{"211":1}}],["measures",{"2":{"147":1}}],["meaning",{"2":{"366":1}}],["meant",{"2":{"88":1,"136":1,"414":1}}],["means",{"2":{"44":1,"96":1,"100":1,"147":1,"298":1,"366":1,"380":1,"388":1,"389":1,"414":1,"415":1,"423":1,"450":1,"454":1}}],["menu",{"2":{"114":1,"115":1,"170":1}}],["mentioned",{"2":{"40":1,"299":1}}],["message",{"0":{"171":1,"181":1,"183":1,"458":1,"467":1,"469":1},"1":{"172":1,"173":1,"174":1,"459":1,"460":1,"461":1},"2":{"108":1,"131":2,"173":4,"177":1,"181":1,"183":3,"184":1,"253":4,"383":1,"401":5,"402":1,"434":1,"439":2,"460":4,"463":1,"467":1,"469":3,"470":1}}],["messages",{"0":{"131":1},"2":{"26":1,"174":1,"176":1,"177":1,"400":1,"401":1,"461":1,"462":1,"463":1}}],["media",{"2":{"38":1}}],["metatxhash",{"2":{"438":1}}],["meta",{"2":{"92":1,"117":2,"194":1,"351":1,"414":1,"443":1,"480":1}}],["metamask",{"2":{"58":1,"76":1,"85":1,"86":1,"147":2,"168":1,"195":1,"197":1,"199":1,"209":1,"219":1,"349":1,"446":1}}],["metadata",{"0":{"37":1,"38":1,"326":1,"328":1,"330":1,"336":1,"339":1},"1":{"38":1,"39":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1},"2":{"34":1,"38":1,"327":1,"328":1,"329":1,"330":1,"335":1,"336":1,"339":4}}],["methods",{"0":{"247":1,"255":1},"1":{"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1},"2":{"40":1,"45":1,"111":1,"123":1,"125":1,"127":1,"242":1,"247":1,"255":2,"280":2,"302":1,"312":1,"322":1,"335":1,"390":1,"392":1,"437":1}}],["method",{"0":{"141":1,"303":1,"313":1,"323":1},"2":{"37":1,"40":1,"111":1,"120":1,"122":1,"123":1,"125":1,"127":1,"128":4,"131":1,"132":1,"133":1,"148":1,"174":1,"239":1,"240":1,"241":1,"253":1,"274":1,"275":2,"277":1,"302":1,"312":1,"313":1,"322":1,"323":1,"353":2,"358":1,"380":2,"388":2,"389":1,"395":1,"396":2,"397":1,"403":1,"429":1,"430":1,"432":1,"433":4,"461":1}}],["mitm",{"2":{"415":1}}],["mimics",{"2":{"386":1}}],["might",{"2":{"339":1,"424":1,"431":1}}],["migrated",{"2":{"26":1}}],["migration",{"0":{"398":1},"2":{"26":4}}],["mistakes",{"2":{"339":1,"353":1}}],["missing",{"2":{"42":1}}],["mix",{"2":{"189":1,"475":1}}],["middle",{"2":{"70":2}}],["middleware",{"2":{"40":1}}],["minimalupgradeableproxy",{"2":{"363":1}}],["minimalupgradeableproxies",{"2":{"361":1}}],["minimum",{"2":{"328":1}}],["minute",{"2":{"138":1}}],["minutes",{"2":{"34":1,"294":1,"304":1,"314":1,"324":1,"433":1}}],["minor",{"2":{"104":2}}],["min",{"2":{"93":2,"444":2}}],["minted",{"0":{"305":1,"315":1,"325":1},"2":{"299":1,"303":1,"305":2,"313":1,"315":1,"323":1,"325":1,"338":2}}],["minter",{"0":{"10":1,"16":1,"21":1},"2":{"34":1,"37":4}}],["minting",{"0":{"337":1},"2":{"82":1,"289":1,"297":1,"300":1,"305":2,"307":1,"310":1,"314":1,"317":1,"320":1,"324":1,"339":1}}],["mints",{"2":{"34":1,"335":1}}],["mint",{"0":{"11":1,"17":1,"20":1,"34":1,"45":1,"296":1,"303":1,"304":1,"306":1,"313":1,"314":1,"316":1,"323":1,"324":1},"1":{"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1},"2":{"34":1,"37":1,"45":4,"122":1,"123":2,"124":1,"126":1,"127":2,"128":3,"279":1,"299":1,"300":1,"302":2,"303":3,"304":1,"308":1,"310":1,"312":1,"313":2,"314":1,"320":1,"322":1,"323":2,"324":1,"335":1,"336":1,"337":3,"339":1}}],["march",{"2":{"410":1}}],["marked",{"2":{"394":1}}],["marketplaces",{"2":{"308":1,"309":1}}],["marketplace",{"0":{"13":1,"19":1},"2":{"82":1,"340":4,"342":1,"344":1}}],["mail",{"2":{"402":1}}],["mainmoduleinterface",{"2":{"389":2,"395":2}}],["mainmoduleupgradable",{"2":{"386":1,"389":3,"394":1,"395":1,"396":1,"397":1,"406":1}}],["mainmoduleupgradeable",{"0":{"386":1,"398":1},"1":{"387":1,"388":1}}],["mainmoduleaddressinitial",{"2":{"364":1}}],["mainmodule",{"2":{"363":2,"364":1,"365":1,"366":1,"375":1,"376":2,"377":1,"382":2,"386":1,"389":3,"406":1}}],["maintaining",{"2":{"147":1,"177":1,"463":1}}],["main",{"2":{"77":3,"117":3,"243":1,"426":3}}],["mainnet",{"2":{"26":2,"32":2,"37":1,"62":2,"63":2,"148":1,"174":1,"205":1,"215":1,"461":1}}],["mapped",{"2":{"276":1}}],["mappings",{"0":{"276":1}}],["max",{"2":{"269":1}}],["master",{"2":{"142":1,"241":1}}],["match",{"2":{"189":1,"475":1}}],["material",{"2":{"129":1}}],["matic",{"2":{"26":1,"121":3,"148":1}}],["magicvalue",{"2":{"403":1}}],["magic",{"2":{"129":1,"403":3}}],["macbook",{"2":{"424":1,"426":1,"427":2,"428":1}}],["machines",{"2":{"353":1}}],["machine",{"2":{"107":1,"350":1}}],["macos",{"0":{"115":1},"2":{"105":1,"107":1}}],["mac",{"2":{"105":1,"115":3}}],["made",{"2":{"104":1,"108":1,"132":1,"242":1}}],["major",{"2":{"104":2}}],["making",{"2":{"103":1,"129":1,"133":1,"242":1,"318":1,"353":1,"457":1}}],["makes",{"2":{"37":1,"318":1,"413":1}}],["make",{"2":{"26":2,"35":1,"40":4,"42":1,"85":1,"109":1,"111":1,"117":1,"120":1,"122":1,"135":1,"170":1,"255":1,"274":1,"281":1,"293":1,"339":1}}],["malicious",{"2":{"99":1,"102":1,"103":1,"453":1,"456":1,"457":1}}],["many",{"2":{"122":1,"173":1,"194":1,"195":1,"460":1,"480":1}}],["manifest",{"2":{"117":5}}],["manual",{"0":{"109":1},"2":{"117":1}}],["manually",{"0":{"20":1},"2":{"110":1,"433":1}}],["managed",{"2":{"436":1}}],["manager",{"0":{"107":1,"136":1},"1":{"108":1},"2":{"107":4,"108":1,"109":5,"136":1}}],["management",{"0":{"99":1,"423":1,"453":1},"1":{"100":1,"101":1,"102":1,"103":1,"424":1,"425":1,"426":1,"427":1,"428":1,"454":1,"455":1,"456":1,"457":1},"2":{"411":1,"413":1,"423":1}}],["manage",{"0":{"326":1},"1":{"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1},"2":{"58":1,"197":1,"298":1,"327":1,"355":1,"446":1}}],["maybe",{"2":{"294":1,"304":1,"314":1,"324":1}}],["may",{"2":{"26":1,"92":1,"108":1,"128":1,"136":2,"141":1,"148":1,"195":2,"227":1,"239":1,"241":1,"242":1,"246":1,"251":1,"252":1,"279":2,"288":1,"309":1,"346":1,"353":1,"365":1,"369":1,"379":1,"388":1,"409":1,"435":1,"443":1}}],["azure",{"2":{"336":1}}],["aim",{"2":{"309":1}}],["audited",{"2":{"413":1}}],["audits",{"0":{"407":1},"1":{"408":1,"409":1,"410":1},"2":{"407":1}}],["audit",{"2":{"308":1}}],["autoconnect",{"2":{"201":1,"241":2}}],["auto",{"2":{"100":1,"454":1}}],["automatically",{"2":{"64":1,"96":1,"105":1,"107":2,"109":1,"111":1,"152":1,"157":1,"161":1,"162":1,"173":3,"195":1,"333":1,"424":1,"450":1,"460":3}}],["automatic",{"0":{"436":1},"2":{"34":1,"436":1}}],["authorizationmessage",{"2":{"181":2,"182":1,"467":2,"468":1}}],["authorization",{"0":{"181":1,"182":1,"467":1,"468":1},"2":{"174":1,"461":1}}],["authorized",{"2":{"182":2,"468":2}}],["authorizenonce",{"0":{"155":1},"2":{"155":2}}],["authorize",{"0":{"154":1},"2":{"148":1,"154":2,"173":2,"177":2,"181":1,"460":2,"463":2,"467":1}}],["authenticating",{"2":{"414":1}}],["authentication",{"0":{"111":1},"1":{"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1},"2":{"50":1,"75":1,"76":1,"92":1,"100":1,"111":4,"177":1,"420":1,"423":1,"431":1,"454":1,"463":1}}],["authenticates",{"2":{"415":1}}],["authenticate",{"0":{"171":1,"173":1,"174":1,"458":1,"460":1,"461":1},"1":{"172":1,"173":1,"174":1,"459":1,"460":1,"461":1},"2":{"173":2,"174":1,"414":1,"423":1,"460":2,"461":1}}],["authenticated",{"2":{"52":1,"422":1}}],["auth",{"0":{"413":1,"426":1},"2":{"26":2,"32":1,"37":1,"45":2,"151":1,"161":1,"174":1,"413":1,"414":1,"415":2,"423":2,"424":1,"426":4,"429":1,"431":1,"461":1}}],["ahead",{"2":{"285":1,"293":1}}],["awesome",{"2":{"147":1}}],["aware",{"2":{"174":1,"461":1}}],["away",{"2":{"128":1}}],["await",{"2":{"26":4,"32":2,"33":2,"37":1,"40":6,"45":3,"120":2,"131":2,"132":2,"148":2,"149":1,"150":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"173":1,"174":2,"179":1,"180":1,"181":1,"182":2,"183":1,"185":1,"186":2,"187":3,"188":3,"189":2,"249":1,"250":1,"251":1,"252":1,"253":2,"256":2,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":2,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":2,"275":6,"277":3,"278":1,"279":5,"381":1,"401":1,"402":1,"424":2,"425":4,"426":3,"427":2,"428":3,"432":1,"433":2,"434":1,"435":1,"436":1,"438":2,"439":2,"460":1,"461":2,"465":1,"466":1,"467":1,"468":2,"469":1,"471":1,"472":2,"473":3,"474":3,"475":2}}],["agreement",{"2":{"142":1}}],["against",{"2":{"103":1,"372":2,"389":1,"397":1,"415":2,"457":1}}],["again",{"2":{"100":1,"156":1,"336":1,"454":1}}],["avatar",{"2":{"144":1}}],["available",{"0":{"68":1},"1":{"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1},"2":{"26":1,"51":1,"55":1,"59":1,"85":1,"98":1,"112":1,"113":1,"147":1,"148":1,"159":1,"163":1,"191":1,"192":1,"198":1,"199":1,"204":1,"208":3,"209":1,"214":1,"218":1,"219":1,"220":1,"225":1,"226":1,"234":1,"235":1,"237":1,"239":2,"254":1,"345":1,"350":1,"413":1,"421":1,"426":1,"447":1,"452":1,"477":1,"478":1}}],["avoid",{"2":{"85":1,"148":1}}],["admire",{"0":{"338":1}}],["adoption",{"2":{"308":1}}],["advantage",{"2":{"274":1}}],["advanced",{"0":{"242":1},"1":{"243":1},"2":{"62":1,"109":1,"121":1,"242":1}}],["adapter",{"2":{"246":1}}],["adding",{"2":{"302":1,"312":1,"322":1}}],["addition",{"2":{"108":1,"132":1,"195":1,"241":1}}],["additional",{"2":{"84":1,"102":2,"116":1,"147":1,"195":1,"346":1,"355":1,"358":1,"371":1,"395":1,"430":1,"431":2,"456":2}}],["additionally",{"2":{"61":1,"121":1,"195":1}}],["adds",{"2":{"99":1,"453":1}}],["added",{"2":{"88":1,"103":1,"136":1,"201":1,"209":1,"211":1,"219":1,"457":1}}],["add",{"0":{"31":1,"32":1,"41":1,"283":1},"2":{"40":1,"42":2,"50":1,"61":1,"63":1,"79":1,"92":4,"103":2,"107":2,"109":3,"114":1,"115":1,"117":2,"132":1,"133":2,"144":1,"148":1,"200":1,"206":1,"210":1,"217":1,"220":1,"317":1,"413":1,"420":1,"443":4,"457":2}}],["addresses",{"0":{"366":1},"2":{"353":1,"380":2,"388":3}}],["address",{"0":{"32":1,"172":1,"376":1,"459":1},"2":{"26":6,"27":1,"32":4,"33":2,"34":1,"37":9,"40":10,"41":2,"43":4,"44":4,"45":5,"112":1,"121":1,"123":1,"125":1,"127":1,"128":1,"132":1,"148":1,"162":1,"172":3,"173":3,"174":3,"180":1,"186":2,"187":8,"188":8,"189":7,"194":1,"248":3,"262":1,"266":1,"274":1,"276":2,"277":2,"279":2,"290":1,"302":1,"303":3,"312":1,"313":2,"322":1,"323":2,"329":1,"335":1,"337":4,"339":1,"353":3,"355":5,"358":5,"359":2,"363":2,"366":4,"369":3,"370":4,"372":1,"375":3,"376":4,"379":1,"381":10,"389":1,"392":1,"397":2,"402":1,"425":1,"426":1,"427":2,"431":1,"438":2,"439":1,"459":3,"460":3,"461":3,"466":1,"472":2,"473":8,"474":8,"475":7,"480":1}}],["architecture",{"0":{"412":1},"1":{"413":1,"414":1}}],["arcadeum",{"2":{"407":2}}],["argent",{"2":{"352":1}}],["argument",{"2":{"133":1,"433":1}}],["arguments",{"2":{"111":1,"275":2}}],["art",{"2":{"319":1}}],["around",{"2":{"143":1}}],["arbitrary",{"2":{"128":1,"275":1,"280":1,"350":1}}],["arbitrum",{"2":{"26":1,"32":1}}],["array",{"2":{"75":1,"76":1,"129":1,"403":1}}],["arrive",{"2":{"44":1}}],["are",{"0":{"371":1},"2":{"37":1,"40":1,"45":1,"75":1,"76":1,"77":2,"85":1,"88":1,"98":1,"100":3,"101":1,"103":1,"110":1,"111":1,"113":1,"121":2,"123":1,"125":1,"126":1,"127":1,"128":3,"129":1,"132":1,"133":1,"141":1,"142":1,"147":2,"148":1,"149":1,"177":2,"194":2,"195":1,"200":1,"206":1,"207":1,"208":1,"216":1,"217":1,"241":1,"244":1,"247":1,"253":1,"255":2,"256":1,"275":1,"276":1,"289":1,"292":1,"297":1,"301":1,"308":1,"318":1,"319":1,"335":1,"339":1,"345":1,"347":2,"350":3,"354":1,"357":1,"361":2,"366":2,"371":1,"372":1,"376":1,"377":1,"380":1,"388":3,"389":1,"390":1,"392":1,"401":2,"402":1,"407":1,"412":2,"414":1,"415":3,"424":1,"426":1,"427":1,"436":1,"437":1,"438":1,"439":1,"452":1,"454":3,"455":1,"457":1,"463":2,"480":2}}],["after",{"2":{"35":1,"40":1,"104":1,"117":1,"136":1,"142":1,"148":1,"157":2,"293":1,"294":1,"304":2,"314":1,"324":1,"329":1,"355":1,"358":1,"359":1,"378":1}}],["apk",{"2":{"117":2}}],["apis",{"2":{"40":1,"44":1,"108":1,"411":1}}],["api",{"0":{"362":1},"1":{"363":1,"364":1,"365":1},"2":{"34":2,"35":1,"40":5,"51":1,"104":1,"108":1,"110":2,"112":1,"254":1,"340":2,"343":1,"344":2,"421":1,"425":1,"439":1}}],["append",{"2":{"376":1}}],["appended",{"2":{"336":1}}],["appear",{"2":{"128":1}}],["appears",{"2":{"85":1,"128":1}}],["appprops",{"2":{"241":1}}],["appprotocol",{"0":{"151":1}}],["apps",{"2":{"133":1}}],["appropriate",{"2":{"110":1,"128":1,"136":1,"206":1,"217":1,"273":1,"275":1}}],["approach",{"2":{"26":1,"120":1,"131":1,"132":1}}],["applicable",{"2":{"218":2}}],["applications",{"0":{"196":1,"445":1},"1":{"197":1,"446":1},"2":{"57":1,"173":1,"174":1,"177":2,"196":1,"242":1,"413":1,"445":1,"460":1,"461":1,"463":2}}],["application",{"2":{"35":1,"43":1,"44":1,"58":1,"59":1,"60":1,"62":1,"110":1,"113":2,"117":4,"132":1,"176":1,"177":1,"184":1,"197":1,"198":1,"207":1,"216":1,"240":4,"241":1,"411":1,"423":1,"426":2,"446":1,"447":1,"462":1,"463":1,"470":1}}],["apply",{"2":{"136":3}}],["appleid",{"2":{"103":1,"457":1}}],["apple",{"0":{"426":1},"2":{"75":1,"113":1,"161":1,"163":1,"425":1,"426":1}}],["appname",{"0":{"224":1,"233":1},"2":{"62":1,"63":1,"86":1,"221":1,"229":3,"233":1}}],["app`",{"2":{"45":1}}],["app",{"0":{"150":1,"241":1},"2":{"34":1,"36":1,"37":1,"40":1,"44":1,"45":2,"62":4,"63":3,"66":1,"67":1,"79":2,"86":4,"95":1,"96":1,"117":1,"135":1,"147":1,"148":2,"150":3,"173":1,"174":1,"195":1,"201":2,"203":1,"204":1,"207":5,"208":5,"211":2,"213":1,"214":1,"216":5,"218":4,"221":1,"224":1,"229":1,"234":1,"239":2,"240":1,"241":3,"242":1,"339":2,"413":1,"415":1,"426":1,"449":1,"450":1,"460":1,"461":1}}],["amazon",{"2":{"112":2,"413":1,"430":1}}],["amountasbiginteger",{"2":{"275":4}}],["amountasstring",{"2":{"122":1,"126":1,"129":2}}],["amount4",{"2":{"189":1,"475":1}}],["amount3",{"2":{"189":1,"475":1}}],["amountrequiredraw",{"2":{"82":1}}],["amount",{"2":{"45":1,"122":1,"123":1,"127":1,"128":1,"129":1,"166":2,"186":2,"188":1,"263":1,"303":2,"313":1,"323":1,"337":1,"394":1,"472":2,"474":1}}],["amount2",{"2":{"33":1,"186":1,"187":1,"188":1,"189":1,"472":1,"473":1,"474":1,"475":1}}],["amount1",{"2":{"33":1,"186":1,"187":1,"188":1,"472":1,"473":1,"474":1}}],["amp",{"0":{"377":1,"398":1},"1":{"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":1},"2":{"27":1,"34":1,"64":2,"371":3,"426":2}}],["asking",{"2":{"173":1,"431":1,"460":1}}],["ask",{"0":{"172":1,"459":1},"2":{"158":1,"186":1,"472":1}}],["askforemail",{"0":{"158":1},"2":{"158":2}}],["asks",{"2":{"108":1}}],["aspects",{"2":{"423":1}}],["aspect",{"2":{"148":2,"160":1}}],["assured",{"2":{"413":1}}],["assumes",{"2":{"148":1,"300":1,"310":1,"320":1}}],["assume",{"2":{"27":1}}],["assigned",{"2":{"378":2}}],["assembled",{"2":{"275":1}}],["assets",{"2":{"38":1,"77":5,"107":1,"108":2,"110":2,"117":1,"136":1,"297":2,"307":1,"353":1}}],["asstring",{"2":{"253":2}}],["associated",{"2":{"180":1,"289":1,"403":1,"466":1}}],["association",{"2":{"111":1}}],["as",{"0":{"93":1,"444":1},"2":{"32":1,"35":2,"40":4,"44":1,"45":1,"51":1,"52":1,"56":1,"58":1,"61":1,"62":1,"63":1,"75":1,"76":1,"85":2,"93":1,"98":1,"103":1,"108":2,"109":2,"111":1,"113":1,"119":2,"120":1,"121":5,"122":1,"124":1,"126":2,"128":4,"129":1,"132":1,"133":4,"136":1,"155":1,"166":1,"170":2,"173":1,"174":2,"177":2,"185":1,"186":2,"187":2,"188":2,"189":1,"193":1,"194":1,"197":1,"203":1,"213":1,"230":1,"232":1,"239":1,"246":1,"251":1,"252":1,"254":1,"255":1,"256":1,"257":1,"260":1,"262":1,"264":1,"265":1,"266":1,"274":2,"275":2,"277":3,"279":1,"280":1,"289":2,"299":2,"307":1,"309":1,"319":2,"328":1,"329":1,"337":2,"345":1,"346":1,"350":1,"355":1,"358":1,"364":1,"372":1,"376":1,"381":1,"382":1,"401":4,"402":3,"403":1,"407":1,"411":1,"412":1,"421":1,"422":1,"424":1,"425":4,"433":1,"434":1,"444":1,"446":1,"452":1,"457":1,"460":1,"461":2,"463":2,"471":1,"472":2,"473":2,"474":2,"475":1,"479":1,"480":1}}],["asynchronous",{"2":{"120":1,"131":1,"132":1,"242":1}}],["async",{"2":{"26":2,"32":1,"37":1,"40":5,"45":2,"82":1,"120":1,"131":1,"132":1,"230":2,"242":1,"275":1,"426":3}}],["alternative",{"2":{"353":1}}],["alternatively",{"2":{"170":2,"275":1,"277":1}}],["alongside",{"2":{"201":1,"211":1,"366":1}}],["along",{"2":{"146":1,"293":1,"295":1,"305":1,"336":1}}],["alpha",{"2":{"136":1}}],["always",{"2":{"104":1,"144":1,"170":1,"174":1,"339":1,"393":1,"394":1,"414":1,"439":1,"461":1}}],["alias",{"2":{"35":2}}],["allowlists",{"2":{"414":1}}],["allowed",{"2":{"390":1,"414":1}}],["allowing",{"2":{"61":1,"128":1,"144":1,"147":1}}],["allow",{"2":{"40":3,"113":1,"123":1,"125":1,"127":1,"147":1,"162":1,"167":1,"400":1,"411":1}}],["allows",{"2":{"33":1,"98":1,"102":1,"128":1,"129":2,"147":1,"173":3,"241":2,"246":1,"298":1,"335":1,"345":1,"346":1,"350":1,"353":1,"355":1,"372":1,"379":1,"382":1,"386":1,"452":1,"456":1,"460":3}}],["all",{"0":{"240":1},"2":{"33":1,"55":1,"58":1,"77":1,"95":1,"96":1,"100":1,"103":1,"112":1,"113":1,"123":1,"125":1,"127":1,"128":1,"129":3,"130":1,"147":1,"164":1,"174":1,"192":1,"195":2,"197":1,"205":1,"215":1,"239":1,"240":1,"241":2,"242":1,"251":1,"252":1,"280":1,"298":2,"299":1,"303":1,"328":1,"330":1,"331":1,"340":1,"353":1,"361":1,"379":1,"382":1,"389":1,"394":1,"413":1,"446":1,"449":1,"450":1,"454":1,"457":1,"461":1,"478":1}}],["already",{"2":{"27":1,"59":1,"107":1,"109":2,"117":2,"141":1,"148":1,"161":1,"162":1,"163":1,"170":2,"198":1,"274":1,"288":1,"300":2,"310":2,"320":2,"337":1,"354":2,"357":2,"424":1,"447":1}}],["also",{"2":{"26":3,"33":1,"34":1,"55":1,"56":1,"84":1,"85":1,"92":1,"98":1,"107":1,"108":1,"133":1,"148":2,"167":1,"170":1,"191":1,"192":1,"193":1,"195":3,"205":1,"215":1,"279":2,"280":1,"286":1,"295":1,"305":1,"345":1,"350":1,"389":1,"397":1,"402":1,"414":1,"415":1,"426":1,"443":1,"452":1,"477":1,"478":1,"479":1}}],["achieves",{"2":{"414":1}}],["achievements",{"0":{"296":1},"1":{"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1},"2":{"297":1,"299":1}}],["achievement",{"0":{"11":1,"12":1,"17":1,"18":1}}],["across",{"2":{"309":1}}],["act",{"2":{"177":1,"463":1}}],["active",{"2":{"428":1}}],["activate",{"2":{"230":2}}],["activated",{"2":{"230":1}}],["activation",{"0":{"230":1}}],["activity",{"2":{"102":1,"117":4,"170":1,"456":1}}],["actions",{"2":{"177":1,"414":1,"436":1,"463":1}}],["action",{"2":{"117":8,"148":1,"177":1,"183":1,"342":1,"414":1,"434":2,"436":1,"463":1,"469":1}}],["acting",{"2":{"99":1,"453":1}}],["actor",{"2":{"99":1,"102":1,"103":1,"453":1,"456":1,"457":1}}],["actually",{"2":{"185":1,"471":1}}],["actual",{"2":{"43":1,"92":1,"148":1,"173":1,"443":1,"460":1}}],["acquire",{"2":{"43":1,"51":1,"421":1}}],["acc36ed4ef40db74137266e48d863083a5c7e85e2735d69adafcb5b362b6cfc0",{"2":{"438":2}}],["accelerating",{"2":{"340":1}}],["accepted",{"2":{"148":1}}],["accepts",{"2":{"121":1,"275":1}}],["accepting",{"2":{"35":1,"119":1}}],["accessing",{"2":{"438":1}}],["accessible",{"2":{"100":1,"454":1}}],["accessed",{"2":{"254":1,"411":1}}],["access",{"2":{"26":2,"32":1,"37":2,"40":8,"41":1,"45":1,"51":1,"52":1,"62":1,"63":1,"86":1,"101":2,"103":1,"110":1,"111":1,"123":1,"125":1,"127":1,"147":3,"148":2,"164":2,"413":3,"415":3,"421":1,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1,"455":2,"457":1}}],["accounts",{"0":{"347":1},"1":{"348":1,"349":1},"2":{"113":1,"346":1,"347":2,"427":4}}],["account",{"2":{"26":3,"32":2,"33":2,"35":1,"36":1,"37":4,"45":1,"88":1,"100":3,"103":1,"119":1,"148":1,"173":1,"194":1,"207":1,"216":1,"329":1,"332":1,"413":1,"423":1,"424":1,"454":3,"457":1,"460":1,"480":1}}],["atomic",{"2":{"391":1}}],["attested",{"2":{"413":1}}],["attention",{"2":{"308":1}}],["attempts",{"2":{"239":1}}],["attempt",{"2":{"107":1,"109":1,"214":1,"223":1,"224":1,"232":1}}],["attributes",{"0":{"335":1},"2":{"299":1,"328":1,"335":1}}],["attacks",{"2":{"426":1}}],["attackers",{"2":{"413":1}}],["attacker",{"2":{"101":1,"415":2,"455":1}}],["attached",{"2":{"111":1,"136":1}}],["at",{"2":{"26":1,"27":1,"35":1,"47":1,"59":1,"90":1,"95":1,"96":1,"100":1,"104":1,"110":2,"173":1,"198":1,"251":1,"252":1,"256":4,"262":2,"266":2,"275":1,"277":1,"286":1,"289":2,"328":1,"377":1,"378":1,"415":1,"417":1,"441":1,"447":1,"449":1,"450":1,"454":1,"460":1}}],["absolute",{"2":{"173":1,"460":1}}],["abstracted",{"2":{"128":1}}],["above",{"0":{"241":1},"2":{"32":1,"107":1,"121":2,"122":1,"128":1,"148":1,"173":1,"174":1,"239":1,"240":1,"241":2,"257":1,"260":1,"262":1,"264":1,"266":1,"371":1,"401":1,"402":1,"460":1,"461":1}}],["about",{"2":{"25":1,"33":1,"34":1,"144":1,"148":1,"241":1,"297":1,"339":1,"355":1,"358":1}}],["abis",{"2":{"128":1,"279":1}}],["abi",{"2":{"26":1,"45":1,"123":1,"125":1,"127":1,"128":5,"274":3,"275":1,"276":1,"279":1,"280":1,"403":1}}],["ability",{"2":{"26":1,"103":1,"457":1}}],["able",{"2":{"26":1,"103":1,"109":1,"147":3,"164":1,"167":1,"170":1,"295":1,"305":1,"401":1,"415":2,"457":1}}],["a",{"0":{"9":1,"10":1,"15":1,"16":1,"21":1,"25":1,"28":1,"34":1,"35":1,"45":1,"47":1,"85":1,"90":1,"141":1,"143":1,"180":1,"189":1,"240":1,"241":1,"283":1,"284":1,"285":1,"289":1,"290":1,"300":2,"310":2,"320":2,"342":1,"417":1,"441":1,"466":1,"475":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"35":1,"36":2,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"144":1,"145":1,"285":1,"286":1},"2":{"25":1,"26":16,"27":4,"32":5,"33":2,"34":7,"35":4,"36":2,"37":5,"39":1,"40":9,"42":1,"43":2,"44":2,"45":4,"48":1,"51":1,"52":2,"55":1,"57":2,"58":3,"59":1,"62":1,"69":2,"75":2,"76":2,"77":1,"80":1,"82":1,"85":5,"86":1,"87":1,"88":5,"91":1,"92":2,"93":1,"98":1,"99":7,"100":5,"102":3,"103":6,"104":3,"107":4,"108":8,"109":3,"110":5,"111":4,"112":2,"113":2,"117":3,"119":3,"120":6,"121":11,"122":1,"123":4,"125":4,"126":1,"127":4,"128":8,"129":5,"130":1,"131":2,"132":8,"133":6,"134":1,"136":3,"137":1,"138":2,"141":5,"143":1,"144":2,"146":1,"147":6,"148":4,"149":1,"156":1,"160":2,"161":1,"166":1,"168":2,"170":1,"173":6,"174":2,"176":1,"177":7,"180":1,"181":1,"183":1,"184":1,"185":2,"186":4,"187":3,"188":3,"189":1,"192":1,"194":4,"195":2,"196":2,"197":3,"198":1,"199":1,"204":1,"205":1,"208":4,"209":1,"214":1,"215":1,"218":3,"219":1,"233":1,"234":1,"235":1,"240":3,"241":10,"242":1,"244":1,"245":4,"246":3,"247":1,"251":5,"252":5,"253":2,"254":7,"255":2,"256":3,"257":1,"258":1,"260":2,"262":3,"263":1,"264":1,"266":2,"267":2,"268":1,"270":1,"271":1,"272":1,"273":1,"274":6,"275":7,"276":1,"277":4,"278":1,"279":3,"280":1,"281":2,"285":2,"286":1,"289":4,"290":1,"291":2,"292":2,"293":5,"294":1,"298":2,"299":1,"300":2,"302":1,"303":3,"304":3,"305":1,"308":1,"310":2,"311":1,"312":1,"313":1,"314":3,"318":2,"319":1,"320":2,"322":1,"323":1,"324":3,"327":1,"328":2,"330":1,"331":1,"337":1,"338":1,"340":3,"342":1,"343":1,"345":1,"346":1,"347":1,"353":3,"354":3,"355":3,"356":1,"357":4,"363":1,"364":2,"365":3,"367":3,"368":1,"370":1,"371":1,"372":1,"378":2,"380":1,"381":1,"382":1,"383":1,"386":1,"388":2,"389":1,"391":2,"393":1,"394":1,"396":1,"397":3,"401":1,"402":2,"411":1,"412":2,"413":6,"414":2,"415":1,"418":1,"421":1,"422":2,"423":1,"424":3,"425":3,"426":6,"427":1,"428":1,"430":2,"431":2,"433":2,"434":4,"438":2,"439":2,"442":1,"443":2,"444":1,"445":2,"446":3,"447":1,"452":1,"453":7,"454":5,"456":3,"457":6,"460":6,"461":2,"462":1,"463":7,"466":1,"467":1,"469":1,"470":1,"471":2,"472":4,"473":3,"474":3,"475":1,"478":1,"480":4}}],["answer",{"2":{"425":2}}],["answered",{"2":{"35":1}}],["announced",{"2":{"150":1}}],["another",{"2":{"100":1,"319":1,"369":1,"414":1,"454":1}}],["anytime",{"2":{"292":1}}],["anything",{"2":{"148":1}}],["anywhere",{"2":{"120":1,"131":1,"132":1}}],["anyway",{"2":{"32":1}}],["anyone",{"2":{"44":1,"413":1}}],["any",{"0":{"169":1},"2":{"26":3,"27":1,"32":1,"33":1,"35":1,"40":6,"52":1,"95":1,"96":1,"104":1,"108":1,"109":1,"111":1,"123":1,"125":1,"127":1,"128":1,"129":1,"137":1,"141":1,"147":3,"148":1,"170":1,"174":1,"276":1,"279":1,"280":1,"295":1,"297":1,"336":1,"337":1,"353":1,"366":1,"371":2,"388":2,"395":1,"407":1,"415":1,"422":1,"426":1,"428":2,"437":1,"438":1,"439":1,"449":1,"450":1,"461":1}}],["android=",{"2":{"117":2}}],["androidmanifest",{"2":{"117":1}}],["android",{"0":{"117":1},"2":{"105":1,"117":41}}],["and",{"0":{"35":1,"37":1,"149":1,"179":1,"240":1,"241":2,"289":1,"296":1,"300":1,"304":1,"310":1,"314":1,"320":1,"324":1,"328":1,"338":1,"405":1,"465":1},"1":{"36":1,"38":1,"39":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1},"2":{"25":1,"27":1,"33":1,"34":5,"35":4,"36":1,"37":3,"40":6,"43":4,"44":5,"45":6,"50":1,"51":1,"55":1,"56":1,"57":1,"58":3,"60":1,"61":2,"66":1,"75":1,"76":1,"80":1,"84":1,"85":1,"86":1,"87":1,"88":3,"92":1,"98":1,"100":3,"102":1,"103":5,"104":2,"107":2,"108":3,"109":4,"110":4,"111":3,"112":2,"114":1,"115":1,"117":4,"119":1,"120":4,"121":4,"122":1,"123":2,"124":1,"125":2,"126":1,"127":2,"128":4,"129":1,"131":1,"132":4,"133":3,"135":1,"136":3,"137":1,"138":3,"140":1,"142":1,"144":1,"147":6,"148":5,"152":2,"154":1,"158":1,"168":1,"170":2,"173":3,"174":1,"177":3,"180":1,"184":1,"189":1,"192":1,"193":1,"195":2,"196":1,"197":3,"201":1,"208":1,"211":1,"214":1,"230":1,"236":1,"239":4,"240":2,"241":7,"242":1,"243":1,"249":1,"250":1,"251":2,"252":2,"253":1,"254":1,"255":1,"256":1,"257":1,"260":1,"262":1,"264":1,"266":1,"267":1,"272":1,"273":1,"274":2,"275":3,"277":2,"279":2,"280":2,"281":2,"285":1,"292":1,"294":1,"297":1,"298":1,"299":2,"300":2,"302":1,"304":1,"305":1,"308":2,"310":2,"312":1,"314":2,"315":1,"317":2,"319":2,"320":2,"322":1,"324":2,"325":1,"328":1,"329":2,"332":1,"333":1,"335":1,"336":2,"337":1,"338":2,"339":1,"340":2,"345":1,"346":1,"350":1,"353":1,"356":1,"357":1,"360":1,"365":1,"366":1,"367":1,"370":1,"372":3,"375":1,"383":2,"389":1,"393":1,"394":1,"397":1,"400":1,"401":2,"402":1,"403":2,"407":1,"411":3,"413":4,"414":5,"420":1,"421":1,"424":1,"426":4,"427":1,"432":2,"439":1,"445":1,"446":3,"452":1,"454":3,"456":1,"457":5,"460":3,"461":1,"463":3,"466":1,"470":1,"475":1,"478":1,"479":1}}],["an",{"0":{"4":1,"6":1,"13":1,"19":1,"37":1,"53":1,"239":1,"281":1,"298":1,"318":1},"1":{"38":1,"39":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1},"2":{"26":1,"33":2,"34":1,"35":2,"37":2,"44":1,"45":1,"56":1,"66":1,"85":4,"88":1,"100":1,"101":1,"107":1,"111":1,"112":1,"113":1,"120":2,"121":1,"122":3,"123":2,"124":3,"125":2,"126":3,"127":2,"128":4,"130":1,"131":2,"132":2,"133":2,"136":1,"141":1,"144":1,"147":2,"154":1,"155":1,"162":1,"166":1,"170":1,"173":2,"174":1,"176":1,"186":1,"187":2,"188":2,"193":1,"195":1,"206":1,"207":2,"216":2,"217":1,"224":1,"225":2,"237":1,"239":1,"241":3,"245":1,"246":2,"251":2,"252":2,"253":1,"274":1,"275":2,"276":3,"277":1,"279":2,"280":1,"285":3,"289":1,"297":1,"299":1,"300":1,"301":1,"302":1,"303":1,"307":1,"310":1,"312":1,"317":1,"318":1,"320":1,"322":1,"329":1,"335":1,"344":1,"359":1,"369":1,"379":1,"388":1,"389":1,"394":1,"411":2,"414":1,"415":2,"423":1,"424":1,"425":6,"428":1,"430":1,"433":1,"434":1,"439":3,"454":1,"455":1,"460":2,"461":1,"462":1,"472":1,"473":2,"474":2,"479":1}}],["w3c",{"2":{"147":1}}],["wyre",{"2":{"98":1,"452":1}}],["won",{"2":{"413":1}}],["wooden",{"2":{"336":1}}],["wouldn",{"2":{"415":1}}],["would",{"2":{"40":1,"45":1,"88":1,"102":1,"103":1,"128":1,"132":1,"142":1,"144":1,"148":1,"203":1,"213":1,"275":1,"277":1,"301":1,"311":1,"321":1,"456":1,"457":1}}],["workflow",{"2":{"173":1,"460":1}}],["works",{"0":{"134":1},"2":{"95":1,"96":1,"111":2,"128":1,"147":1,"148":3,"160":1,"191":1,"449":1,"450":1,"477":1}}],["work",{"2":{"87":1,"105":1,"109":1,"110":1,"113":1,"133":1,"147":4,"195":2,"256":1,"337":1,"425":1}}],["working",{"2":{"37":1,"119":1,"120":1,"131":1,"132":1,"240":1,"242":1,"243":1,"253":1}}],["worker",{"2":{"34":1,"35":1,"40":1,"43":1,"44":1}}],["workers",{"0":{"21":1},"2":{"36":1,"43":1,"44":1}}],["world",{"2":{"35":1,"36":1,"57":1,"196":1,"401":1,"445":1}}],["worried",{"2":{"25":1,"34":1}}],["wrapping",{"2":{"242":2}}],["wrappers",{"2":{"85":1,"109":1,"279":3}}],["wrapper",{"0":{"62":1,"63":1},"2":{"62":2,"63":1,"67":1,"123":1,"125":1,"127":1,"130":1,"132":1,"241":6,"279":1,"280":1}}],["wrap",{"2":{"62":1,"241":2}}],["wrangler=",{"2":{"35":1}}],["wrangler",{"0":{"35":1,"42":1},"1":{"36":1},"2":{"34":2,"35":8,"36":1,"41":1,"42":1,"43":1}}],["written",{"2":{"55":1,"174":1,"191":1,"192":1,"194":1,"461":1,"477":1,"478":1,"480":1}}],["write",{"0":{"120":1,"302":1,"312":1,"322":1},"1":{"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1},"2":{"37":2,"109":1,"120":1,"302":1,"303":1,"304":1,"312":1,"313":1,"314":1,"322":1,"323":1,"324":1,"335":1,"336":1,"338":1}}],["wrong",{"2":{"40":2,"167":2}}],["why",{"0":{"239":1,"346":1},"1":{"347":1,"348":1,"349":1,"350":1,"351":1,"352":1},"2":{"366":1}}],["who",{"2":{"147":1,"415":1,"431":1}}],["whole",{"2":{"121":1,"129":1,"251":1,"252":1,"391":1}}],["whistles",{"2":{"242":1}}],["whitespace",{"2":{"128":1}}],["while",{"2":{"96":1,"103":1,"104":1,"132":1,"137":1,"147":1,"158":1,"170":1,"173":1,"177":1,"239":1,"242":1,"251":1,"252":1,"274":1,"340":1,"389":1,"411":1,"413":1,"450":1,"457":1,"460":1,"463":1}}],["which",{"2":{"26":1,"33":1,"36":1,"37":1,"38":1,"56":1,"75":1,"76":1,"77":1,"88":1,"96":1,"98":2,"120":1,"130":1,"131":1,"132":2,"136":2,"144":1,"147":1,"150":1,"168":1,"170":1,"173":2,"186":1,"187":1,"188":1,"191":1,"193":1,"206":1,"207":2,"216":2,"217":1,"218":2,"224":1,"240":1,"241":4,"247":1,"251":1,"252":1,"273":1,"275":1,"280":1,"286":1,"293":1,"309":1,"345":2,"346":1,"361":1,"380":1,"383":1,"388":1,"396":1,"412":1,"450":1,"452":2,"460":2,"472":1,"473":1,"474":1,"477":1,"479":1}}],["whether",{"2":{"74":1,"158":1,"167":1,"207":1,"216":1,"403":1,"431":1,"434":1}}],["whenever",{"2":{"280":1,"423":1}}],["when",{"0":{"239":1},"2":{"44":1,"86":1,"100":1,"105":1,"108":2,"109":1,"110":1,"111":1,"120":1,"121":1,"123":1,"125":1,"127":1,"128":2,"129":1,"131":1,"132":1,"141":1,"148":2,"149":1,"160":1,"165":1,"173":1,"207":1,"216":1,"233":1,"240":1,"241":2,"242":4,"243":1,"256":1,"274":2,"275":1,"276":1,"279":1,"289":1,"292":2,"294":1,"302":1,"305":1,"312":1,"314":1,"322":1,"324":1,"361":1,"389":1,"394":2,"403":1,"414":1,"426":2,"431":1,"434":2,"436":1,"454":1,"460":1}}],["where",{"2":{"37":1,"119":1,"121":1,"128":1,"132":1,"160":1,"176":1,"194":1,"242":1,"276":1,"335":1,"462":1,"480":1}}],["what",{"0":{"298":1,"299":1,"318":1},"2":{"37":1,"241":1,"295":1,"318":1,"335":1,"350":1,"390":1,"414":1}}],["w",{"2":{"26":2}}],["weight",{"2":{"368":2,"369":2,"370":4,"371":4,"388":1}}],["weights",{"2":{"367":1,"383":1,"387":1}}],["weeds",{"2":{"256":1}}],["week",{"2":{"153":1}}],["were",{"2":{"177":1,"276":1,"415":1,"463":1}}],["went",{"2":{"40":2}}],["well",{"2":{"40":1,"103":1,"128":1,"185":1,"194":1,"275":2,"277":2,"280":1,"289":1,"401":1,"402":1,"457":1,"471":1,"480":1}}],["we",{"2":{"27":1,"40":4,"45":1,"50":1,"60":1,"92":1,"103":1,"104":1,"108":3,"109":3,"110":1,"111":2,"113":2,"119":1,"123":1,"125":1,"126":1,"127":1,"128":2,"130":1,"132":2,"133":2,"135":1,"136":2,"137":2,"138":1,"147":1,"173":1,"240":2,"241":3,"242":1,"255":1,"275":2,"277":2,"279":1,"280":2,"285":1,"297":1,"299":1,"301":1,"302":2,"305":1,"309":1,"315":2,"317":1,"325":1,"359":2,"413":1,"420":1,"431":3,"457":1,"460":1}}],["weth",{"2":{"26":1}}],["websocketprovider",{"2":{"241":1}}],["websocketpublicclient",{"2":{"201":1}}],["web2",{"2":{"147":1}}],["webgl",{"0":{"118":1},"2":{"105":1,"113":1}}],["web3modal",{"0":{"235":1},"1":{"236":1,"237":1},"2":{"148":1,"168":1,"195":1,"235":3,"236":1,"237":2}}],["web3",{"0":{"168":1,"196":1,"219":1,"226":1,"445":1},"1":{"197":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"446":1},"2":{"42":1,"57":2,"58":2,"62":1,"76":1,"96":1,"147":6,"195":3,"196":2,"197":2,"219":3,"220":2,"221":1,"225":1,"226":3,"227":1,"229":2,"230":1,"234":1,"333":1,"445":2,"446":2,"450":1}}],["web",{"0":{"22":1,"23":1,"95":1,"449":1},"2":{"95":1,"96":1,"147":3,"413":1,"449":1,"450":1}}],["width=",{"2":{"426":1}}],["widespread",{"2":{"308":1}}],["wish",{"2":{"108":1,"120":1,"128":1,"131":1,"132":1,"277":1,"280":1,"300":1,"310":1,"320":1,"431":1}}],["windows",{"2":{"115":2}}],["window",{"0":{"42":1},"2":{"42":1,"107":2,"109":2,"114":1,"115":1,"117":1,"148":1,"157":1,"292":1}}],["will",{"2":{"25":1,"26":9,"32":2,"34":1,"35":1,"37":2,"51":1,"58":1,"60":1,"63":1,"64":1,"74":1,"75":2,"76":2,"77":2,"84":1,"96":1,"98":2,"103":2,"104":3,"107":3,"108":2,"109":5,"110":4,"111":2,"112":1,"119":1,"121":1,"128":1,"129":1,"130":1,"133":2,"138":1,"141":2,"142":1,"144":1,"147":3,"148":2,"150":1,"152":1,"154":1,"156":1,"157":1,"158":2,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"167":1,"170":1,"173":3,"185":1,"195":1,"197":1,"204":1,"205":1,"214":1,"215":1,"223":1,"224":1,"232":1,"233":1,"239":1,"240":1,"241":2,"245":1,"251":4,"252":4,"254":1,"255":1,"256":2,"273":2,"274":3,"275":1,"276":1,"286":1,"289":2,"290":1,"291":2,"293":3,"294":2,"300":1,"302":2,"303":1,"304":3,"305":1,"309":1,"310":1,"312":2,"313":1,"314":4,"320":1,"322":2,"323":1,"324":4,"331":1,"333":1,"336":4,"337":2,"345":2,"353":1,"365":1,"366":1,"379":1,"380":1,"388":2,"391":1,"394":1,"401":2,"402":2,"403":1,"414":3,"421":1,"425":3,"433":1,"437":1,"438":1,"439":4,"446":1,"450":1,"452":2,"457":2,"460":3,"471":1}}],["within",{"2":{"58":1,"62":1,"108":2,"120":1,"131":1,"132":1,"147":1,"197":1,"302":1,"312":1,"322":1,"350":1,"414":1,"433":1,"446":1}}],["without",{"2":{"25":1,"27":1,"32":1,"33":2,"34":1,"108":1,"120":1,"129":1,"131":1,"132":1,"141":1,"147":1,"148":2,"176":1,"177":1,"183":2,"242":1,"366":1,"388":1,"395":1,"437":1,"462":1,"463":1,"469":2}}],["with",{"0":{"8":1,"14":1,"27":1,"35":1,"37":1,"60":1,"119":1,"148":1,"168":1,"169":1,"171":1,"175":1,"178":1,"183":1,"190":1,"239":1,"240":1,"241":1,"299":1,"458":1,"464":1,"469":1,"476":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1,"36":1,"38":1,"39":1,"61":1,"172":1,"173":1,"174":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"191":1,"192":1,"193":1,"194":1,"459":1,"460":1,"461":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"477":1,"478":1,"479":1,"480":1},"2":{"25":1,"26":2,"27":2,"33":1,"34":4,"35":2,"37":3,"38":1,"40":1,"43":1,"44":5,"45":1,"48":1,"50":1,"51":1,"52":1,"55":1,"57":2,"58":3,"59":1,"61":1,"62":1,"69":1,"82":2,"84":1,"85":1,"87":1,"88":1,"91":1,"92":2,"95":1,"96":1,"98":1,"99":1,"100":3,"101":1,"104":1,"107":3,"108":4,"109":2,"110":3,"111":4,"112":2,"113":1,"117":4,"119":5,"120":3,"121":2,"123":5,"125":5,"127":5,"128":4,"131":2,"132":3,"136":2,"137":1,"138":1,"141":1,"142":1,"147":4,"148":1,"149":1,"159":1,"161":2,"162":2,"173":2,"174":2,"177":1,"181":1,"186":1,"187":1,"188":1,"192":1,"194":2,"195":4,"196":2,"197":3,"198":1,"199":2,"200":1,"207":4,"208":2,"209":1,"216":4,"218":2,"219":1,"226":1,"235":2,"236":2,"239":2,"240":2,"241":6,"242":2,"243":1,"246":2,"253":1,"255":1,"256":1,"257":1,"275":1,"276":1,"279":2,"280":2,"285":1,"289":1,"293":1,"295":1,"298":1,"299":1,"302":2,"304":1,"305":1,"308":1,"312":1,"314":1,"319":2,"322":1,"324":1,"327":1,"329":1,"336":1,"338":1,"339":1,"340":1,"343":1,"345":1,"355":1,"356":1,"358":1,"359":1,"364":2,"367":1,"368":1,"369":1,"371":1,"379":1,"401":1,"403":2,"407":1,"411":2,"413":2,"414":3,"415":2,"418":1,"420":1,"421":1,"422":1,"423":1,"424":2,"425":3,"426":1,"428":1,"429":1,"430":1,"433":2,"442":1,"443":1,"445":2,"446":3,"447":1,"449":1,"450":1,"452":1,"453":1,"454":3,"455":1,"460":2,"461":2,"463":1,"467":1,"472":1,"473":1,"474":1,"478":1,"480":2}}],["warning",{"2":{"379":1,"394":1}}],["walkthrough",{"2":{"309":1}}],["walks",{"2":{"281":1,"307":1}}],["walk",{"2":{"60":1,"84":1,"297":1,"317":1}}],["walletinterface",{"2":{"389":2}}],["walletcontext",{"2":{"406":1}}],["walletcontractbytecode",{"2":{"376":1}}],["walletconnectprojectid",{"2":{"62":1,"63":1}}],["walletconnect",{"0":{"170":1},"2":{"58":1,"147":1,"168":1,"170":4,"197":1,"446":1}}],["walletproxybytecode",{"2":{"376":1}}],["walletpanel",{"2":{"133":1}}],["walletauthoptions",{"0":{"76":1},"2":{"86":2}}],["walletaddress",{"2":{"40":2,"426":2}}],["wallets",{"0":{"100":1,"196":1,"244":1,"346":1,"350":1,"445":1,"454":1},"1":{"101":1,"102":1,"103":1,"197":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"347":1,"348":1,"349":1,"350":1,"351":2,"352":1,"446":1,"455":1,"456":1,"457":1},"2":{"26":3,"56":1,"57":1,"58":1,"62":1,"75":1,"76":1,"84":1,"88":1,"103":1,"147":1,"193":1,"195":1,"196":1,"197":1,"203":1,"211":2,"213":1,"221":1,"246":1,"346":2,"350":3,"353":2,"361":2,"366":3,"372":1,"377":2,"378":1,"379":1,"382":1,"388":1,"389":1,"397":1,"400":1,"411":3,"412":1,"413":1,"414":1,"415":5,"445":1,"446":1,"457":1,"479":1}}],["walleteoa",{"2":{"26":4,"32":2,"37":2,"45":2}}],["wallet",{"0":{"3":1,"45":1,"63":1,"65":1,"88":1,"95":1,"96":1,"97":1,"133":1,"147":1,"149":1,"169":1,"172":1,"173":1,"174":1,"176":1,"179":1,"195":1,"239":1,"240":1,"241":1,"292":1,"356":1,"360":1,"361":1,"367":1,"375":1,"376":1,"377":1,"378":1,"382":1,"392":1,"397":1,"406":1,"411":1,"449":1,"450":1,"451":1,"459":1,"460":1,"461":1,"462":1,"465":1},"1":{"134":1,"135":1,"136":1,"137":1,"148":1,"149":1,"150":2,"151":2,"152":2,"153":2,"154":2,"155":2,"156":2,"157":2,"158":2,"159":2,"160":2,"161":2,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":1,"169":1,"170":1,"362":1,"363":1,"364":1,"365":1,"366":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1,"375":1,"376":2,"378":1,"379":2,"380":2,"381":2,"382":1,"383":2,"384":2,"385":2,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":1,"412":1,"413":1,"414":1,"415":1},"2":{"25":1,"26":17,"27":1,"32":3,"33":1,"34":1,"37":12,"40":3,"41":1,"43":2,"44":3,"45":2,"47":1,"48":1,"50":2,"51":3,"52":2,"58":3,"60":1,"61":3,"62":1,"63":4,"65":3,"76":3,"77":1,"88":6,"90":1,"92":2,"96":2,"98":2,"99":8,"100":3,"103":1,"104":2,"111":3,"119":2,"120":3,"121":2,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":2,"129":3,"131":3,"132":4,"133":2,"141":4,"147":12,"148":19,"149":2,"150":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":3,"158":2,"159":2,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"170":2,"172":3,"173":6,"174":1,"176":1,"177":5,"179":6,"180":1,"181":1,"182":3,"183":1,"185":2,"186":3,"187":3,"188":3,"189":2,"194":1,"195":2,"197":3,"199":2,"209":2,"214":1,"219":2,"223":1,"232":1,"233":1,"235":2,"236":3,"237":1,"239":3,"241":2,"244":1,"245":2,"248":2,"249":1,"250":1,"251":5,"252":5,"253":3,"256":3,"266":2,"273":2,"275":6,"278":1,"279":3,"290":1,"291":1,"292":2,"293":3,"299":1,"304":1,"314":1,"324":1,"337":1,"345":2,"346":1,"347":1,"353":2,"354":2,"356":2,"357":3,"360":3,"364":2,"365":1,"366":7,"367":1,"369":1,"372":2,"375":4,"376":5,"377":1,"378":1,"379":3,"380":3,"381":5,"382":3,"383":3,"384":1,"385":1,"386":1,"387":2,"388":6,"389":6,"390":1,"391":2,"392":2,"394":3,"395":2,"396":3,"397":5,"401":6,"402":7,"403":2,"407":3,"411":5,"412":1,"413":2,"417":1,"418":1,"420":2,"421":3,"422":2,"423":1,"424":1,"425":1,"429":1,"439":3,"441":1,"446":3,"450":2,"452":2,"453":8,"454":3,"457":1,"459":3,"460":6,"461":1,"462":1,"463":5,"465":6,"466":1,"467":1,"468":3,"469":1,"471":2,"472":3,"473":3,"474":3,"475":2,"480":1}}],["wagmiclient",{"2":{"241":2}}],["wagmiconfig",{"2":{"62":3,"63":4,"79":2,"86":3,"201":1,"241":2}}],["wagmiwrapper",{"2":{"241":6}}],["wagmiprovider",{"2":{"62":1,"63":1,"241":1}}],["wagmi",{"0":{"199":1,"206":1,"217":1},"1":{"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1},"2":{"57":1,"61":4,"62":5,"63":2,"64":2,"75":1,"76":1,"85":3,"86":1,"195":1,"196":1,"199":3,"200":5,"201":2,"206":4,"207":3,"208":5,"216":5,"217":4,"218":4,"239":2,"240":5,"241":4,"445":1}}],["waitfortransactionreceipt",{"0":{"272":1},"2":{"272":1}}],["waits",{"2":{"250":1,"252":1}}],["wait",{"2":{"33":1,"240":2,"272":1,"275":1}}],["wants",{"2":{"102":1,"456":1}}],["want",{"2":{"27":1,"33":1,"45":1,"108":1,"109":1,"119":1,"123":1,"125":1,"127":1,"128":3,"147":1,"158":1,"173":1,"185":1,"195":1,"256":2,"275":3,"278":1,"288":1,"303":2,"313":2,"323":2,"335":1,"339":1,"460":1,"471":1}}],["ways",{"2":{"147":1,"414":1}}],["way",{"2":{"26":3,"33":1,"87":1,"136":2,"141":1,"143":1,"177":1,"340":1,"382":1,"389":1,"413":1,"463":1}}],["was",{"2":{"26":2,"32":1,"103":1,"108":2,"403":1,"407":1,"438":2,"457":1}}],["waasadapter",{"2":{"246":1}}],["waastowalletadapter",{"2":{"246":3,"251":2,"252":2}}],["waaswallet",{"2":{"119":4,"120":5,"121":1,"131":4,"132":9,"133":1,"246":3}}],["waaslogin",{"2":{"119":1}}],["waasconfigkey",{"2":{"52":1,"422":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1}}],["waas",{"0":{"8":1,"14":1,"119":1},"2":{"50":1,"52":4,"92":1,"108":1,"110":2,"111":1,"112":1,"119":2,"120":1,"121":1,"122":1,"123":3,"124":1,"125":3,"126":1,"127":3,"128":2,"129":1,"420":1,"422":4,"423":1,"424":6,"425":6,"426":5,"427":5,"428":6,"432":1,"433":2,"434":1,"435":2,"436":1,"438":5,"439":5}}],["slot",{"2":{"381":5}}],["skip",{"2":{"285":1}}],["skipfetchsetup",{"2":{"45":2}}],["synonymous",{"2":{"407":1}}],["symbols",{"2":{"289":1}}],["symbol",{"0":{"289":1},"2":{"279":2,"289":2}}],["system",{"2":{"50":1,"92":1,"105":2,"108":1,"109":1,"135":1,"346":1,"411":1,"420":1,"423":1}}],["sfts",{"2":{"126":1}}],["switching",{"2":{"111":1}}],["small",{"2":{"185":1,"471":1}}],["smart",{"0":{"275":1,"286":1,"287":1,"300":1,"310":1,"320":1,"346":1,"350":1},"1":{"288":1,"289":1,"290":1,"347":1,"348":1,"349":1,"350":1,"351":2,"352":1},"2":{"25":1,"27":2,"88":1,"119":1,"123":1,"125":1,"127":1,"128":3,"129":3,"132":4,"174":1,"262":1,"275":2,"276":1,"277":2,"285":1,"289":1,"291":1,"295":1,"300":2,"302":2,"305":1,"310":2,"312":1,"314":1,"320":2,"322":1,"324":1,"346":2,"350":2,"353":1,"369":1,"388":1,"412":1,"413":1,"461":1}}],["smooth",{"2":{"57":1,"58":1,"196":1,"197":1,"445":1,"446":1}}],["shape=",{"2":{"426":1}}],["share",{"0":{"87":1},"2":{"44":1,"87":1,"158":1}}],["showing",{"2":{"286":1,"331":1}}],["show",{"2":{"165":1,"224":1}}],["showcases",{"2":{"108":1}}],["showemailinput",{"0":{"74":1}}],["shown",{"2":{"72":1,"73":1,"74":1,"75":1,"76":1,"83":1}}],["should",{"2":{"26":2,"35":1,"36":1,"42":1,"43":1,"44":3,"45":1,"85":1,"92":1,"101":1,"107":1,"109":1,"138":1,"145":1,"160":1,"184":1,"242":2,"257":1,"260":1,"262":1,"264":1,"266":1,"279":1,"292":1,"295":2,"301":1,"305":1,"311":1,"321":1,"328":1,"329":1,"335":1,"336":1,"355":1,"358":1,"359":1,"391":1,"394":4,"396":1,"434":1,"443":1,"455":1,"470":1}}],["src=",{"2":{"93":2,"444":2}}],["src",{"2":{"40":1}}],["snippet",{"2":{"37":1,"119":1,"121":1,"122":1,"124":1,"126":1,"128":1,"132":1,"174":1,"254":1,"461":1}}],["scenario",{"2":{"415":5}}],["scenarios",{"2":{"348":1,"415":1}}],["scenes",{"2":{"273":1}}],["scene",{"2":{"107":1,"108":2,"109":1,"111":1,"133":1,"136":3}}],["scope",{"2":{"177":1,"401":1,"402":1,"425":1,"463":1}}],["schemas",{"2":{"117":4}}],["scheme=",{"2":{"117":2}}],["scheme",{"0":{"136":1},"2":{"110":1,"113":2,"114":1,"115":1,"117":3,"136":3}}],["schemes",{"2":{"105":1,"114":1,"115":1}}],["scroll",{"2":{"114":1,"115":1,"336":1,"337":1}}],["scripts",{"2":{"108":1,"132":1}}],["scripting",{"2":{"108":1}}],["scriptableobject",{"2":{"110":3}}],["scriptable",{"2":{"107":1,"136":3,"254":1}}],["script",{"2":{"93":5,"107":1,"108":1,"136":1,"353":1,"356":2,"444":5}}],["screen",{"2":{"70":1,"111":1,"150":1,"334":1}}],["scratch",{"2":{"35":1}}],["scan",{"2":{"170":1,"236":1}}],["scanned",{"2":{"170":2}}],["scaled",{"2":{"111":1}}],["scale",{"2":{"111":2}}],["scaler",{"2":{"111":1}}],["scaling",{"2":{"34":1}}],["scaffold",{"2":{"40":1}}],["soon",{"0":{"137":1},"2":{"118":1,"413":1}}],["socialauthoptions",{"0":{"75":1},"2":{"86":2}}],["social",{"0":{"100":1,"113":1,"431":1,"454":1},"1":{"101":1,"102":1,"103":1,"114":1,"115":1,"116":1,"117":1,"118":1,"455":1,"456":1,"457":1},"2":{"58":1,"75":1,"99":1,"100":3,"103":2,"105":2,"107":1,"110":1,"113":2,"119":1,"141":1,"197":1,"351":1,"413":1,"424":1,"425":1,"426":1,"431":1,"432":1,"446":1,"453":1,"454":3,"457":2}}],["something",{"2":{"92":1,"119":1,"120":2,"131":1,"132":2,"328":1,"336":1,"443":1}}],["someone",{"2":{"44":1}}],["some",{"2":{"43":2,"44":4,"105":1,"108":3,"109":1,"113":1,"128":1,"132":1,"133":3,"136":1,"148":1,"194":1,"239":1,"243":1,"293":1,"302":1,"348":1,"424":1,"480":1}}],["sourced",{"2":{"195":1}}],["source",{"2":{"40":1,"56":1,"93":1,"108":1,"128":2,"148":1,"193":1,"199":1,"209":1,"219":1,"235":1,"286":1,"413":1,"444":1,"479":1}}],["soliditypack",{"2":{"376":2}}],["solidity",{"2":{"37":1}}],["so",{"2":{"34":1,"37":2,"85":1,"110":1,"111":2,"128":2,"137":1,"143":1,"146":1,"174":1,"240":1,"246":1,"274":2,"279":2,"281":1,"288":1,"300":1,"301":1,"302":1,"310":1,"320":1,"336":1,"350":1,"390":1,"392":1,"413":1,"461":1}}],["s",{"2":{"33":1,"40":2,"55":1,"64":1,"67":1,"75":1,"76":1,"85":2,"99":1,"101":1,"103":1,"104":1,"108":1,"119":1,"128":1,"135":1,"138":1,"143":1,"144":1,"148":1,"152":1,"155":1,"170":1,"172":1,"174":1,"177":2,"181":1,"192":1,"194":1,"224":1,"241":1,"291":1,"299":2,"309":1,"318":1,"330":1,"337":1,"350":2,"353":1,"355":1,"358":1,"364":1,"366":2,"368":1,"379":1,"382":1,"383":1,"390":1,"394":1,"396":1,"403":1,"413":1,"414":3,"415":1,"425":1,"431":1,"433":1,"453":1,"455":1,"457":1,"459":1,"461":1,"463":2,"467":1,"478":1,"480":1}}],["sdks",{"2":{"50":1,"51":1,"92":1,"195":1,"420":1,"421":1}}],["sdk",{"0":{"50":1,"57":1,"420":1},"1":{"58":1},"2":{"26":1,"50":3,"52":1,"55":1,"92":5,"104":2,"108":4,"109":6,"110":2,"111":1,"112":1,"117":5,"119":1,"123":1,"125":1,"127":1,"129":1,"130":1,"133":2,"174":1,"192":1,"195":1,"244":1,"420":3,"422":1,"423":1,"425":3,"426":2,"439":1,"443":2,"461":1,"478":1}}],["straightforward",{"2":{"274":1}}],["structured",{"0":{"402":1},"2":{"402":1}}],["structure",{"2":{"207":2,"208":2,"216":2,"218":2,"239":3,"241":2}}],["streamlining",{"2":{"177":1,"463":1}}],["strictmode",{"2":{"426":2}}],["strictly",{"2":{"274":1}}],["stripe",{"2":{"147":1}}],["stringify",{"2":{"40":3}}],["string",{"2":{"26":1,"37":1,"40":9,"43":1,"44":1,"45":2,"77":1,"110":1,"121":1,"123":1,"125":1,"127":1,"128":1,"131":1,"132":2,"173":1,"249":1,"251":3,"253":2,"254":1,"256":3,"258":1,"259":1,"261":1,"262":1,"265":2,"267":2,"274":2,"276":5,"278":1,"279":1,"388":1,"401":1,"402":2,"460":1}}],["store",{"2":{"180":1,"372":1,"377":1,"466":1}}],["stored",{"2":{"99":1,"101":1,"177":1,"184":1,"372":1,"381":1,"453":1,"455":1,"463":1,"470":1}}],["storage",{"2":{"177":1,"180":1,"184":1,"372":1,"377":1,"381":2,"463":1,"466":1,"470":1}}],["style",{"2":{"117":2}}],["styling",{"2":{"69":1}}],["still",{"2":{"104":1,"109":1,"132":1,"133":2,"177":1,"194":1,"389":1,"415":1,"427":1,"463":1,"480":1}}],["step",{"0":{"140":1,"141":1,"142":1,"144":1,"145":1,"282":1,"284":1,"287":1,"291":1,"294":1,"301":1,"302":1,"303":1,"304":1,"305":1,"311":1,"312":1,"313":1,"314":1,"315":1,"321":1,"322":1,"323":1,"324":1,"325":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1},"1":{"283":1,"285":1,"286":1,"288":1,"289":1,"290":1,"292":1,"293":1,"295":1},"2":{"27":1,"35":3,"40":1,"44":1,"45":1,"110":1,"285":1,"359":1,"424":1}}],["steps",{"0":{"59":1,"198":1,"447":1},"2":{"27":1,"34":2,"37":1,"43":1,"45":2,"62":1,"79":1,"116":1,"354":1,"357":1}}],["static",{"2":{"130":1}}],["state",{"2":{"109":1,"397":1,"426":1}}],["status",{"0":{"432":1},"1":{"433":1,"434":1,"435":1},"2":{"26":6,"32":3,"40":10,"64":1,"432":1,"438":3}}],["standalone",{"2":{"105":2}}],["standards",{"2":{"147":1}}],["standard",{"2":{"96":1,"122":1,"123":1,"124":1,"125":1,"126":2,"127":1,"174":1,"187":1,"188":1,"189":1,"194":2,"195":1,"245":1,"279":1,"285":2,"286":1,"298":1,"308":1,"400":1,"450":1,"461":1,"473":1,"474":1,"475":1,"480":2}}],["standardized",{"2":{"40":1,"41":1}}],["startingblocknumber",{"2":{"260":1}}],["starting",{"2":{"85":1,"108":1}}],["start",{"2":{"51":1,"52":1,"140":1,"143":2,"144":1,"146":1,"301":1,"311":1,"321":1,"421":1,"422":1}}],["started",{"0":{"49":1,"60":1,"138":1,"344":1,"419":1},"1":{"50":1,"51":1,"52":1,"61":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"420":1,"421":1,"422":1},"2":{"48":1,"59":1,"61":1,"91":1,"95":1,"96":1,"138":1,"140":1,"141":2,"198":1,"300":1,"309":1,"310":1,"320":1,"343":1,"418":1,"442":1,"447":1,"449":1,"450":1}}],["starter",{"2":{"35":1}}],["stack",{"0":{"1":1}}],["saltbytes32arbitrary",{"2":{"364":1}}],["salt",{"2":{"355":1,"363":1,"364":2,"365":1,"366":1,"372":1,"376":1,"377":1,"389":1}}],["say",{"2":{"299":1}}],["savings",{"2":{"129":1}}],["saves",{"2":{"136":1}}],["save",{"2":{"35":1,"108":1}}],["sample",{"2":{"108":8,"110":1,"134":1,"426":1}}],["samples",{"0":{"108":1},"2":{"107":2,"108":3}}],["same",{"2":{"26":1,"32":1,"126":1,"173":1,"189":1,"203":1,"213":1,"246":1,"319":1,"353":2,"366":2,"394":1,"424":1,"460":1,"475":1}}],["safeguards",{"2":{"415":1}}],["safeguarding",{"2":{"101":1,"455":1}}],["safely",{"2":{"366":1}}],["safe",{"2":{"352":1,"415":1}}],["safety",{"2":{"280":1}}],["safetransferfrom",{"2":{"26":2,"32":2,"187":5,"188":5,"189":4,"473":5,"474":5,"475":4}}],["safemint",{"2":{"125":2}}],["safer",{"2":{"109":1}}],["sardine",{"2":{"98":1,"345":1,"452":1}}],["sadfasdf",{"2":{"3":1}}],["split",{"2":{"319":1}}],["space",{"2":{"33":1,"351":1}}],["spaces",{"2":{"33":3}}],["sponsor",{"0":{"37":1},"1":{"38":1,"39":1},"2":{"34":1,"39":2}}],["sponsored",{"0":{"32":1},"2":{"27":1,"37":1,"45":1}}],["sponsoring",{"0":{"27":1,"39":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1},"2":{"26":1,"27":1}}],["special",{"2":{"132":1,"148":1,"207":1,"216":1,"256":1,"257":1,"260":1,"262":1,"264":1,"266":1,"318":1}}],["specify",{"2":{"98":1,"148":1,"149":1,"161":1,"162":1,"163":1,"166":1,"345":1,"452":1}}],["specifying",{"2":{"86":1}}],["specified",{"2":{"166":1,"167":1,"186":1,"258":1,"260":1,"262":1,"472":1}}],["specifies",{"2":{"82":1,"83":1}}],["specification",{"2":{"355":1}}],["specific",{"2":{"26":5,"32":1,"37":1,"44":1,"69":1,"92":1,"113":1,"170":1,"177":1,"257":1,"318":1,"339":1,"443":1,"463":1}}],["specs",{"2":{"34":1}}],["speed",{"2":{"25":1,"34":1}}],["sufficient",{"2":{"431":1}}],["sufficiently",{"2":{"26":1}}],["suffix",{"2":{"336":1}}],["suggestgastipcap",{"0":{"269":1},"2":{"269":1}}],["suggestgasprice",{"0":{"268":1},"2":{"268":1}}],["suggested",{"2":{"268":1,"269":1}}],["surf",{"2":{"147":1}}],["sure",{"2":{"35":1,"40":4,"85":1,"117":1,"122":2,"281":1,"293":1}}],["suite",{"2":{"357":1,"360":1}}],["suited",{"2":{"309":1}}],["suit",{"2":{"135":1}}],["supplement",{"2":{"108":1}}],["supported",{"2":{"99":1,"114":1,"115":1,"161":2,"165":1,"203":1,"213":1,"350":1,"425":1,"426":1,"453":1}}],["supports",{"2":{"56":1,"98":1,"168":1,"170":2,"193":1,"345":1,"452":1,"479":1}}],["support",{"0":{"2":1,"194":1,"480":1},"2":{"40":1,"41":1,"84":1,"88":1,"96":1,"98":1,"121":1,"147":1,"195":1,"345":1,"351":1,"364":1,"369":1,"388":1,"400":1,"413":1,"431":1,"450":1,"452":1}}],["suspicious",{"2":{"102":1,"456":1}}],["subject",{"2":{"427":2}}],["submits",{"2":{"249":1,"250":1,"251":1,"252":1}}],["submit",{"2":{"133":1,"137":1,"267":1}}],["submitted",{"2":{"129":1,"251":3,"252":3}}],["subsequent",{"0":{"395":1},"2":{"375":1}}],["subsection",{"2":{"315":1,"325":1}}],["subset",{"2":{"302":1,"312":1,"322":1,"353":1}}],["subscribe",{"2":{"119":1}}],["substitute",{"2":{"117":2}}],["sub",{"2":{"92":3,"443":3}}],["subdomain",{"2":{"43":1,"44":1}}],["summary",{"0":{"83":1},"2":{"83":1}}],["succeeded",{"2":{"170":1,"438":2,"439":1}}],["success",{"2":{"43":1}}],["successfulcontractdeploymentreturn",{"2":{"132":1}}],["successfultransactionreturn",{"2":{"120":1}}],["successfully",{"2":{"112":1,"113":1,"426":1,"438":1}}],["successful",{"0":{"438":1},"2":{"26":2,"32":1,"437":1}}],["such",{"2":{"43":1,"58":1,"61":1,"85":1,"103":2,"173":1,"197":1,"207":1,"216":1,"239":1,"241":1,"309":1,"319":1,"415":1,"434":1,"435":1,"446":1,"457":2,"460":1}}],["silently",{"2":{"242":1,"435":1}}],["situations",{"2":{"239":1}}],["situation",{"2":{"194":1,"480":1}}],["site",{"2":{"35":1}}],["simulation",{"2":{"439":1}}],["simulations",{"2":{"438":1,"439":1}}],["simulating",{"2":{"439":1}}],["simplicity",{"2":{"308":1}}],["simpler",{"2":{"173":1,"460":1}}],["simple",{"2":{"147":1,"173":1,"337":1,"340":1,"348":1,"413":1,"426":1,"460":1}}],["simply",{"2":{"108":1,"129":1,"141":1,"143":1,"275":1,"277":1,"298":1,"329":1}}],["similarly",{"2":{"229":1,"230":1,"251":1,"252":1,"425":1}}],["similar",{"2":{"111":1,"120":1,"187":1,"188":1,"280":1,"402":1,"473":1,"474":1}}],["size",{"2":{"111":1,"114":1,"115":1}}],["since",{"2":{"88":1,"101":1,"108":1,"129":1,"264":1,"279":1,"393":1,"394":1,"455":1}}],["singletondeployer",{"2":{"366":1}}],["singleton",{"0":{"355":1},"2":{"355":7,"356":1}}],["single",{"2":{"45":1,"88":1,"92":1,"99":1,"126":1,"129":1,"186":3,"187":2,"188":2,"189":1,"251":1,"252":1,"298":1,"308":1,"330":1,"347":1,"355":1,"443":1,"453":1,"472":3,"473":2,"474":2,"475":1}}],["singlesigner",{"2":{"26":2,"32":1,"37":1,"45":1}}],["side",{"0":{"174":1,"461":1},"2":{"26":1,"174":1,"177":1,"182":1,"183":1,"184":1,"194":1,"207":1,"216":1,"282":1,"415":1,"461":1,"463":1,"468":1,"469":1,"470":1,"480":1}}],["signup",{"2":{"292":1}}],["signtransactions",{"2":{"185":1,"471":1}}],["sign+verify",{"2":{"173":1,"460":1}}],["signedtransactionstring",{"2":{"267":1}}],["signedmessage",{"2":{"253":2}}],["signed",{"0":{"401":1},"2":{"141":1,"142":1,"148":2,"161":1,"162":1,"163":1,"173":3,"174":1,"177":1,"185":1,"267":1,"281":1,"292":1,"300":1,"310":1,"320":1,"355":1,"358":1,"401":3,"402":1,"403":1,"460":3,"461":1,"463":1,"471":1}}],["signer2",{"2":{"33":2}}],["signer1",{"2":{"33":2}}],["signerssigner",{"2":{"368":1}}],["signers",{"0":{"371":1},"2":{"33":1,"367":1,"368":2,"370":2,"371":2,"377":1,"380":1,"382":1,"383":1,"387":1,"388":4,"401":1,"402":1,"412":1}}],["signer",{"0":{"369":1,"413":1,"414":1},"1":{"370":1,"371":1},"2":{"26":7,"32":4,"37":3,"45":4,"179":2,"181":1,"185":2,"186":4,"187":4,"188":4,"189":4,"369":2,"382":1,"465":2,"467":1,"471":2,"472":4,"473":4,"474":4,"475":4}}],["signmessagereturn",{"2":{"131":1}}],["signmessage",{"0":{"253":1},"2":{"131":3,"181":1,"183":1,"253":2,"401":1,"402":1,"467":1,"469":1}}],["signinwithemail",{"0":{"162":1},"2":{"162":2}}],["signinwith",{"0":{"161":1},"2":{"161":2}}],["signinoptions",{"0":{"163":1},"2":{"148":2,"163":2}}],["signingin",{"2":{"426":1}}],["signing",{"2":{"110":1,"111":1,"131":1,"138":1,"154":1,"170":1,"173":1,"177":1,"185":1,"400":1,"401":1,"402":1,"424":2,"434":1,"460":1,"463":1,"471":1}}],["signin",{"0":{"71":1,"72":1,"73":1,"74":1,"75":1,"76":1},"1":{"72":1,"73":1,"74":1,"75":1,"76":1},"2":{"71":1,"86":1,"424":1,"425":1,"426":1,"427":1,"428":1,"438":1,"439":1}}],["signs",{"2":{"64":1,"113":1,"249":1,"250":1,"251":1,"252":1}}],["signaturevalidation",{"2":{"403":1}}],["signatures",{"0":{"176":1,"402":1,"462":1},"2":{"194":1,"372":1,"382":1,"383":1,"389":1,"401":1,"402":1,"403":5,"480":1}}],["signature",{"0":{"171":1,"182":1,"184":1,"293":1,"400":1,"458":1,"468":1,"470":1},"1":{"172":1,"173":1,"174":1,"401":1,"402":1,"403":1,"459":1,"460":1,"461":1},"2":{"34":1,"128":2,"131":1,"173":1,"174":1,"181":1,"182":2,"184":3,"253":1,"274":1,"275":1,"293":1,"304":1,"314":1,"324":1,"368":1,"369":1,"372":1,"400":1,"401":2,"402":2,"403":8,"460":1,"461":1,"467":1,"468":2,"470":3}}],["signals",{"2":{"33":1}}],["sign",{"0":{"71":1,"112":1,"113":1,"131":1,"139":1,"141":1,"142":1,"181":1,"183":1,"291":1,"304":1,"314":1,"324":1,"424":2,"425":2,"467":1,"469":1},"1":{"72":1,"73":1,"74":1,"75":1,"76":1,"114":1,"115":1,"116":1,"117":1,"118":1,"140":1,"141":1,"142":1,"292":1,"293":1,"425":2,"426":2},"2":{"26":1,"37":1,"64":1,"71":1,"72":1,"73":1,"74":1,"75":1,"105":2,"107":1,"110":1,"112":1,"113":2,"119":1,"131":1,"138":1,"141":3,"142":1,"148":1,"158":1,"161":1,"162":1,"163":1,"173":2,"176":1,"181":1,"183":1,"253":1,"291":2,"293":1,"294":1,"304":1,"314":1,"324":1,"334":1,"336":1,"338":1,"412":1,"414":1,"424":1,"425":1,"460":2,"462":1,"467":1,"469":1}}],["self",{"2":{"380":1,"388":1,"393":1}}],["selector",{"2":{"403":1}}],["selected",{"2":{"288":1}}],["selects",{"2":{"170":1}}],["selecting",{"2":{"37":1,"241":1,"301":1,"303":1,"311":1,"312":1,"313":1,"321":1,"322":1,"323":1}}],["selectfee",{"2":{"26":1,"32":1}}],["select",{"0":{"285":1,"288":1,"301":1,"311":1,"321":1},"2":{"26":1,"37":1,"44":1,"114":2,"115":2,"144":1,"301":2,"302":2,"311":1,"312":2,"321":1,"322":2,"333":1}}],["selectwallet",{"2":{"26":1}}],["separate",{"2":{"329":1}}],["seperate",{"2":{"305":1}}],["senttransactionresponse",{"2":{"438":1}}],["sent",{"2":{"189":1,"337":1,"366":1,"438":1,"439":2,"475":1}}],["sends",{"2":{"335":1,"430":1,"435":1}}],["sendquery",{"2":{"277":3}}],["sendrawtransaction",{"0":{"267":1},"2":{"267":1}}],["senderc1155values",{"2":{"126":3,"129":2}}],["senderc1155",{"0":{"126":1},"1":{"127":1},"2":{"126":1,"129":1}}],["senderc721",{"0":{"124":1},"1":{"125":1},"2":{"124":1,"129":1}}],["senderc20",{"0":{"122":1},"1":{"123":1},"2":{"122":1,"129":1,"434":1}}],["senderaddress",{"2":{"26":1,"32":1}}],["sending",{"0":{"185":1,"186":1,"187":1,"188":1,"189":1,"471":1,"472":1,"473":1,"474":1,"475":1},"2":{"33":1,"120":1,"129":2,"132":1,"187":2,"188":2,"279":1,"302":1,"353":1,"424":1,"434":1,"437":1,"439":1,"473":2,"474":2}}],["sendtransactionmethod",{"2":{"275":1}}],["sendtransactionmethodandwaitforreceipt",{"2":{"275":2,"279":1}}],["sendtransactionandwaitforreceipt",{"0":{"250":1},"2":{"250":1,"252":1,"273":1,"275":2,"279":1}}],["sendtransactionbatchandwaitforreceipts",{"0":{"252":1}}],["sendtransactionbatch",{"0":{"251":1},"2":{"187":1,"188":1,"251":1,"473":1,"474":1}}],["sendtransaction",{"0":{"249":1},"2":{"26":1,"32":1,"33":3,"45":1,"120":2,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":2,"129":2,"132":1,"185":2,"186":2,"187":1,"188":1,"189":2,"249":1,"435":1,"436":1,"438":1,"439":2,"471":2,"472":2,"473":1,"474":1,"475":2}}],["send",{"2":{"26":2,"27":1,"32":1,"33":2,"121":2,"122":1,"123":1,"124":1,"125":1,"126":2,"127":1,"128":1,"186":3,"187":2,"188":2,"275":1,"277":1,"279":1,"303":1,"304":1,"313":1,"314":1,"323":1,"324":1,"355":1,"358":1,"359":1,"425":2,"431":1,"433":1,"472":3,"473":2,"474":2}}],["services",{"2":{"142":1,"194":1,"480":1}}],["service",{"2":{"133":1,"254":1,"340":1,"411":1,"413":1,"414":1}}],["serves",{"2":{"108":1}}],["servers",{"2":{"102":1,"119":1,"456":1}}],["serverprivatekey",{"2":{"26":2,"32":1}}],["server",{"0":{"25":1,"26":1,"27":1,"174":1,"461":1},"1":{"26":1,"27":1,"28":2,"29":2,"30":2,"31":2,"32":2,"33":1},"2":{"25":1,"26":6,"32":3,"37":2,"174":2,"182":1,"184":1,"194":1,"207":1,"216":1,"239":2,"241":1,"461":2,"468":1,"470":1,"480":1}}],["serverless",{"0":{"21":1,"34":1},"1":{"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1},"2":{"34":1,"339":1}}],["semi",{"2":{"126":1,"298":1}}],["semantic",{"2":{"104":1}}],["several",{"2":{"92":1,"289":1,"302":2,"303":1,"312":1,"322":1,"443":1}}],["seterror",{"2":{"426":3}}],["setsigningin",{"2":{"426":1}}],["setsessionhash",{"2":{"426":3}}],["sets",{"2":{"426":1}}],["setbasemetadatauri",{"2":{"335":1,"336":1}}],["setitem",{"2":{"180":1,"466":1}}],["setopenwalletmodal",{"2":{"65":2}}],["setopenconnectmodal",{"2":{"64":2}}],["setting",{"0":{"62":1,"63":1},"2":{"239":1,"241":1,"302":1,"312":1,"322":1}}],["settings",{"0":{"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1},"2":{"45":3,"80":1,"82":1,"110":1,"114":4,"115":4,"117":2,"148":8,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1}}],["set",{"0":{"329":1,"332":1,"336":1},"2":{"35":1,"40":4,"113":1,"117":3,"136":3,"167":1,"318":1,"332":1,"335":1,"336":1,"377":1,"382":1,"394":1}}],["setup",{"0":{"35":1,"51":1,"52":1,"110":1,"421":1,"422":1},"1":{"36":1},"2":{"34":1,"103":1,"107":3,"108":1,"110":1,"120":1,"131":1,"132":1,"240":1,"281":1,"457":1}}],["seconds",{"2":{"136":1,"153":2,"294":1,"304":1,"314":1,"324":1}}],["second",{"2":{"108":1,"121":1,"424":1}}],["security",{"2":{"88":1,"99":1,"103":2,"147":2,"308":2,"346":1,"413":1,"453":1,"457":2}}],["securely",{"2":{"339":1}}],["secured",{"2":{"100":1,"454":1}}],["secure",{"2":{"34":1,"57":1,"58":1,"99":2,"177":2,"196":1,"197":1,"413":1,"445":1,"446":1,"453":2,"463":2}}],["section",{"0":{"282":1},"1":{"283":1},"2":{"26":1,"41":1,"114":1,"115":1,"117":1,"121":1,"207":2,"216":2,"295":1,"332":1,"335":1,"338":1,"401":1,"402":1,"438":1,"439":1}}],["seamlessly",{"0":{"196":1,"445":1},"1":{"197":1,"446":1},"2":{"58":1,"197":1,"446":1}}],["seamless",{"2":{"34":1,"47":1,"87":1,"88":1,"173":1,"414":1,"417":1,"460":1}}],["seen",{"2":{"412":1}}],["seemlessly",{"2":{"129":1}}],["see",{"2":{"26":1,"32":1,"40":1,"41":1,"45":1,"75":1,"76":1,"95":1,"96":1,"98":1,"105":1,"109":2,"111":1,"117":2,"119":1,"121":1,"128":1,"141":1,"148":1,"160":1,"168":1,"174":1,"194":1,"195":3,"207":4,"216":4,"239":2,"292":1,"293":1,"295":2,"301":1,"302":1,"305":3,"311":1,"312":1,"315":2,"321":1,"322":1,"325":1,"338":1,"342":1,"345":1,"354":1,"355":1,"357":1,"358":2,"359":1,"364":1,"397":1,"424":1,"426":3,"438":1,"439":1,"449":1,"450":1,"452":1,"461":1,"480":1}}],["sessionid",{"2":{"424":1,"428":1}}],["sessionhash",{"2":{"424":3,"425":2,"426":6}}],["sessionaddress",{"2":{"180":1,"184":1,"466":1,"470":1}}],["sessionwallet",{"2":{"180":2,"183":1,"466":2,"469":1}}],["sessionprivatekey",{"2":{"180":4,"466":4}}],["sessionsignature",{"2":{"183":1,"184":1,"469":1,"470":1}}],["sessions",{"0":{"427":1},"2":{"174":2,"424":1,"427":4,"428":2,"461":2}}],["sessionsettings",{"2":{"45":2}}],["session",{"0":{"101":1,"177":1,"178":1,"180":1,"183":1,"184":1,"423":1,"428":1,"433":1,"435":1,"436":1,"455":1,"463":1,"464":1,"466":1,"469":1,"470":1},"1":{"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"424":1,"425":1,"426":1,"427":1,"428":1,"434":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1},"2":{"26":14,"32":6,"33":2,"35":1,"37":5,"45":5,"100":4,"101":2,"102":1,"111":1,"112":1,"170":1,"176":1,"177":4,"181":1,"182":2,"183":1,"184":5,"413":2,"423":1,"425":3,"426":5,"428":4,"432":1,"433":2,"434":3,"435":3,"436":2,"438":1,"439":1,"454":4,"455":2,"456":1,"462":1,"463":4,"467":1,"468":2,"469":1,"470":5}}],["sequentially",{"2":{"25":1,"251":1,"252":1}}],["sequentual",{"2":{"25":1}}],["sequenceutils",{"2":{"406":1}}],["sequenceonboard",{"2":{"221":2}}],["sequenceoptions",{"2":{"221":1}}],["sequencemodule",{"2":{"221":2}}],["sequencewallet",{"2":{"211":2}}],["sequencewaas",{"2":{"52":2,"422":2,"424":2,"425":2,"426":2,"427":2,"428":2,"438":1,"439":1}}],["sequencecontext",{"2":{"406":1}}],["sequenceconnector",{"2":{"201":2,"229":2,"230":3}}],["sequenceconfig",{"2":{"107":1,"110":4,"114":1,"115":1,"117":1,"254":1}}],["sequencecanvas",{"2":{"136":1}}],["sequencesdk",{"2":{"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":2,"129":1}}],["sequenceethclient",{"2":{"254":2,"255":1}}],["sequenceethereum",{"2":{"104":1,"123":1,"125":1,"127":1,"242":3,"243":1,"244":1,"246":1,"254":1,"276":1}}],["sequenceexamples",{"2":{"111":1,"133":2}}],["sequenceapiclient",{"2":{"40":1}}],["sequence",{"0":{"27":1,"60":1,"61":1,"84":1,"140":1,"142":1,"169":1,"178":1,"179":1,"190":1,"196":1,"292":1,"326":1,"332":1,"411":1,"413":1,"414":1,"445":1,"464":1,"465":1,"476":1},"1":{"28":1,"29":1,"30":1,"31":1,"32":1,"61":1,"85":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"191":1,"192":1,"193":1,"194":1,"197":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"412":1,"413":1,"414":1,"415":1,"446":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"477":1,"478":1,"479":1,"480":1},"2":{"25":2,"26":10,"27":1,"32":4,"34":2,"37":6,"40":9,"41":2,"45":4,"51":2,"52":1,"55":5,"56":1,"57":1,"58":1,"59":2,"60":1,"61":1,"66":1,"67":1,"69":2,"76":1,"79":1,"84":2,"85":2,"86":2,"87":1,"88":2,"92":1,"95":3,"96":4,"97":1,"98":4,"99":2,"100":3,"103":1,"104":2,"107":1,"108":1,"109":1,"110":2,"117":5,"129":2,"130":2,"134":1,"136":1,"138":1,"140":1,"141":1,"147":10,"148":9,"149":1,"159":2,"164":1,"165":1,"168":1,"169":1,"170":6,"172":2,"173":3,"174":4,"176":1,"177":1,"181":1,"182":1,"192":5,"193":1,"194":5,"195":6,"196":1,"197":1,"198":2,"199":2,"204":1,"205":1,"209":2,"214":1,"215":1,"219":2,"220":3,"221":1,"223":1,"224":1,"225":1,"229":1,"230":2,"232":1,"233":1,"235":2,"236":2,"237":1,"291":1,"292":1,"293":1,"327":1,"332":1,"333":1,"337":1,"339":3,"340":2,"345":4,"346":1,"352":1,"353":3,"354":1,"356":2,"357":1,"360":1,"361":2,"364":2,"365":2,"366":3,"367":1,"377":2,"378":1,"382":1,"389":1,"400":1,"401":1,"402":1,"407":3,"411":2,"412":1,"413":2,"414":4,"415":4,"421":2,"422":1,"423":1,"424":1,"425":1,"426":8,"431":1,"438":1,"439":1,"443":1,"445":1,"446":1,"447":2,"449":3,"450":4,"451":1,"452":4,"453":2,"454":3,"457":1,"459":2,"460":3,"461":4,"462":1,"463":1,"467":1,"468":1,"478":5,"479":1,"480":5}}],["sequencekit",{"0":{"8":1,"14":1,"57":1},"1":{"58":1},"2":{"90":1,"91":1,"441":1,"442":1}}]],"serializationVersion":2}
